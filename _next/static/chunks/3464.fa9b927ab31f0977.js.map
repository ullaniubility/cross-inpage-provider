{"version":3,"file":"static/chunks/3464.fa9b927ab31f0977.js","mappings":"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","sources":["webpack://_N_E/./components/aptos/dapps.config.ts","webpack://_N_E/./components/aptosMartian/AptosExample.tsx","webpack://_N_E/./components/dappList/DAppList.tsx","webpack://_N_E/./styles/Home.module.css","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/tweetnacl|crypto","webpack://_N_E/<anon>"],"sourcesContent":["export const dapps = [\n  {\n    name: 'SEAM',\n    url: 'https://app.seam.money/',\n  },\n  {\n    name: 'Aptos Names',\n    url: 'https://www.aptosnames.com/',\n  },\n  {\n    name: 'Liquid Swap',\n    url: 'https://liquidswap.com/#/',\n  },\n];\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { ProviderAptosMartian } from '@onekeyfe/onekey-aptos-provider';\nimport { random } from 'lodash';\n\nimport { DAppList } from '../dappList/DAppList';\nimport { dapps } from '../aptos/dapps.config';\nimport { HexString, TxnBuilderTypes, BCS } from \"aptos\";\nimport { TxnPayload } from '@onekeyfe/onekey-aptos-provider/dist/types';\n\ndeclare global {\n  interface Window {\n    // @ts-expect-error\n    martian: ProviderAptosMartian;\n  }\n}\n\nconst useProvider = () => {\n  const [provider, setProvider] = useState<ProviderAptosMartian>();\n\n  useEffect(() => {\n    console.log('useProvider', window.martian);\n\n    const injectedProvider = window.martian as ProviderAptosMartian;\n    const aptosProvider =\n      injectedProvider ||\n      new ProviderAptosMartian({\n        // use mock api provider bridge for development\n        // bridge: new CustomBridge(),\n      });\n    setProvider(aptosProvider);\n  }, []);\n\n  return provider;\n};\n\nexport default function App() {\n  const provider = useProvider();\n\n  const [network, setNetwork] = useState<string>('');\n  const [connected, setConnected] = useState<boolean>(false);\n  const [address, setAddress] = useState<string | null>(null);\n  const [collectionName, setCollectionName] = useState<string>('OneKey-Collection');\n  const [nftTokenName, setNftTokenName] = useState<string>('OneKey-NFT-1');\n\n  useEffect(() => {\n    if (!provider) return;\n    // try to eagerly connect\n    // provider.connect().catch((err) => {\n    //     err;\n    //     // fail silently\n    // });\n\n    provider.onNetworkChange((network: string) => {\n      setNetwork(network);\n      console.log(`aptos [onNetworkChange] ${network}`);\n    });\n    provider.onAccountChange((address: string | null) => {\n      setAddress(address);\n      if (address) {\n        setConnected(true);\n        console.log(`aptos [onAccountChange] Switched account to ${address}`);\n      } else {\n        setConnected(false);\n        console.log('aptos [onAccountChange] Switched unknown account');\n        // In this case, dapps could not to anything, or,\n        // Only re-connecting to the new account if it is trusted\n        // provider.connect({ onlyIfTrusted: true }).catch((err) => {\n        //   // fail silently\n        // });\n        // Or, always trying to reconnect\n        provider\n          .connect()\n          .then(() => console.log('[accountChanged] Reconnected successfully'))\n          .catch((err: Error) => {\n            console.log(`[accountChanged] Failed to re-connect: ${err.message}`);\n          });\n      }\n    });\n    return () => {\n      void provider.disconnect();\n    };\n  }, [provider]);\n\n  if (!provider) {\n    return <h2>Could not find a provider</h2>;\n  }\n\n  const connectWallet = async () => {\n    try {\n      const account = await provider.connect();\n      const network = await provider.network();\n\n      setAddress(account.address);\n      setNetwork(network);\n      setConnected(true);\n\n      console.log('[connectWallet] account', account, network);\n    } catch (err) {\n      console.warn(err);\n      console.log(`[error] connect: ${JSON.stringify(err)}`);\n    }\n  };\n\n  const disconnectWallet = async () => {\n    try {\n      await provider.disconnect();\n    } catch (err) {\n      console.warn(err);\n      console.log(`[error] disconnect: ${JSON.stringify(err)}`);\n    }\n  };\n\n  const generateTransaction = async () => {\n    const sender = address;\n    const payload = {\n      function: '0x1::coin::transfer',\n      type_arguments: ['0x1::aptos_coin::AptosCoin'],\n      arguments: [address, 50],\n    };\n    const options = {\n      max_gas_amount: '10000',\n    };\n    const res = await provider.generateTransaction(sender, payload, options);\n    console.log('[generateTransaction]', res);\n    return res;\n  };\n\n  const signAndSubmitTransaction = async () => {\n    const txn = await generateTransaction();\n    const res = await provider.signAndSubmitTransaction(txn);\n    console.log('[signAndSubmitTransaction]', res);\n  };\n\n  const signTransaction = async () => {\n    const txn = await generateTransaction();\n    const res = await provider.signTransaction(txn);\n    console.log('[signTransaction]', res);\n    return res;\n  };\n\n  const submitTransaction = async () => {\n    const txn = await signTransaction();\n    const res = await provider.submitTransaction(txn);\n    console.log('[submitTransaction]', res);\n  };\n\n  const signGenericTransaction = async () => {\n    const res = await provider.signGenericTransaction({\n      func: '0x1::coin::transfer',\n      args: [address, 500],\n      type_args: ['0x1::aptos_coin::AptosCoin'],\n    });\n    console.log('[signGenericTransaction]', res);\n  };\n\n  const generateSignAndSubmitTransaction = async () => {\n    const sender = address;\n    const payload = {\n      function: '0x1::coin::transfer',\n      type_arguments: ['0x1::aptos_coin::AptosCoin'],\n      arguments: [address, 50],\n    };\n    const res = await provider.generateSignAndSubmitTransaction(sender, payload);\n    console.log('[generateSignAndSubmitTransaction]', res);\n  };\n\n  const signMessage = async () => {\n    const res = await provider.signMessage({\n      address: false,\n      application: true,\n      chainId: true,\n      message: 'This is a sample message',\n      nonce: 12345,\n    });\n    console.log('[signMessage]', res);\n  };\n\n  const createCollection = async () => {\n    const res = await provider.createCollection(\n      collectionName,\n      'CollectionDescription',\n      'https://aptos.dev',\n    );\n    console.log('[createCollection]', res);\n  };\n\n  const createToken = async () => {\n    const res = await provider.createToken(\n      collectionName,\n      nftTokenName,\n      'TokenDescription',\n      1,\n      'https://aptos.dev/img/nyan.jpeg',\n      1,\n    );\n    console.log('[createToken]', res);\n  };\n\n  const getTransactions = async () => {\n    const res = await provider.getTransactions();\n    console.log('[getTransactions]', res);\n  };\n\n  const getTransaction = async () => {\n    const res = await provider.getTransaction(\n      '0x407c189992aa2b5a25b3645a3dc6a8b5c9ec2792d214ab9a04b7acc6b7465a00',\n    );\n    console.log('[getTransaction]', res);\n  };\n\n  const getAccountTransactions = async () => {\n    const res = await provider.getAccountTransactions(address);\n    console.log('[getAccountTransactions]', res);\n  };\n\n  const getAccountResources = async () => {\n    const res = await provider.getAccountResources(address);\n    console.log('[getAccountResources]', res);\n  };\n\n  const getAccount = async () => {\n    const res = await provider.getAccount(address);\n    console.log('[getAccount]', res);\n  };\n\n  const getChainId = async () => {\n    const res = await provider.getChainId();\n    console.log('[getChainId]', res);\n  };\n\n  const getLedgerInfo = async () => {\n    const res = await provider.getLedgerInfo();\n    console.log('[getLedgerInfo]', res);\n  };\n\n  const msafeMultiSignature = async () => {\n    const addressFormat = (addr: string) => TxnBuilderTypes.AccountAddress.fromHex(addr);\n    const testMsafe = '0xaa90e0d9d16b63ba4a289fb0dc8d1b454058b21c9b5c76864f825d5c1f32582e';\n\n    const serializer = new BCS.Serializer();\n    const owners = [\n      \"0x5c7b342e9ee2e582ad16fb602e8ebb6ba39b3bfa02a4fd3865853b10dc75765f\",\n      \"0xa3f6a53c57395401ce64f09a188e2259dc9b156387e76c88a7a80a8fe5254476\",\n    ];\n    BCS.serializeVector(\n      owners.map((owner) => addressFormat(owner)),\n      serializer\n    );\n\n    const payload = new TxnBuilderTypes.TransactionPayloadEntryFunction(\n      TxnBuilderTypes.EntryFunction.natural(\n        `0xaa90e0d9d16b63ba4a289fb0dc8d1b454058b21c9b5c76864f825d5c1f32582e::creator`,\n        \"init_wallet_creation\",\n        [],\n        [\n          serializer.getBytes(),\n          BCS.bcsSerializeU8(2),\n          BCS.bcsSerializeUint64(10000000),\n          BCS.bcsSerializeBytes(\n            new HexString(\n              \"b5e97db07fa0bd0e5598aa3643a9bc6f6693bddc1a9fec9e674a461eaa00b193a527b6487c9ba480a3dbfbc351a3fcafd0a5044a0b3c877f759fa5df64a692f1000000000000000002aa90e0d9d16b63ba4a289fb0dc8d1b454058b21c9b5c76864f825d5c1f32582e0d6d6f6d656e74756d5f7361666508726567697374657200010c0b77616c6c6574206e616d65e02e0000000000007800000000000000fa7984630000000001\"\n            ).toUint8Array()\n          ),\n          BCS.bcsSerializeBytes(\n            new HexString(\n              \"fc284900723375e6b087a166c04edf6a1b71a361ad671608a849b733a878aaf910150dcf28e0f197675137abb328db6b55a6d98bee53413ad49c16549c1f0701\"\n            ).toUint8Array()\n          ),\n        ]\n      )\n    );\n\n    const sn = await provider.getAccount(testMsafe).then(acc => BigInt(acc.sequence_number) + BigInt(1))\n\n    const testTxn = new TxnBuilderTypes.RawTransaction(\n      TxnBuilderTypes.AccountAddress.fromHex(testMsafe),\n      sn,\n      payload,\n      BigInt(20123),\n      BigInt(123),\n      BigInt(1793884475),\n      new TxnBuilderTypes.ChainId(1)\n    );\n    const bcsUnsignedTxn = BCS.bcsToBytes(testTxn);\n    //@ts-expect-error\n    const res: string = await provider.signTransaction(HexString.fromUint8Array(bcsUnsignedTxn).noPrefix());\n    const bcsSignedTxn = Uint8Array.from(res.split(\",\").map((s) => Number(s)));\n    const signedTransaction = TxnBuilderTypes.SignedTransaction.deserialize(\n      new BCS.Deserializer(bcsSignedTxn)\n    );\n\n    console.log('[msafeMultiSignature] success ', JSON.stringify(signedTransaction, (key, value) =>\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      typeof value === 'bigint'\n        ? value.toString()\n        : value\n    ));\n  };\n\n\n  return (\n    <div>\n      <DAppList dapps={dapps} />\n      {!provider && (\n        <a target=\"_blank\" href={'https://www.onekey.so/download/'}>\n          Install OneKey Extension →\n        </a>\n      )}\n      <main>\n        {provider && connected ? (\n          <>\n            <div>\n              <pre>Network: {network}</pre>\n              <pre>Connected as: {address}</pre>\n            </div>\n            <button onClick={generateTransaction}>Generate Transaction</button>\n            <button onClick={signAndSubmitTransaction}>Sign&Send Transaction</button>\n            <button onClick={signTransaction}>Sign Transaction </button>\n            <button onClick={submitTransaction}>Submit Transaction </button>\n            <button onClick={signGenericTransaction}>Sign Generic Transaction </button>\n            <button onClick={generateSignAndSubmitTransaction}>\n              Generate Sign&Send Transaction{' '}\n            </button>\n            <button onClick={signMessage}>Sign Message</button>\n            <button onClick={getTransactions}>Get Transactions</button>\n            <button onClick={getTransaction}>Get Transaction</button>\n            <button onClick={getAccountTransactions}>Get Account Transaction</button>\n            <button onClick={getAccountResources}>Get Account Resources</button>\n            <button onClick={getAccount}>Get Account</button>\n            <button onClick={getChainId}>Get ChainId</button>\n            <button onClick={getLedgerInfo}>Get LedgerInfo</button>\n            <button onClick={() => disconnectWallet()}>Disconnect</button>\n\n            <br />\n            <br />\n            <div style={{ border: '1px solid #cccccc', flexDirection: 'column' }}>\n              <pre>Collection Name: <input\n                type=\"text\"\n                placeholder=\"Collection Name\"\n                value={collectionName}\n                onChange={(e) => setCollectionName(e.target.value)}\n              /> 不能重名，要改名字。</pre>\n              <pre><button onClick={createCollection}>Create Collection</button></pre>\n            </div>\n\n            <br />\n            <div style={{ border: '1px solid #cccccc', flexDirection: 'column' }}>\n              <pre>Collection Name: <input\n                type=\"text\"\n                placeholder=\"Collection Name\"\n                value={collectionName}\n                onChange={(e) => setCollectionName(e.target.value)}\n              /> 指定链上已经存在的 Collection Name。</pre>\n              <pre>NFT Name: <input\n                type=\"text\"\n                placeholder=\"Token Name\"\n                value={nftTokenName}\n                onChange={(e) => setNftTokenName(e.target.value)}\n              /> NFT Name 不能重名，要改名字。</pre>\n              <pre><button onClick={createToken}>Create Token</button></pre>\n            </div>\n\n            <br />\n            <div style={{ border: '1px solid #cccccc', flexDirection: 'column' }}>\n              Msafe Multi-signature Demo (Mainnet)\n              <pre><button onClick={msafeMultiSignature}>Sign Transaction</button></pre>\n            </div>\n          </>\n        ) : (\n          <>\n            <button onClick={() => connectWallet()}>Connect Wallet</button>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n","import React from 'react';\nimport styles from '../../styles/Home.module.css';\n\ninterface DApp {\n  name: string;\n  url: string;\n}\n\ninterface Props {\n  dapps: DApp[];\n}\n\nfunction DAppList(props: Props) {\n  const { dapps } = props;\n\n  return (\n    <div className={styles.container}>\n      <h3>Top DApps</h3>\n      <ul>\n        {dapps.map((dapp) => (\n          <li key={dapp.name}>\n            <a href={dapp.url} target={'_blank'}>\n              {dapp.name} ↗\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport { DAppList };\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__d256j\",\"main\":\"Home_main__VkIEL\",\"footer\":\"Home_footer__yFiaX\",\"title\":\"Home_title__hYX6j\",\"description\":\"Home_description__uXNdx\",\"code\":\"Home_code__VVrIr\",\"grid\":\"Home_grid__AVljO\",\"card\":\"Home_card__E5spL\",\"logo\":\"Home_logo__IOQAX\"};","/* (ignored) */"],"names":["dapps","name","url","useProvider","_useState","useState","_useState2","_slicedToArray","provider","setProvider","useEffect","console","log","window","martian","injectedProvider","ProviderAptosMartian","App","_ref","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_useState3","_useState4","network","setNetwork","_useState5","_useState6","connected","setConnected","_useState7","_useState8","address","setAddress","_useState9","_useState10","collectionName","setCollectionName","_useState11","_useState12","nftTokenName","setNftTokenName","onNetworkChange","concat","onAccountChange","connect","then","catch","err","message","disconnect","_jsx","children","connectWallet","_asyncToGenerator","account","warn","JSON","stringify","apply","arguments","disconnectWallet","generateTransaction","res","function","type_arguments","max_gas_amount","signAndSubmitTransaction","txn","signTransaction","submitTransaction","signGenericTransaction","func","args","type_args","generateSignAndSubmitTransaction","payload","signMessage","application","chainId","nonce","createCollection","createToken","getTransactions","getTransaction","getAccountTransactions","getAccountResources","getAccount","getChainId","getLedgerInfo","msafeMultiSignature","testMsafe","serializer","BCS","Serializer","serializeVector","owners","map","owner","TxnBuilderTypes","AccountAddress","fromHex","TransactionPayloadEntryFunction","EntryFunction","natural","getBytes","bcsSerializeU8","bcsSerializeUint64","bcsSerializeBytes","HexString","toUint8Array","sn","acc","BigInt","sequence_number","testTxn","RawTransaction","ChainId","bcsUnsignedTxn","bcsToBytes","fromUint8Array","noPrefix","bcsSignedTxn","Uint8Array","from","split","s","Number","SignedTransaction","deserialize","Deserializer","key","value","toString","_jsxs","DAppList","target","href","_Fragment","onClick","style","border","flexDirection","type","placeholder","onChange","e","props","className","styles","dapp","module","exports"],"sourceRoot":""}