{"version":3,"file":"static/chunks/8713.d134e0ee56921e90.js","mappings":"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","sources":["webpack://_N_E/./components/dappList/DAppList.tsx","webpack://_N_E/./components/solana/dapps.config.ts","webpack://_N_E/./components/solana/SolanaExample.tsx","webpack://_N_E/./styles/Home.module.css","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/@noble/ed25519/lib/esm|crypto","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/@noble/secp256k1/lib/esm|crypto","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/@solana/web3.js/node_modules/bn.js/lib|buffer","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/tweetnacl|crypto","webpack://_N_E/<anon>"],"sourcesContent":["import React from 'react';\nimport styles from '../../styles/Home.module.css';\n\ninterface DApp {\n  name: string;\n  url: string;\n}\n\ninterface Props {\n  dapps: DApp[];\n}\n\nfunction DAppList(props: Props) {\n  const { dapps } = props;\n\n  return (\n    <div className={styles.container}>\n      <h3>Top DApps</h3>\n      <ul>\n        {dapps.map((dapp) => (\n          <li key={dapp.name}>\n            <a href={dapp.url} target={'_blank'}>\n              {dapp.name} â†—\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport { DAppList };\n","export const dapps = [\n  {\n    name: 'Magic Eden',\n    url: 'https://magiceden.io/',\n  },\n  {\n    name: 'Mean Finance',\n    url: 'https://app.meanfi.com/',\n  },\n  {\n    name: 'Saber',\n    url: 'https://app.saber.so/',\n  },\n  {\n    name: 'ORCA',\n    url: 'https://www.orca.so/',\n  },\n  {\n    name: 'Rarible',\n    url: 'https://rarible.com/connect',\n  },\n  {\n    name: 'Raydium',\n    url: 'https://raydium.io/swap/',\n  },\n];\n","import React from 'react';\nimport { useState, useEffect, useMemo } from 'react';\nimport {\n  Connection,\n  PublicKey,\n  Transaction,\n  clusterApiUrl,\n  SystemProgram,\n  LAMPORTS_PER_SOL,\n} from '@solana/web3.js';\nimport { ProviderSolana } from '@onekeyfe/onekey-solana-provider';\nimport nacl from 'tweetnacl';\n\n// import { CustomBridge } from './bridge';\nimport base58 from 'bs58';\n\nimport { DAppList } from '../dappList/DAppList';\nimport { dapps } from './dapps.config';\n\nconst NETWORK = clusterApiUrl('devnet');\n\nconst Receiver = new PublicKey('8yAmEoio2d7DszNucNzKf4AqW2JfGRJ1z5Nu9czdrgc1');\nconst LastBlockHash = 'GLXLbuzf788BVk738RKcgNWftzGHwjzXzVPAxFDt8naQ';\n\ndeclare global {\n  interface Window {\n    _solana: ProviderSolana;\n  }\n}\n\nconst useProvider = () => {\n  const [provider, setProvider] = useState<ProviderSolana>();\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const injectedProvider = (window.solana || window.phantom?.solana) as ProviderSolana;\n    const solanaProvider =\n      injectedProvider ||\n      new ProviderSolana({\n        // use mock api provider bridge for development\n        // bridge: new CustomBridge(),\n      });\n    window._solana = solanaProvider;\n    setProvider(solanaProvider);\n\n    // setProvider(window.solana); // use injected solana for testing\n  }, []);\n\n  return provider;\n};\n\nexport default function App() {\n  const provider = useProvider();\n\n  const connection = useMemo(() => new Connection(NETWORK), []);\n\n  const [, setConnected] = useState<boolean>(false);\n  const [publicKey, setPublicKey] = useState<PublicKey | null>(null);\n\n  useEffect(() => {\n    if (!provider) return;\n    // try to eagerly connect\n    provider.connect({ onlyIfTrusted: true }).catch((err) => {\n      err;\n      // fail silently\n    });\n    provider.on('connect', (publicKey: PublicKey) => {\n      setPublicKey(publicKey);\n      setConnected(true);\n      console.log(`solana [connect] ${publicKey.toBase58()}`);\n    });\n    provider.on('disconnect', () => {\n      setPublicKey(null);\n      setConnected(false);\n      console.log('solana [disconnect] ðŸ‘‹');\n    });\n    provider.on('accountChanged', (publicKey: PublicKey | null) => {\n      setPublicKey(publicKey);\n      if (publicKey) {\n        console.log(`solana [accountChanged] Switched account to ${publicKey?.toBase58()}`);\n      } else {\n        console.log('solana [accountChanged] Switched unknown account');\n        // In this case, dapps could not to anything, or,\n        // Only re-connecting to the new account if it is trusted\n        // provider.connect({ onlyIfTrusted: true }).catch((err) => {\n        //   // fail silently\n        // });\n        // Or, always trying to reconnect\n        provider\n          .connect()\n          .then(() => console.log('[accountChanged] Reconnected successfully'))\n          .catch((err: Error) => {\n            console.log(`solana [accountChanged] Failed to re-connect: ${err.message}`);\n          });\n      }\n    });\n    return () => {\n      void provider.disconnect();\n    };\n  }, [provider]);\n\n  if (!provider) {\n    return <h2>Could not find a provider</h2>;\n  }\n\n  const connectWallet = async () => {\n    try {\n      await provider.connect();\n    } catch (err) {\n      console.warn(err);\n      console.log(`[error] connect: ${JSON.stringify(err)}`);\n    }\n  };\n\n  const disconnectWallet = async () => {\n    try {\n      await provider.disconnect();\n    } catch (err) {\n      console.warn(err);\n      console.log(`[error] disconnect: ${JSON.stringify(err)}`);\n    }\n  };\n\n  const createTransferTransaction = () => {\n    if (!provider.publicKey) return;\n\n    const transaction = new Transaction().add(\n      SystemProgram.transfer({\n        fromPubkey: provider.publicKey,\n        toPubkey: Receiver,\n        lamports: LAMPORTS_PER_SOL / 100,\n      }),\n    );\n    transaction.feePayer = provider.publicKey;\n\n    // console.log('Getting recent blockhash');\n    // const { blockhash: lastBlockHash } = await connection.getLatestBlockhash();\n    // console.log('LastBlockHash: ', lastBlockHash);\n    transaction.recentBlockhash = LastBlockHash;\n    return transaction;\n  };\n\n  const requestAirdrop = async () => {\n    if (!provider.publicKey) return;\n    console.log('Requesting airdrop');\n    const airdropSignature = await connection.requestAirdrop(provider.publicKey, LAMPORTS_PER_SOL);\n    console.log('Waiting for airdrop...');\n    await connection.confirmTransaction(airdropSignature);\n    console.log('Airdrop confirmed!');\n  };\n\n  const signAndSendTransaction = async () => {\n    try {\n      const transaction = createTransferTransaction();\n      if (!transaction) return;\n\n      const { signature } = await provider.signAndSendTransaction(transaction);\n\n      console.log('Submitted transaction, signature: ', signature);\n      console.log('Awaiting confirmation');\n      const result = await connection.confirmTransaction(signature);\n      console.log('Transaction confirmed: ', result);\n    } catch (err) {\n      console.warn(err);\n      console.log(`[error] sendTransaction: ${JSON.stringify(err)}`);\n    }\n  };\n\n  const signTransaction = async () => {\n    try {\n      const transaction = createTransferTransaction();\n      if (!transaction) return;\n\n      const signed = await provider.signTransaction(transaction);\n      console.log('Signed transaction: ', base58.encode(signed.serialize()));\n      // console.info('Verify signature: ', signed.verifySignatures());\n\n      // // Send Transaction\n      // const signature = await connection.sendRawTransaction(signed.serialize());\n      // console.log('Submitted transaction: ', signature);\n      // console.log('Awaiting confirmation');\n      // await connection.confirmTransaction(signature);\n      // console.log('Transaction ' + signature + ' confirmed');\n    } catch (err) {\n      console.warn(err);\n      console.log('[error] signTransaction: ', err);\n    }\n  };\n\n  const signMultipleTransactions = async () => {\n    try {\n      const [transaction1, transaction2] = await Promise.all([\n        createTransferTransaction(),\n        createTransferTransaction(),\n      ]);\n      if (transaction1 && transaction2) {\n        const txns = await provider.signAllTransactions([transaction1, transaction2]);\n        console.log('signMultipleTransactions txns: ', txns);\n        // txns.forEach((tx) => console.info('Verify signature: ', tx.verifySignatures()));\n      }\n    } catch (err) {\n      console.warn(err);\n      console.log('[error] signMultipleTransactions: ', err);\n    }\n  };\n\n  const signMessage = async () => {\n    const message = 'Hello, world!';\n    try {\n      const data = new TextEncoder().encode(message);\n      const res = await provider.signMessage(data, 'hex');\n      if (!res.signature) return;\n      console.log('Message signed: ', res);\n      const verified = nacl.sign.detached.verify(data, res.signature, res.publicKey.toBytes());\n      console.log(`Message verified: `, verified);\n    } catch (err) {\n      console.warn(err);\n      console.log('[error] signMessage: ', err);\n    }\n  };\n\n  return (\n    <div>\n      <DAppList dapps={dapps} />\n      {!provider && (\n        <a target=\"_blank\" href={'https://www.onekey.so/download/'}>\n          Install OneKey Extension â†’\n        </a>\n      )}\n      <main>\n        {provider && publicKey ? (\n          <>\n            <div>\n              <pre>Network: {NETWORK}</pre>\n              <pre>Connected as: {publicKey.toBase58()}</pre>\n            </div>\n            <button onClick={requestAirdrop}>Request Airdrop</button>\n            <button onClick={signAndSendTransaction}>Sign&Send Transaction</button>\n            <button onClick={signTransaction}>Sign Transaction </button>\n            <button onClick={signMultipleTransactions}>Sign All Transactions</button>\n            <button onClick={signMessage}>Sign Message</button>\n            <button onClick={() => disconnectWallet()}>Disconnect</button>\n          </>\n        ) : (\n          <>\n            <button onClick={() => connectWallet()}>Connect Wallet</button>\n          </>\n        )}\n      </main>\n      <a\n        target={'_blank'}\n        href=\"https://codesandbox.io/s/github/phantom-labs/sandbox?file=/src/App.tsx\"\n      >\n        Go to official test Dapp â†’\n      </a>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__d256j\",\"main\":\"Home_main__VkIEL\",\"footer\":\"Home_footer__yFiaX\",\"title\":\"Home_title__hYX6j\",\"description\":\"Home_description__uXNdx\",\"code\":\"Home_code__VVrIr\",\"grid\":\"Home_grid__AVljO\",\"card\":\"Home_card__E5spL\",\"logo\":\"Home_logo__IOQAX\"};","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"names":["DAppList","props","dapps","_jsxs","className","styles","children","_jsx","map","dapp","href","url","target","name","NETWORK","clusterApiUrl","Receiver","PublicKey","useProvider","_useState","useState","_useState2","_slicedToArray","provider","setProvider","useEffect","_window$phantom","solanaProvider","injectedProvider","solana","window","phantom","ProviderSolana","_solana","App","_ref","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","connection","useMemo","Connection","_useState3","setConnected","_useState4","_useState5","_useState6","publicKey","setPublicKey","connect","onlyIfTrusted","catch","err","on","console","log","concat","toBase58","then","message","disconnect","connectWallet","_asyncToGenerator","warn","JSON","stringify","apply","arguments","disconnectWallet","createTransferTransaction","transaction","Transaction","add","SystemProgram","transfer","fromPubkey","toPubkey","lamports","LAMPORTS_PER_SOL","feePayer","recentBlockhash","requestAirdrop","airdropSignature","confirmTransaction","signAndSendTransaction","signature","_yield$provider$signA","result","signTransaction","signed","base58","serialize","signMultipleTransactions","_yield$Promise$all","Promise","all","_yield$Promise$all2","transaction1","transaction2","txns","signAllTransactions","signMessage","data","TextEncoder","encode","res","verified","nacl","detached","verify","toBytes","_Fragment","onClick","module","exports"],"sourceRoot":""}