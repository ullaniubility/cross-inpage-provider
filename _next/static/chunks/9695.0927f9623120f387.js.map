{"version":3,"file":"static/chunks/9695.0927f9623120f387.js","mappings":"4GAAA,IAAAA,EAAyBC,EAAQ,OACjCC,EAAkBD,EAAQ,OAC1BE,EAAeF,EAAQ,OACvBG,EAAYH,EAAQ,OACpBI,EAAWJ,EAAQ,OACnBK,EAAmBL,EAAQ,MAM3BM,CAAAA,EAAAC,WAAmB,KAAAH,EAAA,uEAMnBE,EAAAE,UAAkB,KAAAJ,EAAA,wEAMlBE,EAAAG,WAAmB,oEAMnBH,EAAAI,SAAiB,CAAGC,EAAMC,IAAA,CAAAN,EAAAG,WAAA,QAM1BH,EAAAO,gBAAwB,oEAMxBP,EAAAQ,cAAsB,CAAGH,EAAMC,IAAA,CAAAN,EAAAO,gBAAA,QAM/BP,EAAAS,UAAkB,oEAMlBT,EAAAU,QAAgB,CAAGL,EAAMC,IAAA,CAAAN,EAAAS,UAAA,QAMzBT,EAAAF,EAAU,CAAAA,EAMVE,EAAAH,GAAW,CAAAA,EAMXG,EAAAL,SAAiB,CAAAA,EAQjBK,EAAAW,KAAa,UAAAC,CAAA,EACb,OAASP,EAAMQ,WAAA,CAAAD,GAAAE,IAAA,GACf,EAWAd,EAAAe,aAAqB,CAAGf,EAAAgB,SAAiB,UAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACzC,IAAAC,EAAApB,EAAAW,KAAA,CAAAO,SAEA,CADAD,EAAAjB,EAAAqB,QAAA,CAAAJ,GACAE,GACA,EAAAD,MAAA,CAAAA,GACAD,EAAAK,IAAA,CAAAF,GACAA,GAEAH,EAAAM,KAAA,GAAAL,GAEA,EAAAA,MAAA,CAAAA,GACAD,EAAAK,IAAA,CAAAF,EAAAF,EAAAD,EAAAC,MAAA,EACAE,GAEAH,EAAAM,KAAA,EAAAL,EAEA,EASAlB,EAAAwB,cAAsB,UAAAP,CAAA,CAAAC,CAAA,EACtB,OAAAlB,EAAAgB,SAAA,CAAAC,EAAAC,EAAA,GACA,EAOAlB,EAAAyB,KAAa,CAAGzB,EAAA0B,UAAkB,UAAAC,CAAA,EAGlC,IADA,IAAAC,EAAAD,CADAA,EAAA3B,EAAA6B,cAAA,CAAAF,EAAA,CACA,IACAA,EAAAT,MAAA,IAAAU,MAAAA,EAAAE,QAAA,IAEAF,EAAAD,CADAA,EAAAA,EAAAJ,KAAA,IACA,IAEA,OAAAI,CACA,EAKA3B,EAAAqB,QAAgB,UAAAU,CAAA,EAChB,IAAO1B,EAAM2B,QAAA,CAAAD,IACb,GAAAE,MAAAC,OAAA,CAAAH,GACAA,EAAU1B,EAAMC,IAAA,CAAAyB,QACV,oBAAAA,EAENA,EADA/B,EAAAmC,aAAA,CAAAJ,GACY1B,EAAMC,IAAA,CAAAN,EAAAoC,SAAA,CAAApC,EAAA6B,cAAA,CAAAE,IAAA,OAEN1B,EAAMC,IAAA,CAAAyB,QAEZ,oBAAAA,EACNA,EAAA/B,EAAAqC,WAAA,CAAAN,QACM,GAAAA,MAAAA,EACNA,EAAU1B,EAAMQ,WAAA,SACV,GAAAkB,EAAAO,OAAA,CAENP,EAAU1B,EAAMC,IAAA,CAAAyB,EAAAO,OAAA,SAEhB,4BAGA,OAAAP,CACA,EAOA/B,EAAAuC,QAAgB,UAAAC,CAAA,EAChB5C,EAAA4C,EAAA,gCACA5C,EAAA4C,GAAA,6BACA,IAAAC,EAAAD,EAAAV,QAAA,KAKA,OAJAW,EAAAvB,MAAA,IACAuB,CAAAA,EAAA,IAAAA,CAAA,EAGA,KAAAA,CACA,EAOAzC,EAAAqC,WAAmB,UAAAG,CAAA,EACnB,IAAAC,EAAAzC,EAAAuC,QAAA,CAAAC,GACA,OAASnC,EAAMC,IAAA,CAAAmC,EAAAlB,KAAA,UACf,EAQAvB,EAAA0C,WAAmB,UAAAtB,CAAA,EACnB,WAAAtB,EAAAE,EAAAqB,QAAA,CAAAD,IAAAuB,QAAA,EACA,EAOA3C,EAAA4C,WAAmB,UAAAxB,CAAA,EAEnB,WAAAA,CADAA,EAAApB,EAAAqB,QAAA,CAAAD,EAAA,EACAU,QAAA,OACA,EAOA9B,EAAA6C,UAAkB,UAAAC,CAAA,EAClB,WAAAhD,EAAAgD,GAAAC,QAAA,KACA,EAOA/C,EAAAgD,UAAkB,UAAAF,CAAA,EAClB,OAASzC,EAAMC,IAAA,CAAAwC,EAAAG,MAAA,MAAAX,OAAA,GACf,EAQAtC,EAAAkD,IAAY,UAAAvB,CAAA,CAAAwB,CAAA,EAIZ,OAHAxB,EAAA3B,EAAAqB,QAAA,CAAAM,GACAwB,GAAAA,CAAAA,EAAA,KAEA1D,EAAA,SAAA0D,GAAAC,MAAA,CAAAzB,GAAA0B,MAAA,EACA,EAOArD,EAAAsD,MAAc,UAAA3B,CAAA,EAEd,OADAA,EAAA3B,EAAAqB,QAAA,CAAAM,GACA5B,EAAA,UAAAqD,MAAA,CAAAzB,GAAA0B,MAAA,EACA,EAQArD,EAAAuD,SAAiB,UAAA5B,CAAA,CAAA6B,CAAA,EACjB7B,EAAA3B,EAAAqB,QAAA,CAAAM,GACA,IAAA8B,EAAA1D,EAAA,UAAAqD,MAAA,CAAAzB,GAAA0B,MAAA,SACA,KAAAG,EACAxD,EAAAgB,SAAA,CAAAyC,EAAA,IAEAA,CAEA,EAOAzD,EAAA0D,OAAe,UAAA/B,CAAA,EACf,OAAA3B,EAAAkD,IAAA,CAAArD,EAAA8D,MAAA,CAAAhC,GACA,EAOA3B,EAAA4D,cAAsB,UAAAC,CAAA,EACtB,OAAAlE,EAAAmE,gBAAA,CAAAD,EACA,EASA7D,EAAA+D,aAAqB,UAAAC,CAAA,CAAAC,CAAA,SACrB,KAAAD,EAAA9C,MAAA,CAEAvB,EAAAuE,eAAA,CAAqC7D,EAAM8D,MAAA,EAAU9D,EAAMC,IAAA,MAAA0D,EAAA,KAG3DC,GAIAtE,EAAAuE,eAAA,CAAAF,EACA,EASAhE,EAAAoE,YAAoB,CAAGpE,EAAAqE,eAAuB,UAAAC,CAAA,CAAAL,CAAA,EAO9C,OANAK,EAAAtE,EAAAqB,QAAA,CAAAiD,GACAL,GAAAK,KAAAA,EAAApD,MAAA,EACAoD,CAAAA,EAAA3E,EAAA4E,gBAAA,CAAAD,EAAA,IAAA/C,KAAA,KAEA3B,EAAA0E,KAAAA,EAAApD,MAAA,EAEAlB,EAAAkD,IAAA,CAAAoB,GAAA/C,KAAA,KACA,EAOA,IAAAiD,EAAsBxE,EAAAwE,eAAuB,UAAAX,CAAA,EAG7C,OAFAA,EAAA7D,EAAAqB,QAAA,CAAAwC,GAEAlE,EAAA8E,eAAA,CAAAZ,EAAA,IAAAtC,KAAA,GACA,CAOAvB,CAAAA,EAAA0E,YAAoB,UAAAV,CAAA,EAKpB,OAHA,KAAAA,CADAA,EAAAhE,EAAAqB,QAAA,CAAA2C,EAAA,EACA9C,MAAA,EACA8C,CAAAA,EAAArE,EAAA4E,gBAAA,CAAAP,EAAA,IAAAzC,KAAA,KAEAyC,CACA,EAQAhE,EAAA2E,MAAc,UAAAC,CAAA,CAAAf,CAAA,EACd,IAAAgB,EAAAlF,EAAAmF,IAAA,CAAAF,EAAAf,GAEAkB,EAAA,GAIA,OAHAA,EAAAC,CAAA,CAAAH,EAAAI,SAAA,CAAA1D,KAAA,OACAwD,EAAAG,CAAA,CAAAL,EAAAI,SAAA,CAAA1D,KAAA,QACAwD,EAAAhD,CAAA,CAAA8C,EAAAM,QAAA,IACAJ,CACA,EAUA/E,EAAAoF,mBAA2B,UAAAC,CAAA,EAC3B,IAAAC,EAAAtF,EAAAqB,QAAA,kCAAAgE,EAAAnE,MAAA,CAAAY,QAAA,IACA,OAAA9B,EAAAkD,IAAA,CAAsB7C,EAAM8D,MAAA,EAAAmB,EAAAD,EAAA,EAC5B,EAUArF,EAAAuF,SAAiB,UAAAX,CAAA,CAAA7C,CAAA,CAAAiD,CAAA,CAAAE,CAAA,EACjB,IAAAD,EAAkB5E,EAAM8D,MAAA,EAAAnE,EAAAgB,SAAA,CAAAgE,EAAA,IAAAhF,EAAAgB,SAAA,CAAAkE,EAAA,SACxBC,EAAApD,EAAA,GACA,GAAAoD,IAAAA,GAAAA,IAAAA,EACA,yCAEA,IAAAK,EAAA7F,EAAA8F,OAAA,CAAAb,EAAAK,EAAAE,GACA,OAAAxF,EAAA4E,gBAAA,CAAAiB,EAAA,IAAAjE,KAAA,GACA,EASAvB,EAAA0F,QAAgB,UAAA3D,CAAA,CAAAiD,CAAA,CAAAE,CAAA,EAEhB,GAAAnD,KAAAA,GAAAA,KAAAA,EACA,mCAKA,OAAA/B,EAAA4C,WAAA,CAA6BvC,EAAM8D,MAAA,EACnCnE,EAAAe,aAAA,CAAAiE,EAAA,IACAhF,EAAAe,aAAA,CAAAmE,EAAA,IACAlF,EAAAqB,QAAA,CAAAU,EAAA,IACA,EACA,EAQA/B,EAAA2F,UAAkB,UAAAd,CAAA,EAIlB,GAAAA,KAAAA,CAHAA,EAAA7E,EAAAqB,QAAA,CAAAwD,EAAA,EAGA3D,MAAA,CACA,wCAGA,IAAAa,EAAA8C,CAAA,KAMA,OAJA9C,EAAA,IACAA,CAAAA,GAAA,IAGA,CACAA,EAAAA,EACAiD,EAAAH,EAAAtD,KAAA,OACA2D,EAAAL,EAAAtD,KAAA,OACA,CACA,EAOAvB,EAAA4F,gBAAwB,UAAA/B,CAAA,EACxB,OAAA7D,EAAAqE,eAAA,CAAAG,EAAAX,GACA,EAOA7D,EAAA6F,cAAsB,UAAAC,CAAA,EACtB,6BAA4BC,IAAA,CAAAD,EAC5B,EAOA9F,EAAAgG,iBAAyB,UAAAF,CAAA,EACzBA,EAAA9F,EAAA6B,cAAA,CAAAiE,GAAAG,WAAA,GAIA,QAHAxC,EAAAzD,EAAAkD,IAAA,CAAA4C,GAAAhE,QAAA,QACAiD,EAAA,KAEAvC,EAAA,EAAkBA,EAAAsD,EAAA5E,MAAA,CAAoBsB,IACtC0D,SAAAzC,CAAA,CAAAjB,EAAA,QACAuC,GAAAe,CAAA,CAAAtD,EAAA,CAAA2D,WAAA,GAEApB,GAAAe,CAAA,CAAAtD,EAAA,CAIA,OAAAuC,CACA,EAOA/E,EAAAoG,sBAA8B,UAAAN,CAAA,EAC9B,OAAA9F,EAAA6F,cAAA,CAAAC,IAAA9F,EAAAgG,iBAAA,CAAAF,KAAAA,CACA,EAQA9F,EAAAqG,eAAuB,UAAA/F,CAAA,CAAAgG,CAAA,EAavB,OAZAhG,EAAAN,EAAAqB,QAAA,CAAAf,GAMAgG,EAHAA,CAFAA,EAAA,IAAAxG,EAAAwG,EAAA,EAEAC,MAAA,GAGA,KAEYlG,EAAMC,IAAA,CAAAgG,EAAAhE,OAAA,IAIlBtC,EAAA0D,OAAA,EAAApD,EAAAgG,EAAA,EAAA/E,KAAA,KACA,EAOAvB,EAAAwG,aAAqB,UAAAV,CAAA,EACrB,IAAAnE,EAAA3B,EAAAyB,KAAA,CAAAqE,GACA,OAAAnE,IAAAA,EAAAT,MAAA,EAAAS,CAAA,OAAAA,CAAA,KACA,EAOA3B,EAAAmC,aAAqB,UAAAsE,CAAA,EACrB,MAAAA,OAAAA,EAAAlF,KAAA,KACA,EAOAvB,EAAA6B,cAAsB,UAAA4E,CAAA,QACtB,iBAAAA,EACAA,EAEAzG,EAAAmC,aAAA,CAAAsE,GAAAA,EAAAlF,KAAA,IAAAkF,CACA,EAOAzG,EAAA0G,YAAoB,UAAAD,CAAA,QACpB,iBAAAA,EACAA,EAGAzG,EAAAmC,aAAA,CAAAsE,GAAAA,EAAA,KAAAA,CACA,EAOAzG,EAAAoC,SAAiB,UAAAT,CAAA,EAEjB,OADAA,EAAAT,MAAA,IAAAS,CAAAA,EAAA,IAAAA,CAAAA,EACAA,CACA,EAYA,IAAAgF,EAAA,IAAA7G,EAAA,uEACA8G,EAAA,IAAA9G,EAAA,sEAEAE,CAAAA,EAAA6G,gBAAwB,UAAA9E,CAAA,CAAAiD,CAAA,CAAAE,CAAA,CAAA4B,CAAA,SACxB,KAAA9B,EAAA9D,MAAA,EAAAgE,KAAAA,EAAAhE,MAAA,EAIAa,CAAAA,KAAAA,GAAAA,KAAAA,CAAA,IAIAiD,EAAA,IAAAlF,EAAAkF,GACAE,EAAA,IAAApF,EAAAoF,IAEAF,CAAAA,EAAAuB,MAAA,IAAAvB,EAAA+B,EAAA,CAAAH,IAAA1B,EAAAqB,MAAA,IAAArB,EAAA6B,EAAA,CAAAH,EAAA,GAIA,MAAAE,GAAA,QAAAhH,EAAAoF,GAAA8B,GAAA,CAAAL,EAAA,EAKA,EAOA3G,EAAAiH,QAAgB,UAAAC,CAAA,EAChB,GAAM7G,EAAM2B,QAAA,CAAAkF,GACZ,WAAAA,EAAApF,QAAA,QACI,GAAAoF,aAAAjF,MAAA,CAEJ,QADAkF,EAAA,GACA3E,EAAA,EAAoBA,EAAA0E,EAAAhG,MAAA,CAAesB,IACnC2E,EAAAC,IAAA,CAAApH,EAAAiH,QAAA,CAAAC,CAAA,CAAA1E,EAAA,GAEA,OAAA2E,CACA,CACA,EAYAnH,EAAAqH,gBAAwB,UAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,EAiExB,GAhEAF,EAAAG,GAAA,IACAH,EAAAI,OAAA,IAGAJ,EAAAK,MAAA,UAAAC,CAAA,EACA,GAAAA,EAAA,CACA,IAAAC,EAAA,GAIA,OAHAP,EAAAI,OAAA,CAAAI,OAAA,UAAAC,CAAA,EACAF,CAAA,CAAAE,EAAA,MAAAT,CAAA,CAAAS,EAAA,CAAAjG,QAAA,OACA,GACA+F,CACA,CACA,OAAA7H,EAAAiH,QAAA,MAAAQ,GAAA,CACA,EAEAH,EAAAU,SAAA,YACA,OAAAnI,EAAA8D,MAAA,CAAA2D,EAAAG,GAAA,CACA,EAEAF,EAAAO,OAAA,UAAAC,CAAA,CAAAvF,CAAA,EAEA,SAAAyF,SACA,OAAAX,EAAAG,GAAA,CAAAjF,EAAA,CAEA,SAAA0F,OAAAnG,CAAA,EAGA,OAAAA,CAFAA,EAAA/B,EAAAqB,QAAA,CAAAU,EAAA,EAEAD,QAAA,SAAAiG,EAAAI,SAAA,EACApG,CAAAA,EAAY1B,EAAMQ,WAAA,KAGlBkH,EAAAK,SAAA,EAAAL,EAAA7G,MAAA,EACAa,EAAA/B,EAAA0B,UAAA,CAAAK,GACAnC,EAAAmI,EAAA7G,MAAA,EAAAa,EAAAb,MAAA,cAAA6G,EAAAM,IAAA,wBAAAN,EAAA7G,MAAA,YACQ,CAAA6G,CAAAA,EAAAI,SAAA,EAAApG,IAAAA,EAAAb,MAAA,GAAA6G,EAAA7G,MAAA,EACRtB,EAAAmI,EAAA7G,MAAA,GAAAa,EAAAb,MAAA,cAAA6G,EAAAM,IAAA,8BAAAN,EAAA7G,MAAA,EAGAoG,EAAAG,GAAA,CAAAjF,EAAA,CAAAT,CACA,CAnBAuF,EAAAI,OAAA,CAAAN,IAAA,CAAAW,EAAAM,IAAA,EAqBAC,OAAAC,cAAA,CAAAjB,EAAAS,EAAAM,IAAA,EACAG,WAAA,GACAC,aAAA,GACAC,IAAAT,OACAU,IAAAT,MACA,GAEAH,EAAAa,OAAA,EACAtB,CAAAA,CAAA,CAAAS,EAAAM,IAAA,EAAAN,EAAAa,OAAA,EAIAb,EAAAc,KAAA,EACAP,OAAAC,cAAA,CAAAjB,EAAAS,EAAAc,KAAA,EACAL,WAAA,GACAC,aAAA,GACAE,IAAAT,OACAQ,IAAAT,MACA,EAEA,GAGAT,GASA,GARA,iBAAAA,GACAA,CAAAA,EAAanH,EAAMC,IAAA,CAAAN,EAAA6B,cAAA,CAAA2F,GAAA,QAGXnH,EAAM2B,QAAA,CAAAwF,IACdA,CAAAA,EAAA3H,EAAAiJ,MAAA,CAAAtB,EAAA,EAGAvF,MAAAC,OAAA,CAAAsF,GAAA,CACA,GAAAA,EAAAtG,MAAA,CAAAoG,EAAAI,OAAA,CAAAxG,MAAA,CACA,8CAIAsG,EAAAM,OAAA,UAAAiB,CAAA,CAAAvG,CAAA,EACA8E,CAAA,CAAAA,EAAAI,OAAA,CAAAlF,EAAA,EAAAxC,EAAAqB,QAAA,CAAA0H,EACA,EACA,MAAM,oBAAAvB,EAAA,CACN,IAAAwB,EAAAV,OAAAU,IAAA,CAAAxB,GACAD,EAAAO,OAAA,UAAAC,CAAA,EACA,KAAAiB,EAAAC,OAAA,CAAAlB,EAAAM,IAAA,GAAAf,CAAAA,CAAA,CAAAS,EAAAM,IAAA,EAAAb,CAAA,CAAAO,EAAAM,IAAA,GACA,KAAAW,EAAAC,OAAA,CAAAlB,EAAAc,KAAA,GAAAvB,CAAAA,CAAA,CAAAS,EAAAc,KAAA,EAAArB,CAAA,CAAAO,EAAAc,KAAA,EACA,EACA,MACA,4BAGA,qCChtBAK,CAAAA,EAAAlJ,OAAA,CAAiBN,EAAQ,OAAaA,EAAQ,4CCA9C,IAAAyJ,EAAmBzJ,EAAQ,OAC3B0J,EAAkB1J,EAAQ,MAE1BwJ,CAAAA,EAAAlJ,OAAA,UAAAqJ,CAAA,EACA,IAAAC,EAAAH,EAAAE,GACAE,EAAAH,EAAAC,GAEA,gBAAAG,CAAA,CAAAC,CAAA,EAEA,OADA,iBAAAD,EAAAA,EAAAvD,WAAA,GAAAuD,GAEA,2BAAAF,EAAA,kBAAAG,EACA,4BAAAH,EAAA,kBAAAG,EACA,4BAAAH,EAAA,iBAAAG,EACA,4BAAAH,EAAA,kBAAAG,EAEA,2BAAAH,EAAA,eAAAG,EACA,2BAAAH,EAAA,eAAAG,EACA,2BAAAH,EAAA,cAAAG,EACA,2BAAAH,EAAA,eAAAG,EAEA,2BAAAF,EAAA,YAAAE,EACA,2BAAAF,EAAA,YAAAE,EAEA,0CAAAD,EACA,CACA,CACA,sCC1BA,IAAAnJ,EAAaX,EAAA,OAAAW,MAAA,CACbqJ,EAAgBhK,EAAA,OAAAgK,SAAA,CAChBC,EAAejK,EAAQ,MAEvBwJ,CAAAA,EAAAlJ,OAAA,UAAAqJ,CAAA,EACA,SAAAC,OAAAM,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAN,CAAA,EACAC,EAAAM,IAAA,MAAAP,GAEA,KAAAQ,KAAA,CAAAL,EACA,KAAAM,SAAA,CAAAL,EACA,KAAAM,gBAAA,CAAAL,EACA,KAAAM,cAAA,CAAAL,EACA,KAAAM,QAAA,CAAAZ,EAEA,KAAAa,MAAA,KAAAjB,EACA,KAAAiB,MAAA,CAAAC,UAAA,CAAAX,EAAAC,GACA,KAAAW,UAAA,GACA,CAgEA,OA9DAb,EAAAL,OAAAI,GAEAJ,OAAAmB,SAAA,CAAAC,UAAA,UAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,IAAAC,EAAA,KACA,IACA,KAAA1H,MAAA,CAAAuH,EAAAC,EACA,CAAM,MAAAG,EAAA,CACND,EAAAC,CACA,CAEAF,EAAAC,EACA,EAEAxB,OAAAmB,SAAA,CAAAO,MAAA,UAAAH,CAAA,EACA,IAAAC,EAAA,KACA,IACA,KAAA1D,IAAA,MAAA/D,MAAA,GACA,CAAM,MAAA0H,EAAA,CACND,EAAAC,CACA,CAEAF,EAAAC,EACA,EAEAxB,OAAAmB,SAAA,CAAArH,MAAA,UAAAoE,CAAA,CAAAoD,CAAA,EACA,IAAAvK,EAAA2B,QAAA,CAAAwF,IAAA,iBAAAA,EAAA,qDACA,QAAAgD,UAAA,sCAKA,OAJAnK,EAAA2B,QAAA,CAAAwF,IAAAA,CAAAA,EAAAnH,EAAAC,IAAA,CAAAkH,EAAAoD,EAAA,EAEA,KAAAN,MAAA,CAAAW,MAAA,CAAAzD,GAEA,MAGA8B,OAAAmB,SAAA,CAAApH,MAAA,UAAAuH,CAAA,EACA,QAAAJ,UAAA,qCACA,MAAAA,UAAA,IAEA,KAAAL,gBAAA,OAAAG,MAAA,CAAAY,iBAAA,MAAAf,gBAAA,EACA,IAAA9G,EAAA,KAAAiH,MAAA,CAAAa,OAAA,MAAAf,cAAA,IAKA,OAJAgB,KAAAA,IAAAR,GAAAvH,CAAAA,EAAAA,EAAAvB,QAAA,CAAA8I,EAAA,EAEA,KAAAS,WAAA,GAEAhI,CACA,EAGAiG,OAAAmB,SAAA,CAAAY,WAAA,YAEA,OADA,KAAAf,MAAA,CAAAC,UAAA,MAAAN,KAAA,MAAAC,SAAA,EACA,MAIAZ,OAAAmB,SAAA,CAAAa,MAAA,YACA,IAAAC,EAAA,IAAAjC,OAAA,KAAAW,KAAA,MAAAC,SAAA,MAAAC,gBAAA,MAAAC,cAAA,MAAAC,QAAA,EAIA,OAHA,KAAAC,MAAA,CAAAhJ,IAAA,CAAAiK,EAAAjB,MAAA,EACAiB,EAAAf,UAAA,MAAAA,UAAA,CAEAe,CACA,EAEAjC,MACA,sCClFA,IAAAjJ,EAAaX,EAAA,OAAAW,MAAA,CACbqJ,EAAgBhK,EAAA,OAAAgK,SAAA,CAChBC,EAAejK,EAAQ,MAEvBwJ,CAAAA,EAAAlJ,OAAA,UAAAqJ,CAAA,EACA,SAAAE,MAAAK,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAL,CAAA,EACAC,EAAAM,IAAA,MAAAP,GAEA,KAAAQ,KAAA,CAAAL,EACA,KAAAM,SAAA,CAAAL,EACA,KAAAM,gBAAA,CAAAL,EACA,KAAAO,QAAA,CAAAZ,EAEA,KAAAa,MAAA,KAAAjB,EACA,KAAAiB,MAAA,CAAAC,UAAA,CAAAX,EAAAC,GACA,KAAAW,UAAA,GACA,CAwDA,OAtDAb,EAAAJ,MAAAG,GAEAH,MAAAkB,SAAA,CAAAC,UAAA,UAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,IAAAC,EAAA,KACA,IACA,KAAA1H,MAAA,CAAAuH,EAAAC,EACA,CAAM,MAAAG,EAAA,CACND,EAAAC,CACA,CAEAF,EAAAC,EACA,EAEAvB,MAAAkB,SAAA,CAAAO,MAAA,cAEAzB,MAAAkB,SAAA,CAAAe,KAAA,UAAAC,CAAA,EACA,KAAArE,IAAA,MAAA+D,OAAA,CAAAM,GACA,EAEAlC,MAAAkB,SAAA,CAAArH,MAAA,UAAAoE,CAAA,CAAAoD,CAAA,EACA,IAAAvK,EAAA2B,QAAA,CAAAwF,IAAA,iBAAAA,EAAA,qDACA,QAAAgD,UAAA,uCAKA,OAJAnK,EAAA2B,QAAA,CAAAwF,IAAAA,CAAAA,EAAAnH,EAAAC,IAAA,CAAAkH,EAAAoD,EAAA,EAEA,KAAAN,MAAA,CAAAW,MAAA,CAAAzD,GAEA,MAGA+B,MAAAkB,SAAA,CAAAU,OAAA,UAAAO,CAAA,CAAAd,CAAA,EACA,KAAAJ,UAAA,GACA,KAAAA,UAAA,IACA,KAAAF,MAAA,CAAAY,iBAAA,MAAAf,gBAAA,GAGA,IAAA3C,EAAA,KAAA8C,MAAA,CAAAa,OAAA,CAAAO,GAGA,OAFAN,KAAAA,IAAAR,GAAApD,CAAAA,EAAAA,EAAA1F,QAAA,CAAA8I,EAAA,EAEApD,CACA,EAEA+B,MAAAkB,SAAA,CAAAY,WAAA,YAEA,OADA,KAAAf,MAAA,CAAAC,UAAA,MAAAN,KAAA,MAAAC,SAAA,EACA,MAGAX,MAAAkB,SAAA,CAAAa,MAAA,YACA,IAAAC,EAAA,IAAAhC,MAAA,KAAAU,KAAA,MAAAC,SAAA,MAAAC,gBAAA,MAAAE,QAAA,EAIA,OAHA,KAAAC,MAAA,CAAAhJ,IAAA,CAAAiK,EAAAjB,MAAA,EACAiB,EAAAf,UAAA,MAAAA,UAAA,CAEAe,CACA,EAEAhC,KACA,oCCzEA,IAAAoC,EAAA,6VAEA3L,EAAA4L,KAAa,UAAA1G,CAAA,EACb,QAAA2G,EAAA,EAAsBA,EAAA,GAAY,EAAAA,EAAA,CAElC,IAAAC,EAAA5G,CAAA,IAAAA,CAAA,KAAAA,CAAA,KAAAA,CAAA,KAAAA,CAAA,KACA6G,EAAA7G,CAAA,IAAAA,CAAA,KAAAA,CAAA,KAAAA,CAAA,KAAAA,CAAA,KACA8G,EAAA9G,CAAA,IAAAA,CAAA,KAAAA,CAAA,KAAAA,CAAA,KAAAA,CAAA,KACA+G,EAAA/G,CAAA,IAAAA,CAAA,KAAAA,CAAA,KAAAA,CAAA,KAAAA,CAAA,KACAgH,EAAAhH,CAAA,IAAAA,CAAA,KAAAA,CAAA,KAAAA,CAAA,KAAAA,CAAA,KACAiH,EAAAjH,CAAA,IAAAA,CAAA,KAAAA,CAAA,KAAAA,CAAA,KAAAA,CAAA,KACAkH,EAAAlH,CAAA,IAAAA,CAAA,KAAAA,CAAA,KAAAA,CAAA,KAAAA,CAAA,KACAmH,EAAAnH,CAAA,IAAAA,CAAA,KAAAA,CAAA,KAAAA,CAAA,KAAAA,CAAA,KACAoH,EAAApH,CAAA,IAAAA,CAAA,KAAAA,CAAA,KAAAA,CAAA,KAAAA,CAAA,KACAqH,EAAArH,CAAA,IAAAA,CAAA,KAAAA,CAAA,KAAAA,CAAA,KAAAA,CAAA,KAEAsH,EAAAF,EAAAN,CAAAA,GAAA,EAAAC,IAAA,IACAQ,EAAAF,EAAAN,CAAAA,GAAA,EAAAD,IAAA,IACAU,EAAAxH,CAAA,IAAAsH,EACAG,EAAAzH,CAAA,IAAAuH,EACAG,EAAA1H,CAAA,KAAAsH,EACAK,EAAA3H,CAAA,KAAAuH,EACAK,EAAA5H,CAAA,KAAAsH,EACAO,EAAA7H,CAAA,KAAAuH,EACAO,EAAA9H,CAAA,KAAAsH,EACAS,EAAA/H,CAAA,KAAAuH,EACAS,EAAAhI,CAAA,KAAAsH,EACAW,EAAAjI,CAAA,KAAAuH,EACAD,EAAAV,EAAAI,CAAAA,GAAA,EAAAC,IAAA,IACAM,EAAAV,EAAAI,CAAAA,GAAA,EAAAD,IAAA,IACA,IAAAkB,EAAAlI,CAAA,IAAAsH,EACAa,EAAAnI,CAAA,IAAAuH,EACAa,EAAApI,CAAA,KAAAsH,EACAe,EAAArI,CAAA,KAAAuH,EACAe,EAAAtI,CAAA,KAAAsH,EACAiB,EAAAvI,CAAA,KAAAuH,EACAiB,EAAAxI,CAAA,KAAAsH,EACAmB,EAAAzI,CAAA,KAAAuH,EACAmB,EAAA1I,CAAA,KAAAsH,EACAqB,EAAA3I,CAAA,KAAAuH,EACAD,EAAAR,EAAAI,CAAAA,GAAA,EAAAC,IAAA,IACAI,EAAAR,EAAAI,CAAAA,GAAA,EAAAD,IAAA,IACA,IAAA0B,EAAA5I,CAAA,IAAAsH,EACAuB,EAAA7I,CAAA,IAAAuH,EACAuB,EAAA9I,CAAA,KAAAsH,EACAyB,EAAA/I,CAAA,KAAAuH,EACAyB,EAAAhJ,CAAA,KAAAsH,EACA2B,EAAAjJ,CAAA,KAAAuH,EACA2B,EAAAlJ,CAAA,KAAAsH,EACA6B,EAAAnJ,CAAA,KAAAuH,EACA6B,EAAApJ,CAAA,KAAAsH,EACA+B,EAAArJ,CAAA,KAAAuH,EACAD,EAAAN,EAAAI,CAAAA,GAAA,EAAAC,IAAA,IACAE,EAAAN,EAAAI,CAAAA,GAAA,EAAAD,IAAA,IACA,IAAAkC,EAAAtJ,CAAA,IAAAsH,EACAiC,EAAAvJ,CAAA,IAAAuH,EACAiC,EAAAxJ,CAAA,KAAAsH,EACAmC,EAAAzJ,CAAA,KAAAuH,EACAmC,EAAA1J,CAAA,KAAAsH,EACAqC,EAAA3J,CAAA,KAAAuH,EACAqC,EAAA5J,CAAA,KAAAsH,EACAuC,EAAA7J,CAAA,KAAAuH,EACAuC,EAAA9J,CAAA,KAAAsH,EACAyC,GAAA/J,CAAA,KAAAuH,EACAD,EAAAJ,EAAAN,CAAAA,GAAA,EAAAC,IAAA,IACAU,EAAAJ,EAAAN,CAAAA,GAAA,EAAAD,IAAA,IACA,IAAAoD,GAAAhK,CAAA,IAAAsH,EACA2C,GAAAjK,CAAA,IAAAuH,EACA2C,GAAAlK,CAAA,KAAAsH,EACA6C,GAAAnK,CAAA,KAAAuH,EACA6C,GAAApK,CAAA,KAAAsH,EACA+C,GAAArK,CAAA,KAAAuH,EACA+C,GAAAtK,CAAA,KAAAsH,EACAiD,GAAAvK,CAAA,KAAAuH,EACAiD,GAAAxK,CAAA,KAAAsH,EACAmD,GAAAzK,CAAA,KAAAuH,EAKAmD,GAAA/C,GAAA,EAAAD,IAAA,GACAiD,GAAAjD,GAAA,EAAAC,IAAA,GACAiD,GAAAhD,GAAA,EAAAC,IAAA,GACAgD,GAAAhD,GAAA,EAAAD,IAAA,GACAkD,GAAA/C,GAAA,EAAAD,IAAA,GACAiD,GAAAjD,GAAA,EAAAC,IAAA,GACAiD,GAAAhD,GAAA,GAAAC,IAAA,GACAgD,GAAAhD,GAAA,GAAAD,IAAA,GACAkD,GAAAhD,GAAA,EAAAC,IAAA,GACAgD,GAAAhD,GAAA,EAAAD,IAAA,GACAkD,GAAA/C,GAAA,GAAAD,IAAA,GACAiD,GAAAjD,GAAA,GAAAC,IAAA,GACAiD,GAAAhD,GAAA,GAAAC,IAAA,GACAgD,GAAAhD,GAAA,GAAAD,IAAA,GACAkD,GAAA/C,GAAA,GAAAD,IAAA,GACAiD,GAAAjD,GAAA,GAAAC,IAAA,GACAiD,GAAAhD,GAAA,EAAAC,IAAA,GACAgD,GAAAhD,GAAA,EAAAD,IAAA,GACAkD,GAAA/C,GAAA,GAAAD,IAAA,EACAiD,GAAAjD,GAAA,GAAAC,IAAA,EACAiD,GAAAhD,GAAA,EAAAC,IAAA,GACAgD,GAAAhD,GAAA,EAAAD,IAAA,GACAkD,GAAA/C,GAAA,GAAAD,IAAA,GACAiD,GAAAjD,GAAA,GAAAC,IAAA,GACAiD,GAAAhD,GAAA,GAAAC,IAAA,GACAgD,GAAAhD,GAAA,GAAAD,IAAA,GACAkD,GAAA/C,GAAA,GAAAD,IAAA,EACAiD,GAAAjD,GAAA,GAAAC,IAAA,EACAiD,GAAAhD,GAAA,GAAAC,IAAA,EACAgD,GAAAhD,GAAA,GAAAD,IAAA,EACAkD,GAAA/C,GAAA,GAAAD,IAAA,EACAiD,GAAAjD,GAAA,GAAAC,IAAA,EACAiD,GAAAhD,GAAA,GAAAC,IAAA,EACAgD,GAAAhD,GAAA,GAAAD,IAAA,EACAkD,GAAAhD,GAAA,GAAAC,IAAA,GACAgD,GAAAhD,GAAA,GAAAD,IAAA,GACAkD,GAAA/C,IAAA,GAAAD,IAAA,EACAiD,GAAAjD,GAAA,GAAAC,KAAA,EACAiD,GAAAhD,IAAA,GAAAC,KAAA,EACAgD,GAAAhD,IAAA,GAAAD,KAAA,EACAkD,GAAAhD,IAAA,GAAAC,KAAA,GACAgD,GAAAhD,IAAA,GAAAD,KAAA,GACAkD,GAAA/C,IAAA,EAAAD,KAAA,GACAiD,GAAAjD,IAAA,EAAAC,KAAA,GACAiD,GAAAhD,IAAA,EAAAC,KAAA,GACAgD,GAAAhD,IAAA,EAAAD,KAAA,GACAkD,GAAAhD,IAAA,GAAAC,KAAA,GACAgD,GAAAhD,IAAA,GAAAD,KAAA,EAGAxK,CAAAA,CAAA,IAAA0N,EAAA,CAAAtC,GAAAY,GACAhM,CAAA,IAAA2N,EAAA,CAAAtC,GAAAY,GACAjM,CAAA,KAAAsM,GAAA,CAAAY,GAAAtC,GACA5K,CAAA,KAAAuM,GAAA,CAAAY,GAAAtC,GACA7K,CAAA,KAAAkL,GAAA,CAAAY,GAAAY,GACA1M,CAAA,KAAAmL,GAAA,CAAAY,GAAAY,GACA3M,CAAA,KAAAgN,GAAA,CAAAtC,GAAAY,GACAtL,CAAA,KAAAiN,GAAA,CAAAtC,GAAAY,GACAvL,CAAA,KAAA4L,GAAA,CAAAY,GAAAY,GACApN,CAAA,KAAA6L,GAAA,CAAAY,GAAAY,GACArN,CAAA,IAAAoL,GAAA,CAAAY,GAAAY,GACA5M,CAAA,IAAAqL,GAAA,CAAAY,GAAAY,GACA7M,CAAA,KAAAkN,GAAA,CAAAtC,GAAAY,GACAxL,CAAA,KAAAmN,GAAA,CAAAtC,GAAAY,GACAzL,CAAA,KAAA8L,GAAA,CAAAY,GAAAY,GACAtN,CAAA,KAAA+L,GAAA,CAAAY,GAAAY,GACAvN,CAAA,KAAA0K,GAAA,CAAAY,GAAAY,GACAlM,CAAA,KAAA2K,GAAA,CAAAY,GAAAY,GACAnM,CAAA,KAAAwM,GAAA,CAAAY,GAAAtC,GACA9K,CAAA,KAAAyM,GAAA,CAAAY,GAAAtC,GACA/K,CAAA,IAAAgM,GAAA,CAAAY,GAAAY,GACAxN,CAAA,IAAAiM,GAAA,CAAAY,GAAAY,GACAzN,CAAA,KAAA4K,GAAA,CAAAY,GAAAY,GACApM,CAAA,KAAA6K,GAAA,CAAAY,GAAAY,GACArM,CAAA,KAAA0M,GAAA,CAAAY,GAAAtC,GACAhL,CAAA,KAAA2M,GAAA,CAAAY,GAAAtC,GACAjL,CAAA,KAAAsL,GAAA,CAAAY,GAAAY,GACA9M,CAAA,KAAAuL,GAAA,CAAAY,GAAAY,GACA/M,CAAA,KAAAoN,GAAA,CAAAtC,GAAAY,GACA1L,CAAA,KAAAqN,GAAA,CAAAtC,GAAAY,GACA3L,CAAA,IAAA4M,GAAA,CAAAY,GAlFAhG,EAmFAxH,CAAA,IAAA6M,GAAA,CAAAY,GAlFAhG,EAmFAzH,CAAA,KAAAwL,GAAA,CAAAY,GAAAE,GACAtM,CAAA,KAAAyL,GAAA,CAAAY,GAAAE,GACAvM,CAAA,KAAAsN,GAAA,CAAAtC,GAAAE,GACAlL,CAAA,KAAAuN,GAAA,CAAAtC,GAAAE,GACAnL,CAAA,KAAAkM,GAAA,CAAAY,GAAAE,GACAhN,CAAA,KAAAmM,GAAA,CAAAY,GAAAE,GACAjN,CAAA,KAAA8K,GAAA,CAAAY,GAAAE,GACA5L,CAAA,KAAA+K,GAAA,CAAAY,GAAAE,GACA7L,CAAA,IAAAwN,GAAA,CA5FAhG,EA4FA4D,GACApL,CAAA,IAAAyN,GAAA,CA5FAhG,EA4FA4D,GACArL,CAAA,KAAAoM,GAAA,CAAAE,GAAAY,GACAlN,CAAA,KAAAqM,GAAA,CAAAE,GAAAY,GACAnN,CAAA,KAAAgL,GAAA,CAAAE,GAAAY,GACA9L,CAAA,KAAAiL,GAAA,CAAAE,GAAAY,GACA/L,CAAA,KAAA8M,GAAA,CAAAE,GAAAtC,GACA1K,CAAA,KAAA+M,GAAA,CAAAE,GAAAtC,GACA3K,CAAA,KAAA0L,GAAA,CAAAE,GAAAY,GACAxM,CAAA,KAAA2L,GAAA,CAAAE,GAAAY,GAGAzM,CAAA,KAAAyG,CAAA,CAAAE,EAAAA,EAAA,CACA3G,CAAA,KAAAyG,CAAA,CAAAE,EAAAA,EAAA,GAEA,sCCzLA,IAAAxL,EAAaX,EAAA,OAAAW,MAAA,CACbyS,EAAkBpT,EAAQ,OAE1B,SAAA4J,SAEA,KAAAyJ,KAAA,EACA,UACA,UACA,UACA,UACA,UACA,CAEA,KAAAC,SAAA,MACA,KAAAC,KAAA,GACA,KAAAC,SAAA,GACA,CAEA5J,OAAAmB,SAAA,CAAAF,UAAA,UAAAX,CAAA,CAAAC,CAAA,EACA,QAAArH,EAAA,EAAkBA,EAAA,GAAQ,EAAAA,EAAA,KAAAuQ,KAAA,CAAAvQ,EAAA,EAC1B,MAAAwQ,SAAA,CAAApJ,EAAA,EACA,KAAAqJ,KAAA,GACA,KAAAC,SAAA,GACA,EAEA5J,OAAAmB,SAAA,CAAAQ,MAAA,UAAAzD,CAAA,EACA,QAAAhF,EAAA,EAAkBA,EAAAgF,EAAAtG,MAAA,CAAiB,EAAAsB,EACnC,KAAAuQ,KAAA,SAAAE,KAAA,MAAAzL,CAAA,CAAAhF,EAAA,UAAAyQ,KAAA,IACA,KAAAA,KAAA,IACA,KAAAA,KAAA,QAAAD,SAAA,GACAF,EAAAlH,KAAA,MAAAmH,KAAA,EACA,KAAAE,KAAA,GAGA,EAEA3J,OAAAmB,SAAA,CAAAS,iBAAA,UAAA/H,CAAA,EACA,KAAA4P,KAAA,SAAAE,KAAA,MAAA9P,GAAA,QAAA8P,KAAA,IACA9P,CAAAA,IAAAA,CAAA,WAAA8P,KAAA,QAAAD,SAAA,IAAAF,EAAAlH,KAAA,MAAAmH,KAAA,EACA,KAAAA,KAAA,UAAAC,SAAA,uBAAAA,SAAA,OACAF,EAAAlH,KAAA,MAAAmH,KAAA,EACA,KAAAE,KAAA,GACA,KAAAC,SAAA,GACA,EAEA5J,OAAAmB,SAAA,CAAAU,OAAA,UAAAjK,CAAA,EACA,KAAAgS,SAAA,OAAAhI,iBAAA,IAGA,QADAiI,EAAA9S,EAAA+S,KAAA,CAAAlS,GACAsB,EAAA,EAAkBA,EAAAtB,EAAY,EAAAsB,EAC9B2Q,CAAA,CAAA3Q,EAAA,MAAAuQ,KAAA,SAAAE,KAAA,eAAAA,KAAA,QACA,KAAAA,KAAA,IACA,KAAAA,KAAA,QAAAD,SAAA,GACAF,EAAAlH,KAAA,MAAAmH,KAAA,EACA,KAAAE,KAAA,IAIA,OAAAE,CACA,EAEA7J,OAAAmB,SAAA,CAAAnJ,IAAA,UAAA+R,CAAA,EACA,QAAA7Q,EAAA,EAAkBA,EAAA,GAAQ,EAAAA,EAAA6Q,EAAAN,KAAA,CAAAvQ,EAAA,MAAAuQ,KAAA,CAAAvQ,EAAA,CAC1B6Q,EAAAL,SAAA,MAAAA,SAAA,CACAK,EAAAJ,KAAA,MAAAA,KAAA,CACAI,EAAAH,SAAA,MAAAA,SAAA,EAGAhK,EAAAlJ,OAAA,CAAAsJ,sCCnEAJ,CAAAA,EAAAlJ,OAAA,YACA,YACA,wFAGA,8FCgDAsT,EAAA,CACAC,UAAA,YACAC,cAAA,gBACAC,WAAA,aACAC,YAAA,cACAC,UAAA,WACA,EACAC,EAAA,CACAC,OAAA,sFACAC,QAAA,uBACAC,QAAA,sBACA,EAEAC,EAAA,2BAEAC,EAAA,eACAC,EAAA,WACA,SAAAA,WAAAC,CAAA,EACA,IAAAC,EAAAD,KAAA,IAAAA,EAAA,GAAoCA,EAAAE,EAAAD,EAAAE,eAAA,CAAAC,EAAAH,EAAAI,aAAA,CAAAA,EAAAD,KAAA,IAAAA,EAAAL,WAAAO,cAAA,CAAAC,MAAA,CAAAH,CACpC,MAAAD,eAAA,CADoCD,KAAA,IAAAA,EAAA,oCAAAA,EAEpC,KAAAG,aAAA,CAAAA,EACA,KAAAzB,KAAA,CAAAmB,WAAAS,mBAAA,GACArB,EAAAC,SAAA,CACAD,EAAAE,aAAA,CACA,IAAAoB,EAAAV,WAAAW,cAAA,GACAD,EACA,KAAAE,WAAA,CAAAlB,CAAA,CAAAgB,EAAA,CAGA,KAAAE,WAAA,CAAAlB,EAAAG,OAAA,CAEA,KAAAgB,UAAA,MAAAA,UAAA,CAAAC,IAAA,OACA,KAAAC,uBAAA,MAAAA,uBAAA,CAAAD,IAAA,OACA,KAAAE,cAAA,MAAAA,cAAA,CAAAF,IAAA,OACA,KAAAG,iBAAA,MAAAA,iBAAA,CAAAH,IAAA,OACA,KAAAI,eAAA,MAAAA,eAAA,CAAAJ,IAAA,OACA,KAAAK,cAAA,MAAAA,cAAA,CAAAL,IAAA,OACAM,OAAAC,gBAAA,gBAAAR,UAAA,EACAP,IAAAN,WAAAO,cAAA,CAAAC,MAAA,EAAAc,SAAAA,eAAAC,OAAA,CAAAzB,IACAE,WAAAwB,gBAAA,MAAApB,eAAA,CAEA,CAuIA,OAtIAJ,WAAAzJ,SAAA,CAAAsK,UAAA,UAAAY,CAAA,EACA,GAAAA,EAAAC,MAAA,QAAAtB,eAAA,EAIA,GAAAqB,oBAAAA,EAAAnO,IAAA,CAAAqO,IAAA,CACA,YAAAZ,uBAAA,CAAAU,GAEAG,QAAAC,KAAA,0BAAAJ,EAAAC,MAAA,gBAAAI,KAAAC,SAAA,CAAAN,EAAAnO,IAAA,GAEA,EACA0M,WAAAzJ,SAAA,CAAAyL,2BAAA,UAAAnD,CAAA,EACA,+BAAAA,EAAA,IACA,EACAmB,WAAAzJ,SAAA,CAAAwK,uBAAA,UAAAU,CAAA,MA9FAQ,EAAAC,EAAAC,EAAAC,EA+FA,OA/FAH,EA+FA,KA/FAC,EA+FA,OA/FAC,EA+FA,OA/FAC,EA+FA,WAEA,OAAAC,SAvFAJ,CAAA,CAAAK,CAAA,EACA,IAAwGC,EAAAC,EAAAC,EAAAC,EAAxGC,EAAA,CAAcjP,MAAA,EAAAkP,KAAA,WAA6B,GAAAH,EAAAA,CAAA,UAAAA,CAAA,IAA0B,OAAAA,CAAA,KAAcI,KAAA,GAAAC,IAAA,IACnF,OAAAJ,EAAA,CAAiBK,KAAAC,KAAA,SAAAA,KAAA,UAAAA,KAAA,IAAoD,mBAAAC,QAAAP,CAAAA,CAAA,CAAAO,OAAAC,QAAA,aAAqE,cAAcR,EACxJ,SAAAM,KAAAG,CAAA,EAAuB,gBAAAtV,CAAA,EAAsB,OAAAuV,SAC7CC,CAAA,EACA,GAAAd,EAAA,mDACA,KAAAI,GAAA,IACA,GAAAJ,EAAA,EAAAC,GAAAC,CAAAA,EAAAY,EAAAA,CAAA,IAAAb,EAAA,OAAAa,CAAA,IAAAb,EAAA,SAAAC,EAAAD,EAAA,SAAAC,EAAA3M,IAAA,CAAA0M,GAAA,GAAAA,EAAAO,IAAA,KAAAN,EAAAA,EAAA3M,IAAA,CAAA0M,EAAAa,CAAA,MAAAC,IAAA,QAAAb,EAEA,OADAD,EAAA,EAAAA,GAAAa,CAAAA,EAAA,CAAAA,EAAAA,CAAA,IAAAZ,EAAAc,KAAA,GACAF,CAAA,KACA,cAAAZ,EAAAY,EAAwC,KACxC,QAAmC,OAAnCV,EAAAjP,KAAA,GAAmC,CAAS6P,MAAAF,CAAA,IAAAC,KAAA,GAC5C,QAAAX,EAAAjP,KAAA,GAAmC8O,EAAAa,CAAA,IAAWA,EAAA,IAAU,QACxD,QAAAA,EAAAV,EAAAG,GAAA,CAAAU,GAAA,GAA0Cb,EAAAE,IAAA,CAAAW,GAAA,GAAc,QACxD,SACA,GAAAf,CAAAA,CAAAA,EAAAA,CAAAA,EAAAE,EAAAE,IAAA,EAAA7V,MAAA,IAAAyV,CAAA,CAAAA,EAAAzV,MAAA,MAAAqW,CAAAA,IAAAA,CAAA,KAAAA,IAAAA,CAAA,MAA8GV,EAAA,EAAO,SACrH,GAAAU,IAAAA,CAAA,OAAAZ,GAAAY,CAAA,IAAAZ,CAAA,KAAAY,CAAA,IAAAZ,CAAA,MAAiFE,EAAAjP,KAAA,CAAA2P,CAAA,IAAiB,MAClG,GAAAA,IAAAA,CAAA,KAAAV,EAAAjP,KAAA,CAAA+O,CAAA,KAAyDE,EAAAjP,KAAA,CAAA+O,CAAA,IAAgBA,EAAAY,EAAQ,MACjF,GAAAZ,GAAAE,EAAAjP,KAAA,CAAA+O,CAAA,KAA+CE,EAAAjP,KAAA,CAAA+O,CAAA,IAAgBE,EAAAG,GAAA,CAAA5P,IAAA,CAAAmQ,GAAgB,MAC/EZ,CAAA,KAAAE,EAAAG,GAAA,CAAAU,GAAA,GACAb,EAAAE,IAAA,CAAAW,GAAA,GAAkC,QAClC,CACAH,EAAAf,EAAAxM,IAAA,CAAAmM,EAAAU,EACA,CAAU,MAAAc,EAAA,CAAYJ,EAAA,GAAAI,EAAA,CAAajB,EAAA,SAAS,CAAUD,EAAAE,EAAA,EACtD,GAAAY,EAAAA,CAAA,UAAAA,CAAA,IAAoC,OAASE,MAAAF,CAAA,IAAAA,CAAA,WAAAC,KAAA,GAC7C,EAtB6C,CAAAH,EAAAtV,EAAA,GAuB7C,EA6DA,cAAAqS,CAAA,EACA,OAAAA,EAAAxM,KAAA,EACA,OAEA,OADA,KAAAmL,KAAA,EAEA,KAAAO,EAAAK,SAAA,kBACAL,EAAAE,aAAA,kBACAF,EAAAC,SAAA,kBACAD,EAAAI,WAAA,kBACAJ,EAAAG,UAAA,aAEA,iBACA,EAEA,OADAqC,QAAAC,KAAA,qCACA,WACA,EAIA,OAHAD,QAAAC,KAAA,4CACA,KAAAhD,KAAA,CAAAO,EAAAK,SAAA,CACAiE,SAAAC,MAAA,GACA,WACA,EAGA,OAFA/B,QAAAC,KAAA,8BACA,KAAAhD,KAAA,CAAAO,EAAAI,WAAA,CACA,GAAAQ,WAAA4D,SAAA,SACA,EAKA,OAJA1D,EAAA0C,IAAA,GACA,KAAA/D,KAAA,CAAAO,EAAAG,UAAA,CACAkC,EAAAoC,MAAA,CAAAC,WAAA,EAAmDnC,KAAA,kCAAwCF,EAAAC,MAAA,EAC3F,KAAAP,cAAA,GACA,WACA,EAEA,OADAS,QAAAC,KAAA,kDACA,WACA,EAEA,OADAD,QAAAC,KAAA,iDACA,WACA,EACA,KAAAG,2BAAA,MAAAnD,KAAA,EACAqB,EAAAxM,KAAA,EACA,kBAEA,EACA,EAzIA,GAAAyO,CAAAA,GAAAA,CAAAA,EAAA4B,OAAA,YAAAC,CAAA,CAAAC,CAAA,EACA,SAAAC,UAAAX,CAAA,EAAoC,IAAMH,KAAAhB,EAAAW,IAAA,CAAAQ,GAAA,CAA+B,MAAAE,EAAA,CAAYQ,EAAAR,EAAA,EACrF,SAAAU,SAAAZ,CAAA,EAAmC,IAAMH,KAAAhB,EAAA,MAAAmB,GAAA,CAAmC,MAAAE,EAAA,CAAYQ,EAAAR,EAAA,EACxF,SAAAL,KAAAgB,CAAA,MAJAb,CAIgCa,CAAAA,EAAAd,IAAA,CAAAU,EAAAI,EAAAb,KAAA,EAAAc,CAJJd,CAA5BA,EAIgCa,EAAAb,KAAA,YAJJpB,EAAAoB,EAAA,IAAApB,EAAA,SAAA6B,CAAA,EAA+DA,EAAAT,EAAA,EAAiB,EAI5Ee,IAAA,CAAAJ,UAAAC,SAAA,CAChCf,KAAA,CAAAhB,EAAAA,EAAAmC,KAAA,CAAAtC,EAAAC,GAAA,KAAAa,IAAA,GACA,EAqIA,EAIA/C,WAAAzJ,SAAA,CAAA2K,eAAA,YACAI,eAAAkD,OAAA,CAAA1E,EAAA,QACA,KAAAmB,iBAAA,GACA,KAAAD,cAAA,EACA,EAOAhB,WAAAzJ,SAAA,CAAA4K,cAAA,YACA,SAAAG,eAAAC,OAAA,CAAAzB,KACA,KAAAQ,aAAA,GAAAN,WAAAO,cAAA,CAAAC,MAAA,GACAoB,QAAAC,KAAA,uBACA7B,WAAAyE,gBAAA,IAEAnD,eAAAkD,OAAA,CAAA1E,EAAA,SAEA,EACAE,WAAAzJ,SAAA,CAAAyK,cAAA,YACA,KAAAV,aAAA,GAAAN,WAAAO,cAAA,CAAAmE,QAAA,CACAtD,OAAAuD,IAAA,MAAAvE,eAAA,WAGAJ,WAAAwB,gBAAA,MAAApB,eAAA,CAEA,EACAJ,WAAAzJ,SAAA,CAAA0K,iBAAA,YACAG,OAAAuD,IAAA,MAAA/D,WAAA,UACA,EAIAZ,WAAAS,mBAAA,YACA,MAAAmE,CAAAA,CAAAxD,CAAAA,OAAAyD,QAAA,EAAAzD,OAAAyD,QAAA,CAAAC,UAAA,CACA,EACA9E,WAAA4D,SAAA,YACA,OAAAxC,OAAAyD,QAAA,CAAAE,OAAA,EACAC,OAAA,2BACA,EACA,EACAhF,WAAAwB,gBAAA,UAAApB,CAAA,EACA,IAAA6E,EAAAC,SAAA5C,IAAA,CACA6C,EAAAD,SAAAE,aAAA,WACAD,EAAAE,YAAA,eACAF,EAAAE,YAAA,cACAF,EAAAE,YAAA,2BACAF,EAAAE,YAAA,OAAAjF,GACA+E,EAAAE,YAAA,MAAAtF,GACAkF,EAAAK,YAAA,CAAAH,EAAAF,EAAAM,QAAA,IACA,EACAvF,WAAAyE,gBAAA,YACA,IAAAxE,CACA,QAAAA,CAAAA,EAAAiF,SAAAM,cAAA,CAAAzF,EAAA,GAAAE,KAAA,IAAAA,GAAAA,EAAAwF,MAAA,EACA,EACAzF,WAAAW,cAAA,YACA,IAAA+E,EAA0BC,IAAAC,KAAY,CAAAxE,OAAAyE,SAAA,CAAAC,SAAA,QACtC,YAAAJ,EAAAhF,OAAA,CAAAvM,IAAA,CACA,UAEA,sBAAA4R,QAAA,CAAAL,EAAAhF,OAAA,CAAAvM,IAAA,MACA,SAEA,IACA,EACA6L,WAAAO,cAAA,EACAC,OAAA,SACAkE,SAAA,UACA,EACA1E,UACA,qCCtOkBlU,CAAAA,EAAAka,EAAc,QAChC,IAAAC,EAAA,mCACAC,EAAA,GACA,QAAAC,EAAA,EAAgBA,EAAAF,EAAAjZ,MAAA,CAAqBmZ,IAAA,CACrC,IAAAC,EAAAH,EAAAI,MAAA,CAAAF,EACAD,CAAAA,CAAA,CAAAE,EAAA,CAAAD,CACA,CACA,SAAAG,YAAAC,CAAA,EACA,IAAAC,EAAAD,GAAA,GACA,OAAAA,SAAAA,CAAA,KACA,oBACA,oBACA,oBACA,qBACA,mBACA,CACA,SAAAE,UAAArV,CAAA,EACA,IAAAsV,EAAA,EACA,QAAApY,EAAA,EAAoBA,EAAA8C,EAAApE,MAAA,CAAmB,EAAAsB,EAAA,CACvC,IAAAqY,EAAAvV,EAAAwV,UAAA,CAAAtY,GACA,GAAAqY,EAAA,IAAAA,EAAA,IACA,yBAAAvV,EAAA,IACAsV,EAAAJ,YAAAI,GAAAC,GAAA,CACA,CACAD,EAAAJ,YAAAI,GACA,QAAApY,EAAA,EAAoBA,EAAA8C,EAAApE,MAAA,CAAmB,EAAAsB,EAAA,CACvC,IAAAT,EAAAuD,EAAAwV,UAAA,CAAAtY,GACAoY,EAAAJ,YAAAI,GAAA7Y,GAAAA,CACA,CACA,OAAA6Y,CACA,CACA,SAAAG,QAAAvT,CAAA,CAAAwT,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,IAAAzD,EAAA,EACAtU,EAAA,EACAgY,EAAA,IAAAF,CAAA,IACA3C,EAAA,GACA,QAAA9V,EAAA,EAAoBA,EAAAgF,EAAAtG,MAAA,CAAiB,EAAAsB,EAGrC,IAFAiV,EAAA,GAAAuD,EAAAxT,CAAA,CAAAhF,EAAA,CACAW,GAAA6X,EACA7X,GAAA8X,GAEA3C,EAAAlR,IAAA,IADAjE,CAAAA,GAAA8X,CAAA,EACAE,GAGA,GAAAD,EACA/X,EAAA,GACAmV,EAAAlR,IAAA,IAAA6T,EAAA9X,EAAAgY,OAGA,CACA,GAAAhY,GAAA6X,EACA,uBACA,MAAAC,EAAA9X,EAAAgY,EACA,wBACA,CACA,OAAA7C,CACA,CACA,SAAA8C,QAAAxa,CAAA,EACA,OAAAma,QAAAna,EAAA,OACA,CACA,SAAAya,gBAAAC,CAAA,EACA,IAAAC,EAAAR,QAAAO,EAAA,QACA,GAAArZ,MAAAC,OAAA,CAAAqZ,GACA,OAAAA,CACA,CACA,SAAAC,UAAAF,CAAA,EACA,IAAAC,EAAAR,QAAAO,EAAA,QACA,GAAArZ,MAAAC,OAAA,CAAAqZ,GACA,OAAAA,CACA,aAAAA,EACA,CACA,SAAAE,uBAAA7Q,CAAA,EACA,IAAA8Q,EAkCA,SAAAC,SAAAlV,CAAA,CAAAmV,CAAA,EAEA,GADAA,EAAAA,GAAA,GACAnV,EAAAvF,MAAA,GACA,OAAAuF,EAAA,aACA,GAAAA,EAAAvF,MAAA,CAAA0a,EACA,6BAEA,IAAAC,EAAApV,EAAAR,WAAA,GACA6V,EAAArV,EAAAN,WAAA,GACA,GAAAM,IAAAoV,GAAApV,IAAAqV,EACA,2BAAArV,EACAA,EAAAoV,EACA,IAAAE,EAAAtV,EAAAuV,WAAA,MACA,GAAAD,KAAAA,EACA,oCAAAtV,EACA,GAAAsV,IAAAA,EACA,4BAAAtV,EACA,IAAAnB,EAAAmB,EAAAlF,KAAA,GAAAwa,GACAE,EAAAxV,EAAAlF,KAAA,CAAAwa,EAAA,GACA,GAAAE,EAAA/a,MAAA,GACA,uBACA,IAAA0Z,EAAAD,UAAArV,GACA,oBAAAsV,EACA,OAAAA,EACA,IAAAU,EAAA,GACA,QAAA9Y,EAAA,EAAwBA,EAAAyZ,EAAA/a,MAAA,CAAsB,EAAAsB,EAAA,CAC9C,IAAAqY,EAAAoB,EAAA1B,MAAA,CAAA/X,GACAT,EAAAqY,CAAA,CAAAS,EAAA,CACA,GAAA9Y,KAAAqJ,IAAArJ,EACA,2BAAA8Y,EACAD,EAAAJ,YAAAI,GAAA7Y,EAEAS,EAAA,GAAAyZ,EAAA/a,MAAA,EAEAoa,EAAAlU,IAAA,CAAArF,EACA,QACA,IAAA2Z,EACA,wBAAAjV,EACA,CAAiBnB,OAAAA,EAAAgW,MAAAA,CAAA,CACjB,CAYA,OAnFAI,EADA9Q,WAAAA,EACA,EAGA,UAgFA,CACAsR,aAZA,SAAAzV,CAAA,CAAAmV,CAAA,EACA,IAAAL,EAAAI,SAAAlV,EAAAmV,GACA,oBAAAL,EACA,OAAAA,CACA,EASAzS,OARA,SAAArC,CAAA,CAAAmV,CAAA,EACA,IAAAL,EAAAI,SAAAlV,EAAAmV,GACA,oBAAAL,EACA,OAAAA,CACA,aAAAA,EACA,EAIA5X,OAjFA,SAAA2B,CAAA,CAAAgW,CAAA,CAAAM,CAAA,EAEA,GADAA,EAAAA,GAAA,GACAtW,EAAApE,MAAA,GAAAoa,EAAApa,MAAA,CAAA0a,EACA,wCAGA,IAAAhB,EAAAD,UAFArV,EAAAA,EAAAW,WAAA,IAGA,oBAAA2U,EACA,YAAAA,GACA,IAAAtC,EAAAhT,EAAA,IACA,QAAA9C,EAAA,EAAwBA,EAAA8Y,EAAApa,MAAA,CAAkB,EAAAsB,EAAA,CAC1C,IAAA8X,EAAAgB,CAAA,CAAA9Y,EAAA,CACA,GAAA8X,GAAA,KACA,8BACAM,EAAAJ,YAAAI,GAAAN,EACAhC,GAAA6B,EAAAI,MAAA,CAAAD,EACA,CACA,QAAA9X,EAAA,EAAwBA,EAAA,EAAO,EAAAA,EAC/BoY,EAAAJ,YAAAI,GAEAA,GAAAc,EACA,QAAAlZ,EAAA,EAAwBA,EAAA,EAAO,EAAAA,EAAA,CAC/B,IAAAT,EAAA,MAAAS,CAAAA,EAAA,KACA8V,GAAA6B,EAAAI,MAAA,CAAAxY,EACA,CACA,OAAAuW,CACA,EAwDA8C,QACAC,gBACAG,SACA,CACA,CACAxb,EAAAka,EAAc,CAAAuB,uBAAA,UACCA,uBAAA,kCCrKf,IAAApb,EAAaX,EAAA,OAAAW,MAAA,CAwGb6I,EAAAlJ,OAAA,EACAmc,MAvGA,SAAAC,CAAA,EACA,GAAAA,EAAAlb,MAAA,IACAkb,EAAAlb,MAAA,KACAkb,KAAAA,CAAA,KACAA,CAAA,MAAAA,EAAAlb,MAAA,IACAkb,IAAAA,CAAA,IAJA,SAMA,IAAAC,EAAAD,CAAA,IACA,OAAAC,GACA,EAAAA,GAAAD,EAAAlb,MAAA,EACAkb,IAAAA,CAAA,GAAAC,EAAA,CAFA,SAIA,IAAAC,EAAAF,CAAA,GAAAC,EAAA,QACA,IAAAC,GACA,EAAAD,EAAAC,IAAAF,EAAAlb,MAAA,GAEAkb,CAAAA,IAAAA,CAAA,MACAC,CAAAA,CAAAA,CAAAA,EAAA,IAAAD,IAAAA,CAAA,OAAAA,CAAAA,IAAAA,CAAA,QAEAA,CAAAA,IAAAA,CAAA,CAAAC,EAAA,KACAC,CAAAA,CAAAA,CAAAA,EAAA,IAAAF,IAAAA,CAAA,CAAAC,EAAA,MAAAD,CAAAA,IAAAA,CAAA,CAAAC,EAAA,IAEA,EAkFAvT,OAhFA,SAAAsT,CAAA,EACA,GAAAA,EAAAlb,MAAA,mDACA,GAAAkb,EAAAlb,MAAA,mDACA,GAAAkb,KAAAA,CAAA,yCACA,GAAAA,CAAA,MAAAA,EAAAlb,MAAA,iDACA,GAAAkb,IAAAA,CAAA,wCAEA,IAAAC,EAAAD,CAAA,IACA,GAAAC,IAAAA,EAAA,gCACA,KAAAA,GAAAD,EAAAlb,MAAA,qCACA,GAAAkb,IAAAA,CAAA,GAAAC,EAAA,yCAEA,IAAAC,EAAAF,CAAA,GAAAC,EAAA,CACA,GAAAC,IAAAA,EAAA,gCACA,KAAAD,EAAAC,IAAAF,EAAAlb,MAAA,oCAEA,GAAAkb,IAAAA,CAAA,uCACA,GAAAC,EAAA,GAAAD,IAAAA,CAAA,MAAAA,CAAAA,IAAAA,CAAA,+CAEA,GAAAA,IAAAA,CAAA,CAAAC,EAAA,sCACA,GAAAC,EAAA,GAAAF,IAAAA,CAAA,CAAAC,EAAA,KAAAD,CAAAA,IAAAA,CAAA,CAAAC,EAAA,8CAGA,OACArX,EAAAoX,EAAA7a,KAAA,KAAA8a,GACAnX,EAAAkX,EAAA7a,KAAA,GAAA8a,EACA,CACA,EAsDA1Y,OA9BA,SAAAqB,CAAA,CAAAE,CAAA,EACA,IAAAmX,EAAArX,EAAA9D,MAAA,CACAob,EAAApX,EAAAhE,MAAA,CACA,GAAAmb,IAAAA,EAAA,gCACA,GAAAC,IAAAA,EAAA,gCACA,GAAAD,EAAA,uCACA,GAAAC,EAAA,uCACA,GAAAtX,IAAAA,CAAA,uCACA,GAAAE,IAAAA,CAAA,uCACA,GAAAmX,EAAA,GAAArX,IAAAA,CAAA,MAAAA,CAAAA,IAAAA,CAAA,+CACA,GAAAsX,EAAA,GAAApX,IAAAA,CAAA,MAAAA,CAAAA,IAAAA,CAAA,+CAEA,IAAAD,EAAA5E,EAAAQ,WAAA,GAAAwb,EAAAC,GAYA,OATArX,CAAA,OACAA,CAAA,IAAAA,EAAA/D,MAAA,GACA+D,CAAA,MACAA,CAAA,IAAAD,EAAA9D,MAAA,CACA8D,EAAA1D,IAAA,CAAA2D,EAAA,GACAA,CAAA,GAAAoX,EAAA,GACApX,CAAA,GAAAoX,EAAA,CAAAnX,EAAAhE,MAAA,CACAgE,EAAA5D,IAAA,CAAA2D,EAAA,EAAAoX,GAEApX,CACA,CAMA,iCC9GAiE,CAAAA,EAAAlJ,OAAA,CAIA,SAAAuc,CAAA,EACA,IAAAC,EAAA,iBAAAD,EAAAA,EAAAzB,UAAA,IAAAyB,EAEA,OACA,OAAAC,GAAA,KACAA,GAAA,IAAAA,GAAA,EAEA,qCCXA,IAAAC,EAAmB/c,EAAQ,OAC3Bgd,EAAchd,EAAQ,MAEtBwJ,CAAAA,EAAAlJ,OAAA,CAIA,SAAAuc,CAAA,EACA,OAAAE,EAAAF,IAAAG,EAAAH,EACA,iCCTArT,CAAAA,EAAAlJ,OAAA,CAIA,SAAAuc,CAAA,EACA,IAAAC,EAAA,iBAAAD,EAAAA,EAAAzB,UAAA,IAAAyB,EAEA,OAAAC,GAAA,IAAAA,GAAA,EACA,iCCRAtT,CAAAA,EAAAlJ,OAAA,CAIA,SAAAuc,CAAA,EACA,IAAAC,EAAA,iBAAAD,EAAAA,EAAAzB,UAAA,IAAAyB,EAEA,OACA,OAAAC,GAAA,KACAA,GAAA,IAAAA,GAAA,IACAA,GAAA,IAAAA,GAAA,EAEA,iCCZAtT,CAAAA,EAAAlJ,OAAA,CAOA,SAAAuc,CAAA,EACA,OAAAI,EAAA5W,IAAA,CACA,iBAAAwW,EAAAK,EAAAL,GAAAA,EAAAhC,MAAA,IAEA,EATA,IAAAqC,EAAAC,OAAAC,YAAA,CACAH,EAAA,wCCJAzT,CAAAA,EAAAlJ,OAAA,CAAiBN,EAAQ,OAASA,EAAQ,kECA1CoC,EAAAwG,OAAAmC,SAAA,CAAA3I,QAAA,CAGA9B,EAAAkC,OAAe,UAAAuV,CAAA,CAAApS,CAAA,EACf,IAAApD,MAAAC,OAAA,CAAAuV,GAAA,MAAAsF,UAAA1X,EACA,EAEArF,EAAAgd,SAAiB,UAAAvF,CAAA,CAAApS,CAAA,EACjB,GAAAvD,qBAAAA,EAAAkI,IAAA,CAAAyN,GAAA,MAAAsF,UAAA1X,EACA,EAEArF,EAAAgC,QAAgB,UAAAyV,CAAA,CAAApS,CAAA,EAChB,IAAOhF,EAAM2B,QAAA,CAAAyV,GAAA,MAAAsF,UAAA1X,EACb,EAEArF,EAAAid,UAAkB,UAAAxF,CAAA,CAAApS,CAAA,EAClB,GAAAvD,sBAAAA,EAAAkI,IAAA,CAAAyN,GAAA,MAAAsF,UAAA1X,EACA,EAEArF,EAAAkd,QAAgB,UAAAzF,CAAA,CAAApS,CAAA,EAChB,GAAAvD,oBAAAA,EAAAkI,IAAA,CAAAyN,GAAA,MAAAsF,UAAA1X,EACA,EAEArF,EAAAmd,QAAgB,UAAA1F,CAAA,CAAApS,CAAA,EAChB,GAAAvD,oBAAAA,EAAAkI,IAAA,CAAAyN,GAAA,MAAAsF,UAAA1X,EACA,EAGArF,EAAAod,cAAsB,UAAAhB,CAAA,CAAAlb,CAAA,CAAAmE,CAAA,EACtB,GAAA+W,EAAAlb,MAAA,GAAAA,EAAA,MAAAmc,WAAAhY,EACA,EAEArF,EAAAsd,eAAuB,UAAAlB,CAAA,CAAAmB,CAAA,CAAAC,CAAA,CAAAnY,CAAA,EACvB,GAAA+W,EAAAlb,MAAA,GAAAqc,GAAAnB,EAAAlb,MAAA,GAAAsc,EAAA,MAAAH,WAAAhY,EACA,EAEArF,EAAAyd,cAAsB,UAAAhG,CAAA,CAAApS,CAAA,EACtB,GAAAoS,IAAAA,EAAAvW,MAAA,OAAAmc,WAAAhY,EACA,EAEArF,EAAA0d,kBAA0B,UAAAC,CAAA,CAAArD,CAAA,CAAA5D,CAAA,CAAArR,CAAA,EAC1B,GAAAsY,GAAArD,GAAAqD,GAAAjH,EAAA,MAAA2G,WAAAhY,EACA,qCC1CA,IAAAhF,EAAaX,EAAA,OAAAW,MAAA,CACbud,EAAYle,EAAQ,OAEpBme,EAAAxd,EAAAC,IAAA,EAEA,sBAEA,gCACA,gCAEA,iDACA,sDACA,gEACA,8CACA,2DACA,sDACA,0DACA,6DACA,qCAEA,gCACA,gCACA,EACA,EAEAwd,EAAAzd,EAAAC,IAAA,EAEA,uBAEA,gCACA,gCAEA,iDACA,sDACA,gEACA,8CACA,2DACA,sDACA,yDACA,wDACA,2DACA,6DACA,qCAEA,gCACA,gCACA,gCACA,gCACA,EACA,CAEAN,CAAAA,EAAA+d,gBAAwB,UAAAla,CAAA,CAAAG,CAAA,CAAAga,CAAA,EACxB,IAAA1F,EAAAjY,EAAAC,IAAA,CAAA0d,EAAAH,EAAAC,GAGA,OAFAja,EAAAvC,IAAA,CAAAgX,EAAA0F,EAAA,KACAha,EAAA1C,IAAA,CAAAgX,EAAA0F,EAAA,SACA1F,CACA,EAEAtY,EAAAie,gBAAwB,UAAApa,CAAA,EACxB,IAAA3C,EAAA2C,EAAA3C,MAAA,CAGAgd,EAAA,EACA,IAAAhd,CAAAA,EAAAgd,CAAA,GAAAra,KAAAA,CAAA,CAAAqa,EAAA,GAIAhd,CAAAA,EAAAgd,CAHAA,GAAA,GAGA,IAAAra,IAAAA,CAAA,CAAAqa,EAAA,EAEA,IAAAC,EAAAta,IAAAA,CAAA,CAAAqa,EAAA,CAEA,GADAA,GAAA,GACAC,CAAAA,EAAA,KAAAA,CAAAA,EAAA,KACAjd,CAAAA,EAAAgd,EAAAC,CAAA,GAGA,IAAAC,EAAAva,CAAA,CAAAqa,EAAAC,EAAA,GAAAA,CAAAA,EAAA,EAAAta,CAAA,CAAAqa,EAAAC,EAAA,SAEA,IAAAjd,CAAAA,EAAAgd,CADAA,GAAAC,CAAA,EACAC,CAAA,GAGA,GAAAld,EAAAgd,EAAA,GACAra,IAAAA,CAAA,CAAAqa,EAAA,EACAra,IAAAA,CAAA,CAAAqa,EAAA,IACAra,IAAAA,CAAA,CAAAqa,EAAA,IAMAhd,EAAAgd,CAHAA,GAAA,GAGA,GACAra,IAAAA,CAAA,CAAAqa,EAAA,EACAra,CAAA,CAAAqa,EAAA,OACAhd,EAAAgd,EAAA,EAAAra,CAAA,CAAAqa,EAAA,GARA,OAYA,OAAAra,EAAAtC,KAAA,CAAA2c,EAAA,EAAAA,EAAA,EAAAra,CAAA,CAAAqa,EAAA,MACA,EAEAle,EAAAqe,eAAuB,UAAAC,CAAA,EAEvB,QADAtZ,EAAA3E,EAAA8D,MAAA,EAAA9D,EAAAC,IAAA,MAAAge,EAAAtZ,CAAA,GACAqX,EAAA,GAAAkC,EAAA,EAAgClC,EAAA,GAAArX,IAAAA,CAAA,CAAAuZ,EAAA,GAAAvZ,CAAAA,IAAAA,CAAA,CAAAuZ,EAAA,IAAuD,EAAAlC,EAAA,EAAAkC,GAGvF,QADArZ,EAAA7E,EAAA8D,MAAA,EAAA9D,EAAAC,IAAA,MAAAge,EAAApZ,CAAA,GACAoX,EAAA,GAAAkC,EAAA,EAAgClC,EAAA,GAAApX,IAAAA,CAAA,CAAAsZ,EAAA,GAAAtZ,CAAAA,IAAAA,CAAA,CAAAsZ,EAAA,IAAuD,EAAAlC,EAAA,EAAAkC,GAEvF,OAAAZ,EAAAja,MAAA,CAAAqB,EAAAzD,KAAA,CAAAgd,GAAArZ,EAAA3D,KAAA,CAAAid,GACA,EAEAxe,EAAAye,eAAuB,UAAA5Z,CAAA,EACvB,IAAAG,EAAA3E,EAAA+S,KAAA,OACAlO,EAAA7E,EAAA+S,KAAA,OAEA,IACA,IAAAkL,EAAAV,EAAA9U,MAAA,CAAAjE,GAEA,GADA,KAAAyZ,EAAAtZ,CAAA,CAAA9D,MAAA,EAAAod,IAAAA,EAAAtZ,CAAA,KAAAsZ,CAAAA,EAAAtZ,CAAA,CAAAsZ,EAAAtZ,CAAA,CAAAzD,KAAA,KACA+c,EAAAtZ,CAAA,CAAA9D,MAAA,wCAEA,GADA,KAAAod,EAAApZ,CAAA,CAAAhE,MAAA,EAAAod,IAAAA,EAAApZ,CAAA,KAAAoZ,CAAAA,EAAApZ,CAAA,CAAAoZ,EAAApZ,CAAA,CAAA3D,KAAA,KACA+c,EAAApZ,CAAA,CAAAhE,MAAA,uCACA,CAAI,MAAA6J,EAAA,CACJ,MACA,CAKA,OAHAuT,EAAAtZ,CAAA,CAAA1D,IAAA,CAAA0D,EAAA,GAAAsZ,EAAAtZ,CAAA,CAAA9D,MAAA,EACAod,EAAApZ,CAAA,CAAA5D,IAAA,CAAA4D,EAAA,GAAAoZ,EAAApZ,CAAA,CAAAhE,MAAA,EAEA,CAAW8D,EAAAA,EAAAE,EAAAA,CAAA,CACX,EAEAlF,EAAA0e,kBAA0B,UAAA7Z,CAAA,EAC1B,IAAAG,EAAA3E,EAAA+S,KAAA,OACAlO,EAAA7E,EAAA+S,KAAA,OAEAlS,EAAA2D,EAAA3D,MAAA,CACAgd,EAAA,EAGA,GAAArZ,KAAAA,CAAA,CAAAqZ,IAAA,QAGA,IAAAS,EAAA9Z,CAAA,CAAAqZ,IAAA,CACA,GAAAS,CAAAA,CAAAA,CAAAA,IAAAA,CAAA,IAEAT,CAAAA,CADAA,GAAAS,EAAA,KACAzd,CAAA,CAFA,GAMA2D,IAAAA,CAAA,CAAAqZ,IAAA,EAGA,IAAAU,EAAA/Z,CAAA,CAAAqZ,IAAA,CACA,GAAAU,IAAAA,EAAA,CAEA,GAAAV,EADAS,CAAAA,EAAAC,EAAA,KACA1d,EAAA,OACA,KAAWyd,EAAA,GAAA9Z,IAAAA,CAAA,CAAAqZ,EAAA,CAAoCA,GAAA,EAAAS,GAAA,GAC/C,IAAAC,EAAA,EAAmBD,EAAA,EAAaT,GAAA,EAAAS,GAAA,EAAAC,EAAA,CAAAA,GAAA,GAAA/Z,CAAA,CAAAqZ,EAAA,CAEhC,IAAAU,CAAAA,EAAA1d,EAAAgd,CAAA,GACA,IAAAW,EAAAX,EAIA,GAHAA,GAAAU,EAGA/Z,IAAAA,CAAA,CAAAqZ,IAAA,EAGA,IAAAY,EAAAja,CAAA,CAAAqZ,IAAA,CACA,GAAAY,IAAAA,EAAA,CAEA,GAAAZ,EADAS,CAAAA,EAAAG,EAAA,KACA5d,EAAA,OACA,KAAWyd,EAAA,GAAA9Z,IAAAA,CAAA,CAAAqZ,EAAA,CAAoCA,GAAA,EAAAS,GAAA,GAC/C,IAAAG,EAAA,EAAmBH,EAAA,EAAaT,GAAA,EAAAS,GAAA,EAAAG,EAAA,CAAAA,GAAA,GAAAja,CAAA,CAAAqZ,EAAA,CAEhC,IAAAY,CAAAA,EAAA5d,EAAAgd,CAAA,GACA,IAAAa,EAAAb,EAIA,IAHAA,GAAAY,EAGSF,EAAA,GAAA/Z,IAAAA,CAAA,CAAAga,EAAA,CAAkCD,GAAA,EAAAC,GAAA,GAE3C,IAAAD,CAAAA,EAAA,KACA,IAAAI,EAAAna,EAAAtD,KAAA,CAAAsd,EAAAA,EAAAD,GAIA,IAHAI,EAAA1d,IAAA,CAAA0D,EAAA,GAAAga,EAAA9d,MAAA,EAGS4d,EAAA,GAAAja,IAAAA,CAAA,CAAAka,EAAA,CAAkCD,GAAA,EAAAC,GAAA,GAE3C,IAAAD,CAAAA,EAAA,KACA,IAAAG,EAAApa,EAAAtD,KAAA,CAAAwd,EAAAA,EAAAD,GAGA,OAFAG,EAAA3d,IAAA,CAAA4D,EAAA,GAAA+Z,EAAA/d,MAAA,EAEA,CAAW8D,EAAAA,EAAAE,EAAAA,CAAA,OACX,sCC/LA,IAAA7E,EAAaX,EAAA,OAAAW,MAAA,CACbN,EAAiBL,EAAQ,OACzBI,EAASJ,EAAQ,OACjBwf,EAASxf,EAAA,OAAAyf,EAAA,CAETC,EAAe1f,EAAQ,OAEvByf,EAAA,IAAAD,EAAA,aACAG,EAAAF,EAAAG,KAAA,CAoCA,SAAAC,cAAAvb,CAAA,EACA,IAAApC,EAAAoC,CAAA,IACA,OAAApC,GACA,OACA,OACA,GAAAoC,KAAAA,EAAA9C,MAAA,aACA,OAAAse,SAxCA5d,CAAA,CAAA6d,CAAA,EACA,IAAAnF,EAAA,IAAAxa,EAAA2f,GAGA,GAAAnF,EAAAtT,GAAA,CAAAqY,EAAAK,CAAA,iBAIA,IAAAhJ,EAAA4D,CAHAA,EAAAA,EAAAqF,KAAA,CAAAN,EAAAO,GAAA,GAGAC,MAAA,GAAAC,OAAA,CAAAxF,GAAAyF,OAAA,CAAAV,EAAA3E,CAAA,EAAAsF,OAAA,GAGA,OAFA,IAAApe,IAAA8U,EAAAuJ,KAAA,IAAAvJ,CAAAA,EAAAA,EAAAwJ,MAAA,IAEAf,EAAAgB,OAAA,EAAsBC,IAAA,CAAO9F,EAAAA,EAAA5D,EAAAA,CAAA,GAC7B,EA4BA9U,EAAAoC,EAAAzC,KAAA,OACA,QACA,OACA,OACA,GAAAyC,KAAAA,EAAA9C,MAAA,aACA,OAAAmf,SA/BAze,CAAA,CAAA6d,CAAA,CAAAa,CAAA,EACA,IAAAhG,EAAA,IAAAxa,EAAA2f,GACA/I,EAAA,IAAA5W,EAAAwgB,GAGA,GAAAhG,EAAAtT,GAAA,CAAAqY,EAAAK,CAAA,MAAAhJ,EAAA1P,GAAA,CAAAqY,EAAAK,CAAA,OAEApF,EAAAA,EAAAqF,KAAA,CAAAN,EAAAO,GAAA,EACAlJ,EAAAA,EAAAiJ,KAAA,CAAAN,EAAAO,GAAA,EAGA,CAAAhe,IAAAA,GAAAA,IAAAA,CAAA,GAAA8U,EAAAuJ,KAAA,KAAAre,CAAAA,IAAAA,CAAA,GANA,YASA,IAAA2e,EAAAjG,EAAAuF,MAAA,GAAAC,OAAA,CAAAxF,UACA,EAAAuF,MAAA,GAAAW,OAAA,CAAAD,EAAAR,OAAA,CAAAV,EAAA3E,CAAA,GAAAnU,MAAA,GAEA4Y,EAAAgB,OAAA,EAAsBC,IAAA,CAAO9F,EAAAA,EAAA5D,EAAAA,CAAA,IAF7B,IAGA,EAaA9U,EAAAoC,EAAAzC,KAAA,OAAAyC,EAAAzC,KAAA,QACA,SACA,WACA,CACA,CAEAvB,EAAA8D,gBAAwB,UAAAD,CAAA,EACxB,IAAA4c,EAAA,IAAA3gB,EAAA+D,GACA,OAAA4c,EAAAA,EAAAzZ,GAAA,CAAAqY,EAAAhI,CAAA,IAAAoJ,EAAAla,MAAA,EACA,EAEAvG,EAAA+d,gBAAwB,UAAAla,CAAA,CAAAma,CAAA,EACxB,IAAAjV,EAAA,IAAAjJ,EAAA+D,GACA,GAAAkF,EAAA/B,GAAA,CAAAqY,EAAAhI,CAAA,MAAAtO,EAAAxC,MAAA,eAAA6Y,EAAAsB,8BAAA,EAEA,OAAArgB,EAAAC,IAAA,CAAA6e,EAAAwB,cAAA,CAAA9c,GAAA+c,SAAA,CAAA5C,EAAA,IACA,EAEAhe,EAAA6gB,gBAAwB,UAAAhd,CAAA,EACxB,IAAA4c,EAAA,IAAA3gB,EAAA+D,GACA,OAAA4c,EAAAla,MAAA,GAAAlG,EAAA+S,KAAA,KAAAiM,EAAAhI,CAAA,CAAAyJ,GAAA,CAAAL,GAAAM,IAAA,CAAA1B,EAAAhI,CAAA,EAAA2J,WAAA,CAAA3gB,EAAA,QACA,EAEAL,EAAAihB,oBAA4B,UAAApd,CAAA,EAC5B,IAAA4c,EAAA,IAAA3gB,EAAA+D,GACA,GAAA4c,EAAAzZ,GAAA,CAAAqY,EAAAhI,CAAA,MAAAoJ,EAAAla,MAAA,eAAA6Y,EAAA8B,4BAAA,EAEA,OAAAT,EAAAU,IAAA,CAAA9B,EAAAhI,CAAA,EAAA2J,WAAA,CAAA3gB,EAAA,QACA,EAEAL,EAAAohB,kBAA0B,UAAAvd,CAAA,CAAAwd,CAAA,EAC1B,IAAAZ,EAAA,IAAA3gB,EAAAuhB,GACA,GAAAZ,EAAAzZ,GAAA,CAAAqY,EAAAhI,CAAA,OAEAoJ,EAAAa,IAAA,KAAAxhB,EAAA+D,IACA4c,EAAAzZ,GAAA,CAAAqY,EAAAhI,CAAA,MAAAoJ,EAAAc,IAAA,CAAAlC,EAAAhI,CAAA,EACAoJ,EAAAla,MAAA,IAJA,YAAA6Y,EAAAoC,6BAAA,EAMA,OAAAf,EAAAO,WAAA,CAAA3gB,EAAA,QACA,EAEAL,EAAAyhB,kBAA0B,UAAA5d,CAAA,CAAAwd,CAAA,EAC1B,IAAAZ,EAAA,IAAA3gB,EAAAuhB,GACA,GAAAZ,EAAAzZ,GAAA,CAAAqY,EAAAhI,CAAA,MAAAoJ,EAAAla,MAAA,eAAA6Y,EAAAsC,6BAAA,EAKA,OAHAjB,EAAAkB,IAAA,KAAA7hB,EAAA+D,IACA4c,EAAAzZ,GAAA,CAAAqY,EAAAhI,CAAA,GAAAoJ,CAAAA,EAAAA,EAAAM,IAAA,CAAA1B,EAAAhI,CAAA,GAEAoJ,EAAAO,WAAA,CAAA3gB,EAAA,QACA,EAEAL,EAAAyE,eAAuB,UAAAZ,CAAA,CAAAma,CAAA,EACvB,IAAAjV,EAAA,IAAAjJ,EAAA+D,GACA,GAAAkF,EAAA/B,GAAA,CAAAqY,EAAAhI,CAAA,MAAAtO,EAAAxC,MAAA,eAAA6Y,EAAAwC,yBAAA,EAEA,OAAAvhB,EAAAC,IAAA,CAAA6e,EAAAwB,cAAA,CAAA9c,GAAA+c,SAAA,CAAA5C,EAAA,IACA,EAEAhe,EAAAuE,gBAAwB,UAAAP,CAAA,CAAAga,CAAA,EACxB,IAAA6D,EAAAtC,cAAAvb,GACA,GAAA6d,OAAAA,EAAA,YAAAzC,EAAA0C,wBAAA,EAEA,OAAAzhB,EAAAC,IAAA,CAAAuhB,EAAAjB,SAAA,CAAA5C,EAAA,IACA,EAEAhe,EAAAkE,eAAuB,UAAAF,CAAA,EACvB,OAAAub,OAAAA,cAAAvb,EACA,EAEAhE,EAAA+hB,iBAAyB,UAAA/d,CAAA,CAAAqd,CAAA,CAAArD,CAAA,EACzB,IAAA6D,EAAAtC,cAAAvb,GACA,GAAA6d,OAAAA,EAAA,YAAAzC,EAAA0C,wBAAA,EAGA,GAAAT,CADAA,EAAA,IAAAvhB,EAAAuhB,EAAA,EACAra,GAAA,CAAAqY,EAAAhI,CAAA,iBAAA+H,EAAA4C,4BAAA,EAEA,IAAAC,EAAA5C,EAAAzI,CAAA,CAAAsL,GAAA,CAAAb,GAAAc,GAAA,CAAAN,EAAAzB,GAAA,EACA,GAAA6B,EAAAG,UAAA,eAAAhD,EAAA4C,4BAAA,EAEA,OAAA3hB,EAAAC,IAAA,CAAA2hB,EAAAte,MAAA,IAAAqa,GACA,EAEAhe,EAAAqiB,iBAAyB,UAAAre,CAAA,CAAAqd,CAAA,CAAArD,CAAA,EACzB,IAAA6D,EAAAtC,cAAAvb,GACA,GAAA6d,OAAAA,EAAA,YAAAzC,EAAA0C,wBAAA,EAGA,GAAAT,CADAA,EAAA,IAAAvhB,EAAAuhB,EAAA,EACAra,GAAA,CAAAqY,EAAAhI,CAAA,MAAAgK,EAAA9a,MAAA,eAAA6Y,EAAAkD,4BAAA,EAEA,OAAAjiB,EAAAC,IAAA,CAAAuhB,EAAAzB,GAAA,CAAA8B,GAAA,CAAAb,GAAA1d,MAAA,IAAAqa,GACA,EAEAhe,EAAAuiB,gBAAwB,UAAAC,CAAA,CAAAxE,CAAA,EAExB,QADAyE,EAAA,MAAAD,EAAAthB,MAAA,EACAsB,EAAA,EAAkBA,EAAAggB,EAAAthB,MAAA,CAAuB,EAAAsB,EAEzC,GADAigB,CAAA,CAAAjgB,EAAA,CAAA+c,cAAAiD,CAAA,CAAAhgB,EAAA,EACAigB,OAAAA,CAAA,CAAAjgB,EAAA,aAAA4c,EAAA0C,wBAAA,EAIA,QADAG,EAAAQ,CAAA,IAAArC,GAAA,CACAsC,EAAA,EAAkBA,EAAAD,EAAAvhB,MAAA,CAAkB,EAAAwhB,EAAAT,EAAAA,EAAAE,GAAA,CAAAM,CAAA,CAAAC,EAAA,CAAAtC,GAAA,EACpC,GAAA6B,EAAAG,UAAA,eAAAhD,EAAAuD,0BAAA,EAEA,OAAAtiB,EAAAC,IAAA,CAAA2hB,EAAAte,MAAA,IAAAqa,GACA,EAEAhe,EAAA4iB,kBAA0B,UAAA3d,CAAA,EAC1B,IAAAD,EAAA,IAAAlF,EAAAmF,EAAA1D,KAAA,QACA2D,EAAA,IAAApF,EAAAmF,EAAA1D,KAAA,SACA,GAAAyD,EAAAgC,GAAA,CAAAqY,EAAAhI,CAAA,MAAAnS,EAAA8B,GAAA,CAAAqY,EAAAhI,CAAA,iBAAA+H,EAAAyD,0BAAA,EAEA,IAAAvK,EAAAjY,EAAAC,IAAA,CAAA2E,GAGA,OAFA,IAAAC,EAAA8B,GAAA,CAAAmY,EAAA2D,EAAA,GAAAzD,EAAAhI,CAAA,CAAAyJ,GAAA,CAAA5b,GAAA8b,WAAA,CAAA3gB,EAAA,SAAAiB,IAAA,CAAAgX,EAAA,IAEAA,CACA,EAEAtY,EAAAqe,eAAuB,UAAApZ,CAAA,EACvB,IAAAD,EAAAC,EAAA1D,KAAA,OACA2D,EAAAD,EAAA1D,KAAA,QACA,OAAAzB,EAAAkF,GAAAgC,GAAA,CAAAqY,EAAAhI,CAAA,UAAAvX,EAAAoF,GAAA8B,GAAA,CAAAqY,EAAAhI,CAAA,iBAAA+H,EAAAyD,0BAAA,EAEA,OAAW7d,EAAAA,EAAAE,EAAAA,CAAA,CACX,EAEAlF,EAAAye,eAAuB,UAAAH,CAAA,EACvB,IAAAtZ,EAAA,IAAAlF,EAAAwe,EAAAtZ,CAAA,EACAA,EAAAgC,GAAA,CAAAqY,EAAAhI,CAAA,MAAArS,CAAAA,EAAA,IAAAlF,EAAA,IAEA,IAAAoF,EAAA,IAAApF,EAAAwe,EAAApZ,CAAA,EAGA,OAFAA,EAAA8B,GAAA,CAAAqY,EAAAhI,CAAA,MAAAnS,CAAAA,EAAA,IAAApF,EAAA,IAEAO,EAAA8D,MAAA,EACAa,EAAAgc,WAAA,CAAA3gB,EAAA,SACA6E,EAAA8b,WAAA,CAAA3gB,EAAA,SACA,CACA,EAEAL,EAAA8E,IAAY,UAAAO,CAAA,CAAAxB,CAAA,CAAAkf,CAAA,CAAAvb,CAAA,EACZ,sBAAAub,EAAA,CACA,IAAAC,EAAAD,EACAA,EAAA,SAAAE,CAAA,EACA,IAAA3c,EAAA0c,EAAA3d,EAAAxB,EAAA,KAAA2D,EAAAyb,GACA,IAAA5iB,EAAA2B,QAAA,CAAAsE,IAAAA,KAAAA,EAAApF,MAAA,aAAAke,EAAA8D,eAAA,EAEA,WAAApjB,EAAAwG,EACA,CACA,CAEA,IAAAyC,EAAA,IAAAjJ,EAAA+D,GACA,GAAAkF,EAAA/B,GAAA,CAAAqY,EAAAhI,CAAA,MAAAtO,EAAAxC,MAAA,eAAA6Y,EAAA8D,eAAA,EAEA,IAAA5K,EAAA6G,EAAAra,IAAA,CAAAO,EAAAxB,EAAA,CAA8Csf,UAAA,GAAAC,EAAAL,EAAAM,KAAA7b,CAAA,GAC9C,OACAvC,UAAA5E,EAAA8D,MAAA,EACAmU,EAAAtT,CAAA,CAAAgc,WAAA,CAAA3gB,EAAA,SACAiY,EAAApT,CAAA,CAAA8b,WAAA,CAAA3gB,EAAA,SACA,EACA8E,SAAAmT,EAAAgL,aAAA,CAEA,EAEAtjB,EAAAujB,MAAc,UAAAle,CAAA,CAAAJ,CAAA,CAAAjB,CAAA,EACd,IAAAsa,EAAA,CAAiBtZ,EAAAC,EAAA1D,KAAA,OAAA2D,EAAAD,EAAA1D,KAAA,SAEjBiiB,EAAA,IAAA1jB,EAAAwe,EAAAtZ,CAAA,EACAye,EAAA,IAAA3jB,EAAAwe,EAAApZ,CAAA,EACA,GAAAse,EAAAxc,GAAA,CAAAqY,EAAAhI,CAAA,MAAAoM,EAAAzc,GAAA,CAAAqY,EAAAhI,CAAA,iBAAA+H,EAAAyD,0BAAA,EACA,GAAAY,IAAAA,EAAAzc,GAAA,CAAAmY,EAAA2D,EAAA,GAAAU,EAAAjd,MAAA,IAAAkd,EAAAld,MAAA,YAEA,IAAAsb,EAAAtC,cAAAvb,GACA,GAAA6d,OAAAA,EAAA,YAAAzC,EAAA0C,wBAAA,EAEA,OAAA3C,EAAAoE,MAAA,CAAAle,EAAAiZ,EAAA,CAAsChE,EAAAuH,EAAAzB,GAAA,CAAA9F,CAAA,CAAA5D,EAAAmL,EAAAzB,GAAA,CAAA1J,CAAA,EACtC,EAEA1W,EAAAyF,OAAe,UAAAJ,CAAA,CAAAJ,CAAA,CAAAE,CAAA,CAAA6Y,CAAA,EACf,IAAAM,EAAA,CAAiBtZ,EAAAC,EAAA1D,KAAA,OAAA2D,EAAAD,EAAA1D,KAAA,SAEjBiiB,EAAA,IAAA1jB,EAAAwe,EAAAtZ,CAAA,EACAye,EAAA,IAAA3jB,EAAAwe,EAAApZ,CAAA,EACA,GAAAse,EAAAxc,GAAA,CAAAqY,EAAAhI,CAAA,MAAAoM,EAAAzc,GAAA,CAAAqY,EAAAhI,CAAA,iBAAA+H,EAAAyD,0BAAA,EAEA,IACA,GAAAW,EAAAjd,MAAA,IAAAkd,EAAAld,MAAA,iBAEA,IAAA0b,EAAA9C,EAAAuE,aAAA,CAAAre,EAAAiZ,EAAAnZ,GACA,OAAA9E,EAAAC,IAAA,CAAA2hB,EAAAte,MAAA,IAAAqa,GACA,CAAI,MAAAjT,EAAA,CACJ,YAAAqU,EAAAuE,kBAAA,CACA,CACA,EAEA3jB,EAAA4jB,IAAY,UAAA5f,CAAA,CAAAH,CAAA,EACZ,IAAAggB,EAAA7jB,EAAA8jB,UAAA,CAAA9f,EAAAH,EAAA,IACA,OAAA9D,EAAA,UAAAqD,MAAA,CAAAygB,GAAAxgB,MAAA,EACA,EAEArD,EAAA8jB,UAAkB,UAAA9f,CAAA,CAAAH,CAAA,CAAAma,CAAA,EAClB,IAAA6D,EAAAtC,cAAAvb,GACA,GAAA6d,OAAAA,EAAA,YAAAzC,EAAA0C,wBAAA,EAEA,IAAAiC,EAAA,IAAAjkB,EAAA+D,GACA,GAAAkgB,EAAA/c,GAAA,CAAAqY,EAAAhI,CAAA,MAAA0M,EAAAxd,MAAA,eAAA6Y,EAAA4E,SAAA,EAEA,OAAA3jB,EAAAC,IAAA,CAAAuhB,EAAAzB,GAAA,CAAA8B,GAAA,CAAA6B,GAAApgB,MAAA,IAAAqa,GACA,sCCrQA,IAAApe,EAAaF,EAAQ,OACrBukB,EAAUvkB,EAAQ,MAClB0f,EAAe1f,EAAQ,OAEvB,SAAAwkB,oBAAAzM,CAAA,CAAA0M,CAAA,SACA,KAAA/Y,IAAAqM,EAAA0M,GAEAvkB,EAAAod,SAAA,CAAAvF,EAAA2H,EAAAgF,uBAAA,EACA3M,EACA,CAEAvO,EAAAlJ,OAAA,UAAAL,CAAA,EACA,OACAmE,iBAAA,SAAAD,CAAA,EAEA,OADAjE,EAAAoC,QAAA,CAAA6B,EAAAub,EAAAiF,2BAAA,EACAxgB,KAAAA,EAAA3C,MAAA,EAAAvB,EAAAmE,gBAAA,CAAAD,EACA,EAEAka,iBAAA,SAAAla,CAAA,CAAAma,CAAA,EACApe,EAAAoC,QAAA,CAAA6B,EAAAub,EAAAiF,2BAAA,EACAzkB,EAAAwd,cAAA,CAAAvZ,EAAA,GAAAub,EAAAkF,6BAAA,EAEAtG,EAAAkG,oBAAAlG,EAAA,IACA,IAAAha,EAAArE,EAAAoe,gBAAA,CAAAla,EAAAma,GAEA,OAAAiG,EAAAlG,gBAAA,CAAAla,EAAAG,EAAAga,EACA,EAEAC,iBAAA,SAAApa,CAAA,EAIA,GAHAjE,EAAAoC,QAAA,CAAA6B,EAAAub,EAAAiF,2BAAA,EAGAxgB,CADAA,EAAAogB,EAAAhG,gBAAA,CAAApa,EAAA,GACAA,KAAAA,EAAA3C,MAAA,EAAAvB,EAAAmE,gBAAA,CAAAD,GAAA,OAAAA,CAEA,aAAAub,EAAAmF,8BAAA,CACA,EAEA1D,iBAAA,SAAAhd,CAAA,EAIA,OAHAjE,EAAAoC,QAAA,CAAA6B,EAAAub,EAAAiF,2BAAA,EACAzkB,EAAAwd,cAAA,CAAAvZ,EAAA,GAAAub,EAAAkF,6BAAA,EAEA3kB,EAAAkhB,gBAAA,CAAAhd,EACA,EAEAod,qBAAA,SAAApd,CAAA,EAIA,OAHAjE,EAAAoC,QAAA,CAAA6B,EAAAub,EAAAiF,2BAAA,EACAzkB,EAAAwd,cAAA,CAAAvZ,EAAA,GAAAub,EAAAkF,6BAAA,EAEA3kB,EAAAshB,oBAAA,CAAApd,EACA,EAEAud,mBAAA,SAAAvd,CAAA,CAAAwd,CAAA,EAOA,OANAzhB,EAAAoC,QAAA,CAAA6B,EAAAub,EAAAiF,2BAAA,EACAzkB,EAAAwd,cAAA,CAAAvZ,EAAA,GAAAub,EAAAkF,6BAAA,EAEA1kB,EAAAoC,QAAA,CAAAqf,EAAAjC,EAAAoF,kBAAA,EACA5kB,EAAAwd,cAAA,CAAAiE,EAAA,GAAAjC,EAAAqF,oBAAA,EAEA9kB,EAAAyhB,kBAAA,CAAAvd,EAAAwd,EACA,EAEAI,mBAAA,SAAA5d,CAAA,CAAAwd,CAAA,EAOA,OANAzhB,EAAAoC,QAAA,CAAA6B,EAAAub,EAAAiF,2BAAA,EACAzkB,EAAAwd,cAAA,CAAAvZ,EAAA,GAAAub,EAAAkF,6BAAA,EAEA1kB,EAAAoC,QAAA,CAAAqf,EAAAjC,EAAAoF,kBAAA,EACA5kB,EAAAwd,cAAA,CAAAiE,EAAA,GAAAjC,EAAAqF,oBAAA,EAEA9kB,EAAA8hB,kBAAA,CAAA5d,EAAAwd,EACA,EAEA5c,gBAAA,SAAAZ,CAAA,CAAAma,CAAA,EAMA,OALApe,EAAAoC,QAAA,CAAA6B,EAAAub,EAAAiF,2BAAA,EACAzkB,EAAAwd,cAAA,CAAAvZ,EAAA,GAAAub,EAAAkF,6BAAA,EAEAtG,EAAAkG,oBAAAlG,EAAA,IAEAre,EAAA8E,eAAA,CAAAZ,EAAAma,EACA,EAEAzZ,iBAAA,SAAAP,CAAA,CAAAga,CAAA,EAMA,OALApe,EAAAoC,QAAA,CAAAgC,EAAAob,EAAAsF,0BAAA,EACA9kB,EAAA0d,eAAA,CAAAtZ,EAAA,MAAAob,EAAAuF,4BAAA,EAEA3G,EAAAkG,oBAAAlG,EAAA,IAEAre,EAAA4E,gBAAA,CAAAP,EAAAga,EACA,EAEA9Z,gBAAA,SAAAF,CAAA,EAEA,OADApE,EAAAoC,QAAA,CAAAgC,EAAAob,EAAAsF,0BAAA,EACA/kB,EAAAuE,eAAA,CAAAF,EACA,EAEA+d,kBAAA,SAAA/d,CAAA,CAAAqd,CAAA,CAAArD,CAAA,EASA,OARApe,EAAAoC,QAAA,CAAAgC,EAAAob,EAAAsF,0BAAA,EACA9kB,EAAA0d,eAAA,CAAAtZ,EAAA,MAAAob,EAAAuF,4BAAA,EAEA/kB,EAAAoC,QAAA,CAAAqf,EAAAjC,EAAAoF,kBAAA,EACA5kB,EAAAwd,cAAA,CAAAiE,EAAA,GAAAjC,EAAAqF,oBAAA,EAEAzG,EAAAkG,oBAAAlG,EAAA,IAEAre,EAAAoiB,iBAAA,CAAA/d,EAAAqd,EAAArD,EACA,EAEAqE,kBAAA,SAAAre,CAAA,CAAAqd,CAAA,CAAArD,CAAA,EASA,OARApe,EAAAoC,QAAA,CAAAgC,EAAAob,EAAAsF,0BAAA,EACA9kB,EAAA0d,eAAA,CAAAtZ,EAAA,MAAAob,EAAAuF,4BAAA,EAEA/kB,EAAAoC,QAAA,CAAAqf,EAAAjC,EAAAoF,kBAAA,EACA5kB,EAAAwd,cAAA,CAAAiE,EAAA,GAAAjC,EAAAqF,oBAAA,EAEAzG,EAAAkG,oBAAAlG,EAAA,IAEAre,EAAA0iB,iBAAA,CAAAre,EAAAqd,EAAArD,EACA,EAEAuE,iBAAA,SAAAC,CAAA,CAAAxE,CAAA,EACApe,EAAAsC,OAAA,CAAAsgB,EAAApD,EAAAwF,2BAAA,EACAhlB,EAAA6d,cAAA,CAAA+E,EAAApD,EAAAyF,6BAAA,EACA,QAAAriB,EAAA,EAAsBA,EAAAggB,EAAAthB,MAAA,CAAuB,EAAAsB,EAC7C5C,EAAAoC,QAAA,CAAAwgB,CAAA,CAAAhgB,EAAA,CAAA4c,EAAAsF,0BAAA,EACA9kB,EAAA0d,eAAA,CAAAkF,CAAA,CAAAhgB,EAAA,OAAA4c,EAAAuF,4BAAA,EAKA,OAFA3G,EAAAkG,oBAAAlG,EAAA,IAEAre,EAAA4iB,gBAAA,CAAAC,EAAAxE,EACA,EAEA4E,mBAAA,SAAA3d,CAAA,EAIA,OAHArF,EAAAoC,QAAA,CAAAiD,EAAAma,EAAA0F,4BAAA,EACAllB,EAAAwd,cAAA,CAAAnY,EAAA,GAAAma,EAAA2F,8BAAA,EAEAplB,EAAAijB,kBAAA,CAAA3d,EACA,EAEAoZ,gBAAA,SAAApZ,CAAA,EACArF,EAAAoC,QAAA,CAAAiD,EAAAma,EAAA0F,4BAAA,EACAllB,EAAAwd,cAAA,CAAAnY,EAAA,GAAAma,EAAA2F,8BAAA,EAEA,IAAAzG,EAAA3e,EAAA0e,eAAA,CAAApZ,GACA,OAAAgf,EAAA5F,eAAA,CAAAC,EACA,EAEAG,gBAAA,SAAA5Z,CAAA,EACAjF,EAAAoC,QAAA,CAAA6C,EAAAua,EAAA0F,4BAAA,EACAllB,EAAA6d,cAAA,CAAA5Y,EAAAua,EAAA2F,8BAAA,EAEA,IAAAzG,EAAA2F,EAAAxF,eAAA,CAAA5Z,GACA,GAAAyZ,EAAA,OAAA3e,EAAA8e,eAAA,CAAAH,EAEA,aAAAc,EAAA4F,8BAAA,CACA,EAEAtG,mBAAA,SAAA7Z,CAAA,EACAjF,EAAAoC,QAAA,CAAA6C,EAAAua,EAAA0F,4BAAA,EACAllB,EAAA6d,cAAA,CAAA5Y,EAAAua,EAAA2F,8BAAA,EAEA,IAAAzG,EAAA2F,EAAAvF,kBAAA,CAAA7Z,GACA,GAAAyZ,EAAA,OAAA3e,EAAA8e,eAAA,CAAAH,EAEA,aAAAc,EAAA4F,8BAAA,CACA,EAEAlgB,KAAA,SAAAO,CAAA,CAAAxB,CAAA,CAAA4F,CAAA,EACA7J,EAAAoC,QAAA,CAAAqD,EAAA+Z,EAAA6F,kBAAA,EACArlB,EAAAwd,cAAA,CAAA/X,EAAA,GAAA+Z,EAAA8F,oBAAA,EAEAtlB,EAAAoC,QAAA,CAAA6B,EAAAub,EAAAiF,2BAAA,EACAzkB,EAAAwd,cAAA,CAAAvZ,EAAA,GAAAub,EAAAkF,6BAAA,EAEA,IAAA9c,EAAA,KACAub,EAAA,KAgBA,OAfA3X,KAAAA,IAAA3B,IACA7J,EAAAud,QAAA,CAAA1T,EAAA2V,EAAA+F,oBAAA,EAEA/Z,KAAAA,IAAA3B,EAAAjC,IAAA,GACA5H,EAAAoC,QAAA,CAAAyH,EAAAjC,IAAA,CAAA4X,EAAAgG,yBAAA,EACAxlB,EAAAwd,cAAA,CAAA3T,EAAAjC,IAAA,IAAA4X,EAAAiG,2BAAA,EACA7d,EAAAiC,EAAAjC,IAAA,EAGA4D,KAAAA,IAAA3B,EAAAsZ,OAAA,GACAnjB,EAAAqd,UAAA,CAAAxT,EAAAsZ,OAAA,CAAA3D,EAAAkG,4BAAA,EACAvC,EAAAtZ,EAAAsZ,OAAA,GAIApjB,EAAAmF,IAAA,CAAAO,EAAAxB,EAAAkf,EAAAvb,EACA,EAEA+b,OAAA,SAAAle,CAAA,CAAAJ,CAAA,CAAAjB,CAAA,EAUA,OATApE,EAAAoC,QAAA,CAAAqD,EAAA+Z,EAAA6F,kBAAA,EACArlB,EAAAwd,cAAA,CAAA/X,EAAA,GAAA+Z,EAAA8F,oBAAA,EAEAtlB,EAAAoC,QAAA,CAAAiD,EAAAma,EAAA0F,4BAAA,EACAllB,EAAAwd,cAAA,CAAAnY,EAAA,GAAAma,EAAA2F,8BAAA,EAEAnlB,EAAAoC,QAAA,CAAAgC,EAAAob,EAAAsF,0BAAA,EACA9kB,EAAA0d,eAAA,CAAAtZ,EAAA,MAAAob,EAAAuF,4BAAA,EAEAhlB,EAAA4jB,MAAA,CAAAle,EAAAJ,EAAAjB,EACA,EAEAyB,QAAA,SAAAJ,CAAA,CAAAJ,CAAA,CAAAE,CAAA,CAAA6Y,CAAA,EAYA,OAXApe,EAAAoC,QAAA,CAAAqD,EAAA+Z,EAAA6F,kBAAA,EACArlB,EAAAwd,cAAA,CAAA/X,EAAA,GAAA+Z,EAAA8F,oBAAA,EAEAtlB,EAAAoC,QAAA,CAAAiD,EAAAma,EAAA0F,4BAAA,EACAllB,EAAAwd,cAAA,CAAAnY,EAAA,GAAAma,EAAA2F,8BAAA,EAEAnlB,EAAAsd,QAAA,CAAA/X,EAAAia,EAAAmG,wBAAA,EACA3lB,EAAA8d,kBAAA,CAAAvY,EAAA,KAAAia,EAAAoG,yBAAA,EAEAxH,EAAAkG,oBAAAlG,EAAA,IAEAre,EAAA8F,OAAA,CAAAJ,EAAAJ,EAAAE,EAAA6Y,EACA,EAEA4F,KAAA,SAAA5f,CAAA,CAAAH,CAAA,EAOA,OANAjE,EAAAoC,QAAA,CAAAgC,EAAAob,EAAAsF,0BAAA,EACA9kB,EAAA0d,eAAA,CAAAtZ,EAAA,MAAAob,EAAAuF,4BAAA,EAEA/kB,EAAAoC,QAAA,CAAA6B,EAAAub,EAAAiF,2BAAA,EACAzkB,EAAAwd,cAAA,CAAAvZ,EAAA,GAAAub,EAAAkF,6BAAA,EAEA3kB,EAAAikB,IAAA,CAAA5f,EAAAH,EACA,EAEAigB,WAAA,SAAA9f,CAAA,CAAAH,CAAA,CAAAma,CAAA,EASA,OARApe,EAAAoC,QAAA,CAAAgC,EAAAob,EAAAsF,0BAAA,EACA9kB,EAAA0d,eAAA,CAAAtZ,EAAA,MAAAob,EAAAuF,4BAAA,EAEA/kB,EAAAoC,QAAA,CAAA6B,EAAAub,EAAAiF,2BAAA,EACAzkB,EAAAwd,cAAA,CAAAvZ,EAAA,GAAAub,EAAAkF,6BAAA,EAEAtG,EAAAkG,oBAAAlG,EAAA,IAEAre,EAAAmkB,UAAA,CAAA9f,EAAAH,EAAAma,EACA,CACA,CACA,sCCpMA,IACAyH,EAAA,6CACAC,EAAAC,KAAAC,IAAA,CACAC,EAAAF,KAAAG,KAAA,CAEAC,EAAA,qBACAC,EAAAD,EAAA,yDAMAE,EAAA,2DA8oFA,SAAAC,SAAA7O,CAAA,EACA,IAAA7U,EAAA6U,EAAAA,EACA,OAAAA,EAAA,GAAAA,IAAA7U,EAAAA,EAAAA,EAAA,CACA,CAIA,SAAA2jB,cAAAxkB,CAAA,EAMA,IALA,IAAAuD,EAAAmV,EACA7X,EAAA,EACAkgB,EAAA/gB,EAAAT,MAAA,CACA8D,EAAArD,CAAA,OAESa,EAAAkgB,GAAM,CAGf,IADArI,EAAA+L,GAAAlhB,CADAA,EAAAvD,CAAA,CAAAa,IAAA,KACAtB,MAAA,CACWmZ,IAAKnV,EAAA,IAAAA,GAChBF,GAAAE,CACA,CAGA,IAAAwd,EAAA1d,EAAA9D,MAAA,CAAqB8D,KAAAA,EAAA8V,UAAA,GAAA4H,KAErB,OAAA1d,EAAAzD,KAAA,GAAAmhB,EAAA,KACA,CAIA,SAAA2D,QAAA/L,CAAA,CAAA5D,CAAA,EACA,IAAA/U,EAAA+Y,EACA4L,EAAAhM,EAAAO,CAAA,CACA0L,EAAA7P,EAAAmE,CAAA,CACArY,EAAA8X,EAAApV,CAAA,CACAwd,EAAAhM,EAAAxR,CAAA,CACAke,EAAA9I,EAAA3C,CAAA,CACA6O,EAAA9P,EAAAiB,CAAA,CAGA,IAAAnV,GAAA,CAAAkgB,EAAA,YAMA,GAJA/gB,EAAA2kB,GAAA,CAAAA,CAAA,IACA5L,EAAA6L,GAAA,CAAAA,CAAA,IAGA5kB,GAAA+Y,EAAA,OAAA/Y,EAAA+Y,EAAA,GAAAgI,EAAAlgB,EAGA,GAAAA,GAAAkgB,EAAA,OAAAlgB,EAMA,GAJAb,EAAAa,EAAA,EACAkY,EAAA0I,GAAAoD,EAGA,CAAAF,GAAA,CAAAC,EAAA,OAAA7L,EAAA,GAAA4L,EAAA3kB,EAAA,KAGA,IAAA+Y,EAAA,OAAA0I,EAAAoD,EAAA7kB,EAAA,KAKA,IAAAa,EAAA,EAHAkgB,EAAA,CAAAU,EAAAkD,EAAAplB,MAAA,EAAAslB,CAAAA,EAAAD,EAAArlB,MAAA,EAAAkiB,EAAAoD,EAGchkB,EAAAkgB,EAAOlgB,IAAA,GAAA8jB,CAAA,CAAA9jB,EAAA,EAAA+jB,CAAA,CAAA/jB,EAAA,QAAA8jB,CAAA,CAAA9jB,EAAA,CAAA+jB,CAAA,CAAA/jB,EAAA,CAAAb,EAAA,KAGrB,OAAAyhB,GAAAoD,EAAA,EAAApD,EAAAoD,EAAA7kB,EAAA,IACA,CAMA,SAAA8kB,SAAApP,CAAA,CAAAqP,CAAA,CAAAC,CAAA,CAAAte,CAAA,EACA,GAAAgP,EAAAqP,GAAArP,EAAAsP,GAAAtP,IAAAwO,EAAAxO,GACA,MAAAuP,MACAb,EAAA1d,CAAAA,GAAA,8BAAAgP,EACAA,EAAAqP,GAAArP,EAAAsP,EAAA,sCACA,6BAAA9J,OAAAxF,GAEA,CAIA,SAAA4I,MAAA5I,CAAA,EACA,IAAA+L,EAAA/L,EAAAwD,CAAA,CAAA3Z,MAAA,GACA,OAAAglB,SAAA7O,EAAAM,CAAA,CAruFA,KAquFAyL,GAAA/L,EAAAwD,CAAA,CAAAuI,EAAA,KACA,CAGA,SAAAyD,cAAApgB,CAAA,CAAAkR,CAAA,EACA,OAAAlR,EAAAvF,MAAA,GAAAuF,EAAA8T,MAAA,QAAA9T,EAAAlF,KAAA,IAAAkF,CAAA,EACAkR,CAAAA,EAAA,YAAAA,CACA,CAGA,SAAAmP,aAAArgB,CAAA,CAAAkR,CAAA,CAAA0C,CAAA,EACA,IAAA+D,EAAA2I,EAGA,GAAApP,EAAA,GAGA,IAAAoP,EAAA1M,EAAA,IAAuB,EAAA1C,EAAKoP,GAAA1M,GAC5B5T,EAAAsgB,EAAAtgB,CAGA,MAIA,GAHA2X,EAAA3X,EAAAvF,MAAA,CAGA,EAAAyW,EAAAyG,EAAA,CACA,IAAA2I,EAAA1M,EAAA1C,GAAAyG,EAA6B,EAAAzG,EAAKoP,GAAA1M,GAClC5T,GAAAsgB,CACA,MAAMpP,EAAAyG,GACN3X,CAAAA,EAAAA,EAAAlF,KAAA,GAAAoW,GAAA,IAAAlR,EAAAlF,KAAA,CAAAoW,EAAA,EAIA,OAAAlR,CACA,CAMO,IAAAugB,EAAAzb,SA9vFPA,MAAA0b,CAAA,EACA,IAklBAC,EAwqBAC,EACAC,EACAC,EACAC,EACAC,EA9vCAC,EAAAC,EAAAC,EACArR,EAAA2Q,UAAAvc,SAAA,EAAgCkd,YAAAX,UAAAllB,SAAA,KAAA8lB,QAAA,MAChCC,EAAA,IAAAb,UAAA,GAUAc,EAAA,GAaAC,EAAA,EAMAC,EAAA,GAIAC,EAAA,GAMAC,EAAA,KAKAC,EAAA,IAGAC,EAAA,GAkBAC,EAAA,EAIAC,EAAA,EAGAC,EAAA,CACAjjB,OAAA,GACAkjB,UAAA,EACAC,mBAAA,EACAC,eAAA,IACAC,iBAAA,IACAC,kBAAA,EACAC,uBAAA,OACAC,OAAA,EACA,EAKA3O,EAAA,uCACA4O,EAAA,GAgBA,SAAA/B,UAAAjlB,CAAA,CAAA2Y,CAAA,EACA,IAAAsO,EAAAnO,EAAAoO,EAAAtR,EAAAnV,EAAA0mB,EAAA9K,EAAA3X,EACA6T,EAAA,KAGA,IAAAA,CAAAA,aAAA0M,SAAA,aAAAA,UAAAjlB,EAAA2Y,GAEA,GAAAA,MAAAA,EAAA,CAEA,GAAA3Y,GAAAA,CAAA,IAAAA,EAAAonB,YAAA,EACA7O,EAAApV,CAAA,CAAAnD,EAAAmD,CAAA,CAEA,CAAAnD,EAAA8Y,CAAA,EAAA9Y,EAAA4V,CAAA,CAAAwQ,EACA7N,EAAAO,CAAA,CAAAP,EAAA3C,CAAA,MACU5V,EAAA4V,CAAA,CAAAuQ,EACV5N,EAAAO,CAAA,EAAAP,EAAA3C,CAAA,KAEA2C,EAAA3C,CAAA,CAAA5V,EAAA4V,CAAA,CACA2C,EAAAO,CAAA,CAAA9Y,EAAA8Y,CAAA,CAAAtZ,KAAA,IAGA,MACA,CAEA,IAAA2nB,EAAA,iBAAAnnB,CAAA,GAAAA,EAAAA,GAAA,GAMA,GAHAuY,EAAApV,CAAA,GAAAnD,EAAA,EAAAA,CAAAA,EAAA,CAAAA,EAAA,MAGAA,IAAA,EAAAA,EAAA,CACA,IAAA4V,EAAA,EAAAnV,EAAAT,EAA6BS,GAAA,GAASA,GAAA,GAAAmV,KAEtCA,EAAAwQ,EACA7N,EAAAO,CAAA,CAAAP,EAAA3C,CAAA,OAEA2C,EAAA3C,CAAA,CAAAA,EACA2C,EAAAO,CAAA,EAAA9Y,EAAA,EAGA,MACA,CAEA0E,EAAAoW,OAAA9a,EACA,KAAQ,CAER,IAAA0jB,EAAA1f,IAAA,CAAAU,EAAAoW,OAAA9a,IAAA,OAAA2lB,EAAApN,EAAA7T,EAAAyiB,EAEA5O,CAAAA,EAAApV,CAAA,CAAAuB,IAAAA,EAAAqU,UAAA,IAAArU,CAAAA,EAAAA,EAAAlF,KAAA,SACA,CAGAoW,CAAAA,EAAAlR,EAAAwC,OAAA,WAAAxC,CAAAA,EAAAA,EAAA2iB,OAAA,UAGA,CAAA5mB,EAAAiE,EAAA4iB,MAAA,WAGA1R,EAAA,GAAAA,CAAAA,EAAAnV,CAAAA,EACAmV,GAAA,CAAAlR,EAAAlF,KAAA,CAAAiB,EAAA,GACAiE,EAAAA,EAAA6iB,SAAA,GAAA9mB,IACQmV,EAAA,GAGRA,CAAAA,EAAAlR,EAAAvF,MAAA,CAGA,KAAM,CAON,GAJAulB,SAAA/L,EAAA,EAAAP,EAAAjZ,MAAA,SAIAwZ,IAAAA,GAAAqO,EAEA,OAAAld,MADAyO,EAAA,IAAA0M,UAAAjlB,GACA+lB,EAAAxN,EAAA3C,CAAA,GAAAoQ,GAKA,GAFAthB,EAAAoW,OAAA9a,GAEAmnB,EAAA,iBAAAnnB,EAAA,CAGA,GAAAA,EAAAA,GAAA,SAAA2lB,EAAApN,EAAA7T,EAAAyiB,EAAAxO,GAKA,GAHAJ,EAAApV,CAAA,GAAAnD,EAAA,EAAA0E,CAAAA,EAAAA,EAAAlF,KAAA,UAGAylB,UAAAuC,KAAA,EAAA9iB,EAAA2iB,OAAA,iBAAAloB,MAAA,IACA,MAAA0lB,MACAZ,EAAAjkB,EAEA,MACAuY,EAAApV,CAAA,CAAAuB,KAAAA,EAAAqU,UAAA,IAAArU,CAAAA,EAAAA,EAAAlF,KAAA,UAQA,IALAynB,EAAA7O,EAAA5Y,KAAA,GAAAmZ,GACA/C,EAAAnV,EAAA,EAIA4b,EAAA3X,EAAAvF,MAAA,CAA6BsB,EAAA4b,EAAS5b,IACtC,GAAAwmB,EAAAA,EAAA/f,OAAA,CAAA4R,EAAApU,EAAA8T,MAAA,CAAA/X,IAAA,CACA,GAAAqY,KAAAA,EAGA,IAAArY,EAAAmV,EAAA,CACAA,EAAAyG,EACA,QACA,OACY,IAAA6K,GAGZxiB,CAAAA,GAAAA,EAAAN,WAAA,IAAAM,CAAAA,EAAAA,EAAAR,WAAA,KACAQ,GAAAA,EAAAR,WAAA,IAAAQ,CAAAA,EAAAA,EAAAN,WAAA,MACA8iB,EAAA,GACAzmB,EAAA,GACAmV,EAAA,EACA,QACA,CAGA,OAAA+P,EAAApN,EAAAuC,OAAA9a,GAAAmnB,EAAAxO,EACA,CAIAwO,EAAA,GAIA,CAAAvR,EAAAlR,CAHAA,EAAAghB,EAAAhhB,EAAAiU,EAAA,GAAAJ,EAAApV,CAAA,GAGA+D,OAAA,UAAAxC,EAAAA,EAAA2iB,OAAA,SACAzR,EAAAlR,EAAAvF,MAAA,CAIA,IAAAsB,EAAA,EAAgBiE,KAAAA,EAAAqU,UAAA,CAAAtY,GAA0BA,KAG1C,IAAA4b,EAAA3X,EAAAvF,MAAA,CAA2BuF,KAAAA,EAAAqU,UAAA,GAAAsD,KAE3B,GAAA3X,EAAAA,EAAAlF,KAAA,CAAAiB,EAAA,EAAA4b,GAAA,CAIA,GAHAA,GAAA5b,EAGA0mB,GAAAlC,UAAAuC,KAAA,EACAnL,EAAA,IAAArc,CAAAA,EA3QA,kBA2QAA,IAAA8jB,EAAA9jB,EAAA,EACA,MAAA6kB,MACAZ,EAAA1L,EAAApV,CAAA,CAAAnD,GAIA,IAAA4V,EAAAA,EAAAnV,EAAA,GAAA2lB,EAGA7N,EAAAO,CAAA,CAAAP,EAAA3C,CAAA,WAGQ,GAAAA,EAAAuQ,EAGR5N,EAAAO,CAAA,EAAAP,EAAA3C,CAAA,QACQ,CAWR,GAVA2C,EAAA3C,CAAA,CAAAA,EACA2C,EAAAO,CAAA,IAMArY,EAAA,CAAAmV,EAAA,GApSA,GAqSAA,EAAA,GAAAnV,CAAAA,GArSA,EAqSA,EAEAA,EAAA4b,EAAA,CAGA,IAFA5b,GAAA8X,EAAAO,CAAA,CAAAzT,IAAA,EAAAX,EAAAlF,KAAA,GAAAiB,IAEA4b,GA1SA,GA0SgC5b,EAAA4b,GAChC9D,EAAAO,CAAA,CAAAzT,IAAA,EAAAX,EAAAlF,KAAA,CAAAiB,EAAAA,GA3SA,KA8SAA,EAAA4jB,GAAA,CAAA3f,EAAAA,EAAAlF,KAAA,CAAAiB,EAAA,EAAAtB,MAAA,MAEAsB,GAAA4b,EAGA,KAAe5b,IAAKiE,GAAA,KACpB6T,EAAAO,CAAA,CAAAzT,IAAA,EAAAX,EACA,CACA,MAGA6T,EAAAO,CAAA,EAAAP,EAAA3C,CAAA,IA61BA,SAAA6R,OAAAnS,CAAA,CAAA7U,CAAA,CAAAinB,CAAA,CAAAC,CAAA,EACA,IAAAC,EAAAhS,EAAAiS,EAAAxL,EAAA3X,EAKA,GAHAgjB,MAAAA,EAAAA,EAAA1B,EACAtB,SAAAgD,EAAA,KAEA,CAAApS,EAAAwD,CAAA,QAAAxD,EAAAvV,QAAA,GAKA,GAHA6nB,EAAAtS,EAAAwD,CAAA,IACA+O,EAAAvS,EAAAM,CAAA,CAEAnV,MAAAA,EACAiE,EAAA0f,cAAA9O,EAAAwD,CAAA,EACApU,EAAAijB,GAAAA,GAAAA,GAAAA,GAAAE,CAAAA,GAAA5B,GAAA4B,GAAA3B,CAAA,EACApB,cAAApgB,EAAAmjB,GACA9C,aAAArgB,EAAAmjB,EAAA,UAeA,GAVAjS,EAAAN,CAHAA,EAAAxL,MAAA,IAAAmb,UAAA3P,GAAA7U,EAAAinB,EAAA,EAGA9R,CAAA,CAGAyG,EAAA3X,CADAA,EAAA0f,cAAA9O,EAAAwD,CAAA,GACA3Z,MAAA,CAOAwoB,GAAAA,GAAAA,GAAAA,GAAAlnB,CAAAA,GAAAmV,GAAAA,GAAAqQ,CAAA,GAGA,KAAe5J,EAAA5b,EAASiE,GAAA,IAAA2X,KACxB3X,EAAAogB,cAAApgB,EAAAkR,EAGA,MAKA,GAJAnV,GAAAonB,EACAnjB,EAAAqgB,aAAArgB,EAAAkR,EAAA,KAGAA,EAAA,EAAAyG,EACA,MAAA5b,EAAA,MAAAiE,GAAA,IAAwCjE,IAAKiE,GAAA,WAG7C,GAAAjE,CADAA,GAAAmV,EAAAyG,CAAA,EACA,EAEA,IADAzG,EAAA,GAAAyG,GAAA3X,CAAAA,GAAA,KACmBjE,IAAKiE,GAAA,KAMxB,OAAA4Q,EAAAnS,CAAA,IAAAykB,EAAA,IAAAljB,EAAAA,CACA,CAIA,SAAAojB,SAAAC,CAAA,CAAA5Q,CAAA,EAKA,IAJA,IAAA7B,EACA7U,EAAA,EACAunB,EAAA,IAAA/C,UAAA8C,CAAA,KAEWtnB,EAAAsnB,EAAA5oB,MAAA,CAAiBsB,IAI5B,GAAA6U,CAHAA,EAAA,IAAA2P,UAAA8C,CAAA,CAAAtnB,EAAA,GAGA0C,CAAA,CAGQgU,EAAAlP,IAAA,CAAA+f,EAAA1S,IACR0S,CAAAA,EAAA1S,CAAAA,MAJA,CACA0S,EAAA1S,EACA,KACA,CAKA,OAAA0S,CACA,CAOA,SAAAC,UAAA3S,CAAA,CAAAwD,CAAA,CAAAlD,CAAA,EAKA,IAJA,IAAAnV,EAAA,EACAkgB,EAAA7H,EAAA3Z,MAAA,CAGW,CAAA2Z,CAAA,GAAA6H,EAAA,CAAS7H,EAAAnD,GAAA,IAGpB,IAAAgL,EAAA7H,CAAA,IAAmB6H,GAAA,GAASA,GAAA,GAAAlgB,KAkB5B,MAfA,CAAAmV,EAAAnV,EAAAmV,GAAAA,EAAA,GAAAwQ,EAGA9Q,EAAAwD,CAAA,CAAAxD,EAAAM,CAAA,MAGMA,EAAAuQ,EAGN7Q,EAAAwD,CAAA,EAAAxD,EAAAM,CAAA,KAEAN,EAAAM,CAAA,CAAAA,EACAN,EAAAwD,CAAA,CAAAA,GAGAxD,CACA,CAyDA,SAAAxL,MAAAyO,CAAA,CAAA2P,CAAA,CAAAR,CAAA,CAAAzkB,CAAA,EACA,IAAA+D,EAAAvG,EAAAkgB,EAAAU,EAAA/L,EAAA6S,EAAAC,EACA7D,EAAAhM,EAAAO,CAAA,CAIA,GAAAyL,EAAA,CAQA8D,EAAA,CAGA,IAAArhB,EAAA,EAAAqa,EAAAkD,CAAA,IAA+BlD,GAAA,GAASA,GAAA,GAAAra,KAIxC,GAAAvG,CAHAA,EAAAynB,EAAAlhB,CAAAA,EAGA,EACAvG,GAp1CA,GAq1CAkgB,EAAAuH,EAIAE,EAAA9S,CAHAA,EAAAiP,CAAA,CAAA4D,EAAA,IAGAG,CAAA,CAAAthB,EAAA2Z,EAAA,aAIA,GAAAwH,CAFAA,EAAAxE,EAAA,CAAAljB,EAAA,GA31CA,GA21CA,GAEA8jB,EAAAplB,MAAA,EAEA,GAAA8D,EAAA,CAGA,KAAqBshB,EAAAplB,MAAA,EAAAgpB,EAAiB5D,EAAAlf,IAAA,KACtCiQ,EAAA8S,EAAA,EACAphB,EAAA,EACAvG,GAr2CA,GAs2CAkgB,EAAAlgB,EAt2CA,GAs2CA,CACA,MACA,MAAA4nB,MAEY,CAIZ,IAAArhB,EAAA,EAHAsO,EAAA+L,EAAAkD,CAAA,CAAA4D,EAAA,CAGwB9G,GAAA,GAASA,GAAA,GAAAra,KAGjCvG,GAj3CA,GAw3CA2nB,EAAAzH,CAHAA,EAAAlgB,EAr3CA,GAq3CAuG,CAAAA,EAGA,IAAAsO,EAAAgT,CAAA,CAAAthB,EAAA2Z,EAAA,OACA,CAkBA,GAfA1d,EAAAA,GAAAilB,EAAA,GAKA3D,MAAAA,CAAA,CAAA4D,EAAA,IAAAxH,CAAAA,EAAA,EAAArL,EAAAA,EAAAgT,CAAA,CAAAthB,EAAA2Z,EAAA,IAEA1d,EAAAykB,EAAA,EACA,CAAAU,GAAAnlB,CAAAA,GAAAykB,CAAAA,GAAAA,GAAAA,GAAAnP,CAAAA,EAAApV,CAAA,SACAilB,EAAA,GAAAA,GAAAA,GAAAV,CAAAA,GAAAA,GAAAzkB,GAAAykB,GAAAA,GAGA,CAAAjnB,EAAA,EAAAkgB,EAAA,EAAArL,EAAAgT,CAAA,CAAAthB,EAAA2Z,EAAA,GAAA4D,CAAA,CAAA4D,EAAA,UACAT,GAAAnP,CAAAA,EAAApV,CAAA,SAEA+kB,EAAA,IAAA3D,CAAA,IAiBA,OAhBAA,EAAAplB,MAAA,GAEA8D,GAGAilB,GAAA3P,EAAA3C,CAAA,GAGA2O,CAAA,IAAA+D,CAAA,EAAAjE,GAAA6D,EAp5CA,EAo5CA,EAp5CA,GAo5CA,CACA3P,EAAA3C,CAAA,EAAAsS,GAAA,GAIA3D,CAAA,IAAAhM,EAAA3C,CAAA,GAGA2C,EAkBA,GAdA9X,GAAAA,GACA8jB,EAAAplB,MAAA,CAAAgpB,EACA9G,EAAA,EACA8G,MAEA5D,EAAAplB,MAAA,CAAAgpB,EAAA,EACA9G,EAAAiH,CAAA,CAAAjE,GAAA5jB,EAAA,CAIA8jB,CAAA,CAAA4D,EAAA,CAAAxH,EAAA,EAAAmD,EAAAxO,EAAAgT,CAAA,CAAAthB,EAAA2Z,EAAA,CAAA2H,CAAA,CAAA3H,EAAA,EAAAU,EAAA,GAIApe,EAEA,OAAkB,CAGlB,GAAAklB,GAAAA,EAAA,CAGA,IAAA1nB,EAAA,EAAAkgB,EAAA4D,CAAA,IAAqC5D,GAAA,GAASA,GAAA,GAAAlgB,KAE9C,IADAkgB,EAAA4D,CAAA,KAAAlD,EACAA,EAAA,EAA0BV,GAAA,GAASA,GAAA,GAAAU,KAGnC5gB,GAAA4gB,IACA9I,EAAA3C,CAAA,GA77CA,MA87CA2O,CAAA,KAAAA,CAAAA,CAAA,QAGA,KACA,CAEA,GADAA,CAAA,CAAA4D,EAAA,EAAA9G,EACAkD,MAAAA,CAAA,CAAA4D,EAAA,MACA5D,CAAAA,CAAA,CAAA4D,IAAA,GACA9G,EAAA,CAEA,CAIA,IAAA5gB,EAAA8jB,EAAAplB,MAAA,CAA4BolB,IAAAA,CAAA,GAAA9jB,EAAA,CAAe8jB,EAAA5O,GAAA,IAC3C,CAGA4C,EAAA3C,CAAA,CAAAwQ,EACA7N,EAAAO,CAAA,CAAAP,EAAA3C,CAAA,MAGQ2C,EAAA3C,CAAA,CAAAuQ,GACR5N,CAAAA,EAAAO,CAAA,EAAAP,EAAA3C,CAAA,IAEA,CAEA,OAAA2C,CACA,CAGA,SAAAsN,QAAAvQ,CAAA,EACA,IAAA5Q,EACAkR,EAAAN,EAAAM,CAAA,QAEA,OAAAA,EAAAN,EAAAvV,QAAA,IAEA2E,EAAA0f,cAAA9O,EAAAwD,CAAA,EAEApU,EAAAkR,GAAAqQ,GAAArQ,GAAAsQ,EACApB,cAAApgB,EAAAkR,GACAmP,aAAArgB,EAAAkR,EAAA,KAEAN,EAAAnS,CAAA,OAAAuB,EAAAA,EACA,CA8pCA,OAt0EAugB,UAAAzb,KAAA,CAAAA,MAEAyb,UAAAsD,QAAA,GACAtD,UAAAuD,UAAA,GACAvD,UAAAwD,UAAA,GACAxD,UAAAyD,WAAA,GACAzD,UAAA0D,aAAA,GACA1D,UAAA2D,eAAA,GACA3D,UAAA4D,eAAA,GACA5D,UAAA6D,eAAA,GACA7D,UAAA8D,gBAAA,GACA9D,UAAA+D,MAAA,GAqCA/D,UAAAgE,MAAA,CAAAhE,UAAAre,GAAA,UAAAd,CAAA,EACA,IAAA6X,EAAA3d,EAEA,GAAA8F,MAAAA,GAEA,oBAAAA,EAAA,CAsCA,GAlCAA,EAAAojB,cAAA,CAAAvL,EAAA,oBAEA+G,SADA1kB,EAAA8F,CAAA,CAAA6X,EAAA,CACA,EAnXA,IAmXAA,GACAoI,EAAA/lB,GAKA8F,EAAAojB,cAAA,CAAAvL,EAAA,mBAEA+G,SADA1kB,EAAA8F,CAAA,CAAA6X,EAAA,CACA,IAAAA,GACAqI,EAAAhmB,GAOA8F,EAAAojB,cAAA,CAAAvL,EAAA,oBAEA3d,CADAA,EAAA8F,CAAA,CAAA6X,EAAA,GACA3d,EAAA2V,GAAA,EACA+O,SAAA1kB,CAAA,WAAA2d,GACA+G,SAAA1kB,CAAA,MAvYA,IAuYA2d,GACAsI,EAAAjmB,CAAA,IACAkmB,EAAAlmB,CAAA,MAEA0kB,SAAA1kB,EAAA,KA3YA,IA2YA2d,GACAsI,EAAA,CAAAC,CAAAA,EAAAlmB,EAAA,GAAAA,EAAAA,CAAAA,IAOA8F,EAAAojB,cAAA,CAAAvL,EAAA,UAEA,GAAA3d,CADAA,EAAA8F,CAAA,CAAA6X,EAAA,GACA3d,EAAA2V,GAAA,CACA+O,SAAA1kB,CAAA,YAAA2d,GACA+G,SAAA1kB,CAAA,MAvZA,IAuZA2d,GACAwI,EAAAnmB,CAAA,IACAomB,EAAApmB,CAAA,SAGA,GADA0kB,SAAA1kB,EAAA,KA3ZA,IA2ZA2d,GACA3d,EACAmmB,EAAA,CAAAC,CAAAA,EAAApmB,EAAA,GAAAA,EAAAA,CAAAA,OAEA,MAAA6kB,MACAb,EAAArG,EAAA,oBAAA3d,GAQA,GAAA8F,EAAAojB,cAAA,CAAAvL,EAAA,WAEA,GAAA3d,CAAA,CADAA,CAAAA,EAAA8F,CAAA,CAAA6X,EAAA,IACA3d,GACA,GAAAA,GACA,uBAAAmpB,QAAAA,QACAA,CAAAA,OAAAC,eAAA,EAAAD,OAAAE,WAAA,EACAhD,EAAArmB,OAGA,MADAqmB,EAAA,CAAArmB,EACA6kB,MACAb,EAAA,2BAGAqC,EAAArmB,OAGA,MAAA6kB,MACAb,EAAArG,EAAA,uBAAA3d,GAsBA,GAhBA8F,EAAAojB,cAAA,CAAAvL,EAAA,iBAEA+G,SADA1kB,EAAA8F,CAAA,CAAA6X,EAAA,CACA,IAAAA,GACA2I,EAAAtmB,GAKA8F,EAAAojB,cAAA,CAAAvL,EAAA,mBAEA+G,SADA1kB,EAAA8F,CAAA,CAAA6X,EAAA,CACA,EAzcA,IAycAA,GACA4I,EAAAvmB,GAKA8F,EAAAojB,cAAA,CAAAvL,EAAA,WAEA,mBADA3d,CAAAA,EAAA8F,CAAA,CAAA6X,EAAA,EACA6I,EAAAxmB,OACA,MAAA6kB,MACAb,EAAArG,EAAA,mBAAA3d,GAKA,GAAA8F,EAAAojB,cAAA,CAAAvL,EAAA,aAKA,mBAJA3d,CAAAA,EAAA8F,CAAA,CAAA6X,EAAA,GAIA,wBAAA3Z,IAAA,CAAAhE,GAIA,MAAA6kB,MACAb,EAAArG,EAAA,aAAA3d,GAJAgnB,EAAAhnB,cAAAA,EAAAR,KAAA,OACA4Y,EAAApY,CAKA,CAEA,MAGA,MAAA6kB,MACAb,EAAA,oBAAAle,GAIA,OACAigB,eAAAA,EACAC,cAAAA,EACAsD,eAAA,CAAArD,EAAAC,EAAA,CACAqD,MAAA,CAAApD,EAAAC,EAAA,CACAC,OAAAA,EACAC,YAAAA,EACAC,cAAAA,EACAC,OAAAA,EACApO,SAAAA,CACA,CACA,EAYA6M,UAAAuE,WAAA,UAAAxpB,CAAA,EACA,IAAAA,GAAAA,CAAA,IAAAA,EAAAonB,YAAA,UACA,IAAAnC,UAAAuC,KAAA,UAEA,IAAA/mB,EAAA6U,EACAwD,EAAA9Y,EAAA8Y,CAAA,CACAlD,EAAA5V,EAAA4V,CAAA,CACAzS,EAAAnD,EAAAmD,CAAA,CAEAklB,EAAA,0BAAetoB,QAAA,CAAAkI,IAAA,CAAA6Q,GAEf,KAAA3V,IAAAA,GAAAA,KAAAA,CAAA,GAAAyS,GAAA,MAAAA,GAhhBA,KAghBAA,IAAAkO,EAAAlO,GAAA,CAGA,GAAAkD,IAAAA,CAAA,KACA,GAAAlD,IAAAA,GAAAkD,IAAAA,EAAA3Z,MAAA,UACA,MAAAkpB,CACA,CAQA,GALA5nB,CAAAA,EAAA,CAAAmV,EAAA,GAliBA,EAkiBA,EACA,GAAAnV,CAAAA,GAniBA,EAmiBA,EAIAqa,OAAAhC,CAAA,KAAA3Z,MAAA,EAAAsB,EAAA,CAEA,IAAAA,EAAA,EAAsBA,EAAAqY,EAAA3Z,MAAA,CAAcsB,IAEpC,GAAA6U,CADAA,EAAAwD,CAAA,CAAArY,EAAA,EACA,GAAA6U,GA5iBA,MA4iBAA,IAAAwO,EAAAxO,GAAA,MAAA+S,EAIA,GAAA/S,IAAAA,EAAA,QACA,CACA,OAGM,GAAAwD,OAAAA,GAAAlD,OAAAA,GAAAzS,CAAAA,OAAAA,GAAAA,IAAAA,GAAAA,KAAAA,CAAA,EACN,QAGA,OAAA0hB,MACAb,EAAA,sBAAAhkB,EACA,EAQAilB,UAAAwE,OAAA,CAAAxE,UAAAL,GAAA,YACA,OAAAkD,SAAA4B,UAAApV,EAAAqV,EAAA,CACA,EAQA1E,UAAA2E,OAAA,CAAA3E,UAAAN,GAAA,YACA,OAAAmD,SAAA4B,UAAApV,EAAAtP,EAAA,CACA,EAaAigB,UAAA4E,MAAA,EAOA1E,EAAA,iBAAAvB,KAAAiG,MAAA,WACA,WAAqB,OAAA/F,EAAAF,iBAAAA,KAAAiG,MAAA,KACrB,WAAqB,OAAAjG,WAAAA,KAAAiG,MAAA,cACrBjG,CAAAA,QAAAA,KAAAiG,MAAA,OAEA,SAAAC,CAAA,EACA,IAAAlqB,EAAA+Y,EAAA/C,EAAAyL,EAAArhB,EACAS,EAAA,EACAqY,EAAA,GACAiR,EAAA,IAAA9E,UAAAa,GAOA,GALAgE,MAAAA,EAAAA,EAAA/D,EACArB,SAAAoF,EAAA,EArmBA,KAumBAzI,EAAAsC,EAAAmG,EAhnBA,IAknBAzD,GAGA,GAAA8C,OAAAC,eAAA,EAIA,IAFAxpB,EAAAupB,OAAAC,eAAA,KAAAY,YAAA3I,GAAA,IAEiB5gB,EAAA4gB,GAcjBrhB,CANAA,EAAAJ,OAAAA,CAAA,CAAAa,EAAA,CAAAb,CAAAA,CAAA,CAAAa,EAAA,WAMA,MACAkY,EAAAwQ,OAAAC,eAAA,KAAAY,YAAA,IACApqB,CAAA,CAAAa,EAAA,CAAAkY,CAAA,IACA/Y,CAAA,CAAAa,EAAA,GAAAkY,CAAA,MAKAG,EAAAzT,IAAA,CAAArF,EAAA,MACAS,GAAA,GAGAA,EAAA4gB,EAAA,CAGA,MAAU,GAAA8H,OAAAE,WAAA,EAKV,IAFAzpB,EAAAupB,OAAAE,WAAA,CAAAhI,GAAA,GAEiB5gB,EAAA4gB,GAUjBrhB,CAJAA,EAAA,CAAAJ,GAAAA,CAAA,CAAAa,EAAA,kBAAAb,cAAAA,CAAA,CAAAa,EAAA,GACAb,WAAAA,CAAA,CAAAa,EAAA,GAAAb,SAAAA,CAAA,CAAAa,EAAA,GACAb,CAAAA,CAAA,CAAAa,EAAA,QAAAb,CAAAA,CAAA,CAAAa,EAAA,OAAAb,CAAA,CAAAa,EAAA,KAEA,KACA0oB,OAAAE,WAAA,IAAA9pB,IAAA,CAAAK,EAAAa,IAIAqY,EAAAzT,IAAA,CAAArF,EAAA,MACAS,GAAA,GAGAA,EAAA4gB,EAAA,CACA,MAEA,MADAgF,EAAA,GACAxB,MACAb,EAAA,sBAKA,IAAAqC,EAEA,KAAe5lB,EAAA4gB,GACfrhB,CAAAA,EAAAmlB,GAAA,EACA,MAAArM,CAAAA,CAAA,CAAArY,IAAA,CAAAT,EAAA,MAcA,IAVAqhB,EAAAvI,CAAA,GAAArY,EAAA,CACAqpB,GAhsBA,GAmsBAzI,GAAAyI,IACA9pB,EAAAkkB,CAAA,CAAAG,GAAAyF,EAAA,CACAhR,CAAA,CAAArY,EAAA,CAAAqjB,EAAAzC,EAAArhB,GAAAA,GAIa8Y,IAAAA,CAAA,CAAArY,EAAA,CAAYqY,EAAAnD,GAAA,GAAAlV,KAGzB,GAAAA,EAAA,EACAqY,EAAA,CAAAlD,EAAA,OACQ,CAGR,IAAAA,EAAA,GAAsBkD,IAAAA,CAAA,IAAYA,EAAAmR,MAAA,MAAArU,GAjtBlC,IAotBA,IAAAnV,EAAA,EAAAT,EAAA8Y,CAAA,IAA8B9Y,GAAA,GAASA,GAAA,GAAAS,KAGvCA,EAvtBA,IAutBAmV,CAAAA,GAAAyO,GAAA5jB,CAAAA,CACA,CAIA,OAFAspB,EAAAnU,CAAA,CAAAA,EACAmU,EAAAjR,CAAA,CAAAA,EACAiR,CACA,GASA9E,UAAAiF,GAAA,YAIA,IAHA,IAAAzpB,EAAA,EACAsnB,EAAA2B,UACAQ,EAAA,IAAAjF,UAAA8C,CAAA,KACWtnB,EAAAsnB,EAAA5oB,MAAA,EAAgB+qB,EAAAA,EAAAC,IAAA,CAAApC,CAAA,CAAAtnB,IAAA,EAC3B,OAAAypB,CACA,EAOAxE,EAAA,WACA,IAAA/K,EAAA,aAOA,SAAAyP,UAAA1lB,CAAA,CAAA2lB,CAAA,CAAAC,CAAA,CAAArD,CAAA,EAOA,IANA,IAAAtG,EAEA4J,EADAC,EAAA,IAEA/pB,EAAA,EACA4b,EAAA3X,EAAAvF,MAAA,CAEasB,EAAA4b,GAAQ,CACrB,IAAAkO,EAAAC,EAAArrB,MAAA,CAAgCorB,IAAQC,CAAA,CAAAD,EAAA,EAAAF,GAIxC,IAFAG,CAAA,KAAAvD,EAAA/f,OAAA,CAAAxC,EAAA8T,MAAA,CAAA/X,MAEAkgB,EAAA,EAAoBA,EAAA6J,EAAArrB,MAAA,CAAgBwhB,IAEpC6J,CAAA,CAAA7J,EAAA,CAAA2J,EAAA,IACA,MAAAE,CAAA,CAAA7J,EAAA,IAAA6J,CAAAA,CAAA,CAAA7J,EAAA,MACA6J,CAAA,CAAA7J,EAAA,IAAA6J,CAAA,CAAA7J,EAAA,CAAA2J,EAAA,EACAE,CAAA,CAAA7J,EAAA,EAAA2J,EAGA,CAEA,OAAAE,EAAAC,OAAA,EACA,CAKA,gBAAA/lB,CAAA,CAAA2lB,CAAA,CAAAC,CAAA,CAAAvnB,CAAA,CAAA2nB,CAAA,EACA,IAAAzD,EAAAjgB,EAAA4O,EAAAyL,EAAApe,EAAAsV,EAAAgM,EAAA5P,EACAlU,EAAAiE,EAAAwC,OAAA,MACA4iB,EAAA/D,EACA2B,EAAA1B,EA+BA,IA5BAvlB,GAAA,IACA4gB,EAAAkF,EAGAA,EAAA,EACA7hB,EAAAA,EAAA2iB,OAAA,SAEA9O,EAAA5D,CADAA,EAAA,IAAAsQ,UAAAoF,EAAA,EACAM,GAAA,CAAAjmB,EAAAvF,MAAA,CAAAsB,GACA8lB,EAAAlF,EAKA1M,EAAAmE,CAAA,CAAAsR,UAAArF,aAAAX,cAAA7L,EAAAO,CAAA,EAAAP,EAAA3C,CAAA,MACA,GAAA0U,EAAA3P,GACAhG,EAAAiB,CAAA,CAAAjB,EAAAmE,CAAA,CAAA3Z,MAAA,EAUAyW,EAAAyL,EAAAkD,CALAA,EAAA6F,UAAA1lB,EAAA2lB,EAAAC,EAAAI,EACAzD,CAAAA,EAAA7O,EAAAuC,CAAA,EACAsM,CAAAA,EAAAtM,EAAAvC,CAAA,IAGAjZ,MAAA,CAGaolB,GAAAA,CAAA,GAAAlD,EAAA,CAAckD,EAAA5O,GAAA,IAG3B,IAAA4O,CAAA,WAAA0C,EAAAzO,MAAA,IAqCA,GAlCA/X,EAAA,EACA,EAAAmV,GAEA2C,EAAAO,CAAA,CAAAyL,EACAhM,EAAA3C,CAAA,CAAAA,EAGA2C,EAAApV,CAAA,CAAAJ,EAEAwhB,EAAAhM,CADAA,EAAAkN,EAAAlN,EAAA5D,EAAAmV,EAAApC,EAAA4C,EAAA,EACAxR,CAAA,CACA7V,EAAAsV,EAAAtV,CAAA,CACA2S,EAAA2C,EAAA3C,CAAA,EASAnV,EAAA8jB,CAAA,CAHAvd,EAAA4O,EAAAkU,EAAA,EAGA,CAIAzI,EAAAiJ,EAAA,EACArnB,EAAAA,GAAA+D,EAAA,GAAAud,MAAAA,CAAA,CAAAvd,EAAA,GAEA/D,EAAAykB,EAAA,GAAAjnB,MAAAA,GAAAwC,CAAAA,GAAAykB,CAAAA,GAAAA,GAAAA,GAAAnP,CAAAA,EAAApV,CAAA,SACA1C,EAAA4gB,GAAA5gB,GAAA4gB,GAAAqG,CAAAA,GAAAA,GAAAzkB,GAAAykB,GAAAA,GAAAnD,EAAAA,CAAA,CAAAvd,EAAA,IACA0gB,GAAAnP,CAAAA,EAAApV,CAAA,SAKA6D,EAAA,IAAAud,CAAA,IAGA7f,EAAAzB,EAAA8hB,aAAAkC,EAAAzO,MAAA,KAAAsR,EAAA7C,EAAAzO,MAAA,KAAAyO,EAAAzO,MAAA,QACQ,CAMR,GAHA+L,EAAAplB,MAAA,CAAA6H,EAGA/D,EAGA,MAAAqnB,EAA0B,EAAA/F,CAAA,GAAAvd,EAAA,CAAAsjB,GAC1B/F,CAAA,CAAAvd,EAAA,GAEAA,IACA,EAAA4O,EACA2O,EAAA,IAAAniB,MAAA,CAAAmiB,IAMA,IAAAlD,EAAAkD,EAAAplB,MAAA,CAA4B,CAAAolB,CAAA,GAAAlD,EAAA,GAG5B,IAAA5gB,EAAA,EAAAiE,EAAA,GAA8BjE,GAAA4gB,EAAQ3c,GAAAuiB,EAAAzO,MAAA,CAAA+L,CAAA,CAAA9jB,IAAA,GAGtCiE,EAAAqgB,aAAArgB,EAAAkR,EAAAqR,EAAAzO,MAAA,IACA,CAGA,OAAA9T,CACA,CACA,IAIA+gB,EAAA,WAGA,SAAAmF,SAAArS,CAAA,CAAA8I,CAAA,CAAAwJ,CAAA,EACA,IAAA7C,EAAA8C,EAAAC,EAAAC,EACAC,EAAA,EACAxqB,EAAA8X,EAAApZ,MAAA,CACA+rB,EAAA7J,EA74BA,IA84BA8J,EAAA9J,EA94BA,IA84BA,EAEA,IAAA9I,EAAAA,EAAA/Y,KAAA,GAA0BiB,KAG1BunB,EAAAmD,EAFAJ,CAAAA,EAAAxS,CAAA,CAAA9X,EAAA,CAj5BA,GAi5BA,EAEAuqB,CADAA,EAAAzS,CAAA,CAAA9X,EAAA,CAl5BA,IAk5BA,GACAyqB,EAEAD,EAAA,CAAAH,CADAA,EAAAI,EAAAH,EAAA,EAp5BA,QAo5BAE,CAAA,EACAJ,EAAA,GAAA7C,CAAAA,EAr5BA,IAq5BA,GAAAmD,EAAAH,EACAzS,CAAA,CAAA9X,EAAA,CAAAqqB,EAAAD,EAKA,OAFAI,GAAA1S,CAAAA,EAAA,CAAA0S,EAAA,CAAA7oB,MAAA,CAAAmW,EAAA,EAEAA,CACA,CAEA,SAAA+L,QAAA1kB,CAAA,CAAA+Y,CAAA,CAAAyS,CAAA,CAAAC,CAAA,EACA,IAAA5qB,EAAAwE,EAEA,GAAAmmB,GAAAC,EACApmB,EAAAmmB,EAAAC,EAAA,UAGA,IAAA5qB,EAAAwE,EAAA,EAA0BxE,EAAA2qB,EAAQ3qB,IAElC,GAAAb,CAAA,CAAAa,EAAA,EAAAkY,CAAA,CAAAlY,EAAA,EACAwE,EAAArF,CAAA,CAAAa,EAAA,CAAAkY,CAAA,CAAAlY,EAAA,MACA,KACA,CAIA,OAAAwE,CACA,CAEA,SAAAqmB,SAAA1rB,CAAA,CAAA+Y,CAAA,CAAAyS,CAAA,CAAAP,CAAA,EAIA,IAHA,IAAApqB,EAAA,EAGa2qB,KACbxrB,CAAA,CAAAwrB,EAAA,EAAA3qB,EACAA,EAAAb,CAAA,CAAAwrB,EAAA,CAAAzS,CAAA,CAAAyS,EAAA,KACAxrB,CAAA,CAAAwrB,EAAA,CAAA3qB,EAAAoqB,EAAAjrB,CAAA,CAAAwrB,EAAA,CAAAzS,CAAA,CAAAyS,EAAA,CAIA,KAAa,CAAAxrB,CAAA,KAAAA,EAAAT,MAAA,GAAuBS,EAAAqqB,MAAA,OACpC,CAGA,gBAAA1R,CAAA,CAAA5D,CAAA,CAAAmV,CAAA,CAAApC,CAAA,CAAAmD,CAAA,EACA,IAAA5lB,EAAA2Q,EAAAnV,EAAA8qB,EAAAjW,EAAAkW,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EACAhpB,EAAAoV,EAAApV,CAAA,EAAAwR,EAAAxR,CAAA,MACAohB,EAAAhM,EAAAO,CAAA,CACA0L,EAAA7P,EAAAmE,CAAA,CAGA,IAAAyL,GAAA,CAAAA,CAAA,MAAAC,GAAA,CAAAA,CAAA,IAEA,WAAAS,UAGA,EAAA9hB,CAAA,EAAAwR,EAAAxR,CAAA,EAAAohB,CAAAA,EAAAC,CAAAA,GAAAD,CAAA,KAAAC,CAAA,IAAAA,CAAA,EAGAD,GAAAA,GAAAA,CAAA,MAAAC,EAAArhB,EAAAA,EAAAA,EAAA,EAHAipB,KAoBA,IAZAT,EAAAD,CADAA,EAAA,IAAAzG,UAAA9hB,EAAA,EACA2V,CAAA,IAEA3V,EAAA2mB,EADAlU,CAAAA,EAAA2C,EAAA3C,CAAA,CAAAjB,EAAAiB,CAAA,EACA,EAEAiV,IACAA,EA/9BA,KAg+BAjV,EAAAuO,SAAA5L,EAAA3C,CAAA,CA/9BA,IA+9BAuO,SAAAxP,EAAAiB,CAAA,CA/9BA,IAg+BAzS,EAAAA,EAh+BA,GAg+BA,GAKA1C,EAAA,EAAkB+jB,CAAA,CAAA/jB,EAAA,EAAA8jB,CAAAA,CAAA,CAAA9jB,EAAA,KAAuBA,KAIzC,GAFA+jB,CAAA,CAAA/jB,EAAA,CAAA8jB,CAAAA,CAAA,CAAA9jB,EAAA,MAAAmV,IAEAzS,EAAA,EACAwoB,EAAAtmB,IAAA,IACAkmB,EAAA,OACQ,CAwBR,IAvBAS,EAAAzH,EAAAplB,MAAA,CACA+sB,EAAA1H,EAAArlB,MAAA,CACAsB,EAAA,EACA0C,GAAA,EAIAmS,CAAAA,EAAAwO,EAAA+G,EAAArG,CAAAA,CAAA,SAIA,IACAA,EAAAoG,SAAApG,EAAAlP,EAAAuV,GACAtG,EAAAqG,SAAArG,EAAAjP,EAAAuV,GACAqB,EAAA1H,EAAArlB,MAAA,CACA6sB,EAAAzH,EAAAplB,MAAA,EAGA4sB,EAAAG,EAEAL,EAAAD,CADAA,EAAArH,EAAA/kB,KAAA,GAAA0sB,EAAA,EACA/sB,MAAA,CAGe0sB,EAAAK,EAAWN,CAAA,CAAAC,IAAA,IAE1BM,EAAA,IAAA/pB,MAAA,CADA+pB,EAAA3H,EAAAhlB,KAAA,IAEAysB,EAAAzH,CAAA,IACAA,CAAA,KAAAqG,EAAA,GAAAoB,IAIA,GAOA,GANA3W,EAAA,EAMArQ,CAHAA,EAAAqf,QAAAE,EAAAoH,EAAAM,EAAAL,EAAA,EAGA,GAqBA,GAjBAC,EAAAF,CAAA,IACAM,GAAAL,GAAAC,CAAAA,EAAAA,EAAAjB,EAAAe,CAAAA,CAAA,SAgBAtW,CAbAA,EAAAwO,EAAAgI,EAAAG,EAAA,EAaA,EAcA,IAXA3W,GAAAuV,GAAAvV,CAAAA,EAAAuV,EAAA,GAIAY,EAAAD,CADAA,EAAAZ,SAAApG,EAAAlP,EAAAuV,EAAA,EACA1rB,MAAA,CACA0sB,EAAAD,EAAAzsB,MAAA,CAMAmlB,GAAAA,QAAAkH,EAAAI,EAAAH,EAAAI,IACAvW,IAGAgW,SAAAE,EAAAU,EAAAT,EAAAU,EAAA3H,EAAAiH,EAAAZ,GACAY,EAAAD,EAAArsB,MAAA,CACA8F,EAAA,OAQA,GAAAqQ,GAGArQ,CAAAA,EAAAqQ,EAAA,GAKAmW,EAAAD,CADAA,EAAAhH,EAAAhlB,KAAA,IACAL,MAAA,CAUA,GAPAssB,EAAAI,GAAAL,CAAAA,EAAA,IAAAppB,MAAA,CAAAopB,EAAA,EAGAF,SAAAM,EAAAJ,EAAAK,EAAAhB,GACAgB,EAAAD,EAAAzsB,MAAA,CAGA8F,IAAAA,EAMA,KAAAqf,EAAAA,QAAAE,EAAAoH,EAAAM,EAAAL,IACAvW,IAGAgW,SAAAM,EAAAM,EAAAL,EAAAM,EAAA3H,EAAAqH,EAAAhB,GACAgB,EAAAD,EAAAzsB,MAAA,MAGY,IAAA8F,IACZqQ,IACAsW,EAAA,IAIAD,CAAAA,CAAA,CAAAlrB,IAAA,CAAA6U,EAGAsW,CAAA,IACAA,CAAA,CAAAC,IAAA,CAAAtH,CAAA,CAAAwH,EAAA,KAEAH,EAAA,CAAArH,CAAA,CAAAwH,EAAA,EACAF,EAAA,EAEA,OAAU,CAAAE,IAAAC,GAAAJ,MAAAA,CAAA,MAAAzoB,IAAA,CAEVooB,EAAAK,MAAAA,CAAA,IAGAD,CAAA,KAAAA,EAAA1B,MAAA,KACA,CAEA,GAAAY,MAAAA,EAAA,CAGA,IAAApqB,EAAA,EAAA0C,EAAAwoB,CAAA,IAA+BxoB,GAAA,GAASA,GAAA,GAAA1C,KAExCqJ,MAAA4hB,EAAA5B,EAAA4B,CAAAA,EAAA9V,CAAA,CAAAnV,EAAAmV,GAAAA,EAAA,KAAA8R,EAAA6D,EAGA,MACAG,EAAA9V,CAAA,CAAAA,EACA8V,EAAAzoB,CAAA,EAAAsoB,EAGA,OAAAG,CACA,CACA,IAgIAtG,EAAA,8BACAC,EAAA,cACAC,EAAA,cACAC,EAAA,qBACAC,EAAA,6BALAG,EAOA,SAAApN,CAAA,CAAA7T,CAAA,CAAAyiB,CAAA,CAAAxO,CAAA,EACA,IAAAkS,EACA1nB,EAAAgkB,EAAAziB,EAAAA,EAAA2iB,OAAA,CAAA7B,EAAA,IAGA,GAAAD,EAAAvhB,IAAA,CAAAb,GACAoV,EAAApV,CAAA,CAAAkpB,MAAAlpB,GAAA,KAAAA,EAAA,WACQ,CACR,IAAAgkB,IAGAhkB,EAAAA,EAAAkkB,OAAA,CAAAjC,EAAA,SAAA4C,CAAA,CAAAsE,CAAA,CAAAC,CAAA,EAEA,OADA1B,EAAA,KAAA0B,CAAAA,EAAAA,EAAAroB,WAAA,OAAAqoB,KAAAA,EAAA,IACA,GAAA5T,GAAAkS,EAAA7C,EAAAsE,CACA,GAEA3T,IACAkS,EAAAlS,EAGAxV,EAAAA,EAAAkkB,OAAA,CAAAhC,EAAA,MAAAgC,OAAA,CAAA/B,EAAA,SAGA5gB,GAAAvB,GAAA,WAAA8hB,UAAA9hB,EAAA0nB,GAKA,GAAA5F,UAAAuC,KAAA,CACA,MAAA3C,MACAb,EAAA,QAAArL,CAAAA,EAAA,SAAAA,EAAA,gBAAAjU,EAIA6T,CAAAA,EAAApV,CAAA,KACA,CAEAoV,EAAAO,CAAA,CAAAP,EAAA3C,CAAA,KACA,EA4LAtB,EAAAkY,aAAA,CAAAlY,EAAAmY,GAAA,YACA,IAAAlU,EAAA,IAAA0M,UAAA,MAEA,OADA1M,EAAApV,CAAA,IAAAoV,CAAAA,EAAApV,CAAA,IACAoV,CACA,EAUAjE,EAAAoY,UAAA,UAAA/X,CAAA,CAAAgE,CAAA,EACA,OAAA2L,QAAA,SAAAW,UAAAtQ,EAAAgE,GACA,EAgBArE,EAAAqY,aAAA,CAAArY,EAAAwV,EAAA,UAAAA,CAAA,CAAApC,CAAA,EACA,IAAA5O,EAAAxD,EAAAtV,EAGA,GAAA8pB,MAAAA,EAKA,OAJApF,SAAAoF,EAAA,EA9gDA,KA+gDApC,MAAAA,EAAAA,EAAA1B,EACAtB,SAAAgD,EAAA,KAEA5d,MAAA,IAAAmb,UAPA,MAOA6E,EAAAvR,IAPA,CAOA3C,CAAA,GAAA8R,GAGA,IAAA5O,CAAAA,EAAAP,IAVA,CAUAO,CAAA,cAIA,GAHAxD,EAAA,EAAAtV,EAAA8Y,EAAA3Z,MAAA,IAAAglB,SAAA,KAAAvO,CAAA,CA/hDA,GA+hDA,EA/hDA,GAkiDA5V,EAAA8Y,CAAA,CAAA9Y,EAAA,MAAyBA,EAAA,MAAaA,GAAA,GAAAsV,KAGtC,OAFAA,EAAA,GAAAA,CAAAA,EAAA,GAEAA,CACA,EAuBAhB,EAAAsY,SAAA,CAAAtY,EAAAmR,GAAA,UAAA9Q,CAAA,CAAAgE,CAAA,EACA,OAAA8M,EAAA,SAAAR,UAAAtQ,EAAAgE,GAAAoN,EAAAC,EACA,EAOA1R,EAAAuY,kBAAA,CAAAvY,EAAAwY,IAAA,UAAAnY,CAAA,CAAAgE,CAAA,EACA,OAAA8M,EAAA,SAAAR,UAAAtQ,EAAAgE,GAAA,IACA,EAkBArE,EAAAyY,eAAA,CAAAzY,EAAAqW,GAAA,UAAArV,CAAA,CAAA0S,CAAA,EACA,IAAAgF,EAAAC,EAAAxsB,EAAA4gB,EAAAkK,EAAA2B,EAAAC,EAAAC,EAAAzY,EACA4D,EAAA,KAKA,GAAAjD,CAHAA,EAAA,IAAA2P,UAAA3P,EAAA,EAGAwD,CAAA,GAAAxD,EAAA+X,SAAA,GACA,MAAAxI,MACAb,EAAA,4BAAA6B,QAAAvQ,IASA,GANA,MAAA0S,GAAAA,CAAAA,EAAA,IAAA/C,UAAA+C,EAAA,EAGAkF,EAAA5X,EAAAM,CAAA,IAGA,CAAA2C,EAAAO,CAAA,GAAAP,EAAAO,CAAA,KAAAP,GAAAA,EAAAO,CAAA,MAAAP,EAAA3C,CAAA,EAAA2C,GAAAA,EAAAO,CAAA,CAAA3Z,MAAA,GAAAmW,EAAAwD,CAAA,GAAAxD,EAAAwD,CAAA,IAKA,OADAnE,EAAA,IAAAsQ,UAAArB,KAAA+G,GAAA,EAAA9E,QAAAtN,GAAA2U,EAAA,EAAAhP,MAAA5I,GAAA,CAAAuQ,QAAAvQ,KACA0S,EAAArT,EAAA2Y,GAAA,CAAAtF,GAAArT,EAKA,GAFAwY,EAAA7X,EAAAnS,CAAA,GAEA6kB,EAAA,CAGA,GAAAA,EAAAlP,CAAA,EAAAkP,EAAAlP,CAAA,KAAAkP,EAAA7kB,CAAA,YAAA8hB,UAAAmH,KAEAa,CAAAA,EAAA,CAAAE,GAAA5U,EAAA8U,SAAA,IAAArF,EAAAqF,SAAA,KAEA9U,CAAAA,EAAAA,EAAA+U,GAAA,CAAAtF,EAAA,CAIA,MAAM,GAAA1S,EAAAM,CAAA,IAAA2C,CAAAA,EAAA3C,CAAA,IAAA2C,EAAA3C,CAAA,KAAA2C,CAAAA,GAAAA,EAAA3C,CAAA,CAEN2C,EAAAO,CAAA,OAAAoU,GAAA3U,EAAAO,CAAA,UAEAP,EAAAO,CAAA,UAAAoU,GAAA3U,EAAAO,CAAA,iBASA,OANAuI,EAAA9I,EAAApV,CAAA,IAAA+a,MAAA5I,GAAA,KAGAiD,EAAA3C,CAAA,KAAAyL,CAAAA,EAAA,EAAAA,CAAAA,EAGA,IAAA4D,UAAAkI,EAAA,EAAA9L,EAAAA,GAEMkF,GAKNlF,CAAAA,EAAAsC,EAAA4C,EArpDA,GAqpDA,IAeA,IAZA2G,GACAF,EAAA,IAAA/H,UAAA,IACAkI,GAAA7X,CAAAA,EAAAnS,CAAA,IACAiqB,EAAAlP,MAAA5I,IAGA8X,EAAA3sB,CADAA,EAAAmjB,KAAA6I,GAAA,EAAA5G,QAAAvQ,GAAA,EACA,EAGAX,EAAA,IAAAsQ,UAAAa,KAGY,CAEZ,GAAAsH,EAAA,CAEA,IAAAzY,CADAA,EAAAA,EAAA4Y,KAAA,CAAAhV,EAAA,EACAO,CAAA,OAEAuI,EACA1M,EAAAmE,CAAA,CAAA3Z,MAAA,CAAAkiB,GAAA1M,CAAAA,EAAAmE,CAAA,CAAA3Z,MAAA,CAAAkiB,CAAAA,EACU4L,GACVtY,CAAAA,EAAAA,EAAA2Y,GAAA,CAAAtF,EAAA,CAEA,CAEA,GAAAvnB,EAAA,CAEA,GAAAA,IADAA,CAAAA,EAAAqjB,EAAArjB,EAAA,IACA,MACA2sB,EAAA3sB,EAAA,CACA,MAIA,GAFAqJ,MADAwL,EAAAA,EAAAiY,KAAA,CAAAP,GACA1X,EAAAM,CAAA,MAEAN,EAAAM,CAAA,IACAwX,EAAAlP,MAAA5I,OACU,CAEV,GAAA7U,GADAA,CAAAA,EAAA,CAAAolB,QAAAvQ,EAAA,EACA,MACA8X,EAAA3sB,EAAA,CACA,CAGA8X,EAAAA,EAAAgV,KAAA,CAAAhV,GAEA8I,EACA9I,EAAAO,CAAA,EAAAP,EAAAO,CAAA,CAAA3Z,MAAA,CAAAkiB,GAAA9I,CAAAA,EAAAO,CAAA,CAAA3Z,MAAA,CAAAkiB,CAAAA,EACQ4L,GACR1U,CAAAA,EAAAA,EAAA+U,GAAA,CAAAtF,EAAA,CAEA,QAEA,EAAArT,GACAwY,GAAAxY,CAAAA,EAAAmR,EAAAL,GAAA,CAAA9Q,EAAA,EAEAqT,EAAArT,EAAA2Y,GAAA,CAAAtF,GAAA3G,EAAAvX,MAAA6K,EAAA4R,EAAAP,EAAAuF,GAAA5W,EACA,EAWAL,EAAAkZ,YAAA,UAAA9F,CAAA,EACA,IAAApS,EAAA,IAAA2P,UAAA,MAGA,OAFAyC,MAAAA,EAAAA,EAAA1B,EACAtB,SAAAgD,EAAA,KACA5d,MAAAwL,EAAAA,EAAAM,CAAA,GAAA8R,EACA,EAOApT,EAAAmZ,SAAA,CAAAnZ,EAAAoZ,EAAA,UAAA/Y,CAAA,CAAAgE,CAAA,EACA,OAAA2L,IAAAA,QAAA,SAAAW,UAAAtQ,EAAAgE,GACA,EAMArE,EAAAqZ,QAAA,YACA,aAAA7U,CAAA,EAQAxE,EAAAsZ,aAAA,CAAAtZ,EAAAtP,EAAA,UAAA2P,CAAA,CAAAgE,CAAA,EACA,OAAA2L,QAAA,SAAAW,UAAAtQ,EAAAgE,IAAA,CACA,EAOArE,EAAAuZ,sBAAA,CAAAvZ,EAAAwZ,GAAA,UAAAnZ,CAAA,CAAAgE,CAAA,EACA,WAAAA,CAAAA,EAAA2L,QAAA,SAAAW,UAAAtQ,EAAAgE,GAAA,GAAAA,IAAAA,CAEA,EAMArE,EAAA+Y,SAAA,YACA,aAAAvU,CAAA,EAAAqL,SAAA,KAAAvO,CAAA,CA1wDA,IA0wDA,KAAAkD,CAAA,CAAA3Z,MAAA,EACA,EAOAmV,EAAAyZ,UAAA,CAAAzZ,EAAAqV,EAAA,UAAAhV,CAAA,CAAAgE,CAAA,EACA,OAAA2L,EAAAA,QAAA,SAAAW,UAAAtQ,EAAAgE,GACA,EAOArE,EAAA0Z,mBAAA,CAAA1Z,EAAA2Z,GAAA,UAAAtZ,CAAA,CAAAgE,CAAA,EACA,YAAAA,CAAAA,EAAA2L,QAAA,SAAAW,UAAAtQ,EAAAgE,GAAA,GAAAA,IAAAA,CACA,EAMArE,EAAA+X,KAAA,YACA,YAAAlpB,CAAA,EAOAmR,EAAA4Z,UAAA,YACA,YAAA/qB,CAAA,EACA,EAMAmR,EAAA6Z,UAAA,YACA,YAAAhrB,CAAA,EACA,EAMAmR,EAAA9P,MAAA,YACA,aAAAsU,CAAA,UAAAA,CAAA,KAwBAxE,EAAA8Z,KAAA,UAAAzZ,CAAA,CAAAgE,CAAA,EACA,IAAAlY,EAAAkgB,EAAA/L,EAAAyZ,EAEAzuB,EAAA2Y,IADA,CACApV,CAAA,CAMA,GAHAwV,EAAAhE,CADAA,EAAA,IAAAsQ,UAAAtQ,EAAAgE,EAAA,EACAxV,CAAA,CAGA,CAAAvD,GAAA,CAAA+Y,EAAA,WAAAsM,UAAAmH,KAGA,GAAAxsB,GAAA+Y,EAEA,OADAhE,EAAAxR,CAAA,EAAAwV,EACAJ,IAZA,CAYA4R,IAAA,CAAAxV,GAGA,IAAA2Z,EAAA/V,IAfA,CAeA3C,CAAA,CAr2DA,GAs2DA2Y,EAAA5Z,EAAAiB,CAAA,CAt2DA,GAu2DA2O,EAAAhM,IAjBA,CAiBAO,CAAA,CACA0L,EAAA7P,EAAAmE,CAAA,CAEA,IAAAwV,GAAA,CAAAC,EAAA,CAGA,IAAAhK,GAAA,CAAAC,EAAA,OAAAD,EAAA5P,CAAAA,EAAAxR,CAAA,EAAAwV,EAAAhE,CAAAA,EAAA,IAAAsQ,UAAAT,EAvBA,KAuBA4H,KAGA,IAAA7H,CAAA,MAAAC,CAAA,IAGA,OAAAA,CAAA,IAAA7P,CAAAA,EAAAxR,CAAA,EAAAwV,EAAAhE,CAAAA,EAAA,IAAAsQ,UAAAV,CAAA,IA7BA,KAgCAyB,GAAAA,EAAA,KAEA,CAOA,GALAsI,EAAAnK,SAAAmK,GACAC,EAAApK,SAAAoK,GACAhK,EAAAA,EAAA/kB,KAAA,GAGAI,EAAA0uB,EAAAC,EAAA,CAaA,IAXAF,CAAAA,EAAAzuB,EAAA,IACAA,EAAA,CAAAA,EACAgV,EAAA2P,IAEAgK,EAAAD,EACA1Z,EAAA4P,GAGA5P,EAAA6V,OAAA,GAGA9R,EAAA/Y,EAAkB+Y,IAAK/D,EAAAvP,IAAA,KACvBuP,EAAA6V,OAAA,EACA,MAKA,IAFA9J,EAAA,CAAA0N,EAAA,CAAAzuB,EAAA2kB,EAAAplB,MAAA,EAAAwZ,CAAAA,EAAA6L,EAAArlB,MAAA,GAAAS,EAAA+Y,EAEA/Y,EAAA+Y,EAAA,EAAsBA,EAAAgI,EAAOhI,IAE7B,GAAA4L,CAAA,CAAA5L,EAAA,EAAA6L,CAAA,CAAA7L,EAAA,EACA0V,EAAA9J,CAAA,CAAA5L,EAAA,CAAA6L,CAAA,CAAA7L,EAAA,CACA,KACA,CAWA,GANA0V,GAAAzZ,CAAAA,EAAA2P,EAAAA,EAAAC,EAAAA,EAAA5P,EAAAD,EAAAxR,CAAA,EAAAwR,EAAAxR,CAAA,EAMAwV,CAJAA,EAAA,CAAAgI,EAAA6D,EAAArlB,MAAA,EAAAsB,CAAAA,EAAA8jB,EAAAplB,MAAA,GAIA,OAAsBwZ,IAAK4L,CAAA,CAAA9jB,IAAA,IAI3B,IAHAkY,EAAA6V,KAAA,EAGW7N,EAAA/gB,GAAM,CAEjB,GAAA2kB,CAAA,GAAA5D,EAAA,CAAA6D,CAAA,CAAA7D,EAAA,EACA,IAAAlgB,EAAAkgB,EAAoBlgB,GAAA,CAAA8jB,CAAA,GAAA9jB,EAAA,CAAe8jB,CAAA,CAAA9jB,EAAA,CAAAkY,GACnC,EAAA4L,CAAA,CAAA9jB,EAAA,CACA8jB,CAAA,CAAA5D,EAAA,EA76DA,IA86DA,CAEA4D,CAAA,CAAA5D,EAAA,EAAA6D,CAAA,CAAA7D,EAAA,CAIA,KAAW4D,GAAAA,CAAA,IAAYA,EAAA0F,MAAA,QAAAsE,UAGvB,KAWAtG,UAAAtT,EAAA4P,EAAAgK,IAPA5Z,EAAAxR,CAAA,CAAA6iB,GAAAA,EAAA,KACArR,EAAAmE,CAAA,EAAAnE,EAAAiB,CAAA,IACAjB,EAMA,EAwBAL,EAAAma,MAAA,CAAAna,EAAAgZ,GAAA,UAAA3Y,CAAA,CAAAgE,CAAA,EACA,IAAA+S,EAAAvoB,QAMA,CAHAwR,EAAA,IAAAsQ,UAAAtQ,EAAAgE,GAGA,IALA,CAKAG,CAAA,EAAAnE,EAAAxR,CAAA,EAAAwR,CAAAA,CAAAA,EAAAmE,CAAA,EAAAnE,EAAAmE,CAAA,MAIM,EAAAA,CAAA,EAAAP,CAAAA,CAAAA,IATN,CASMO,CAAA,EAAAP,IATN,CASMO,CAAA,MAINwN,GAAAA,GAIAnjB,EAAAwR,EAAAxR,CAAA,CACAwR,EAAAxR,CAAA,GACAuoB,EAAAjG,EAnBA,KAmBA9Q,EAAA,KACAA,EAAAxR,CAAA,CAAAA,EACAuoB,EAAAvoB,CAAA,EAAAA,GAEAuoB,EAAAjG,EAvBA,KAuBA9Q,EAAA,EAAA2R,GAMA3R,CAHAA,EAAA4D,IA1BA,CA0BA6V,KAAA,CAAA1C,EAAA6B,KAAA,CAAA5Y,GAAA,EAGAmE,CAAA,KAAAwN,GAAAA,GAAA3R,CAAAA,EAAAxR,CAAA,CAAAoV,IA7BA,CA6BApV,CAAA,EAEAwR,GArBA,IAAAsQ,UAVA,MAMA,IAAAA,UAAAmH,IA0BA,EAuBA9X,EAAAoa,YAAA,CAAApa,EAAAiZ,KAAA,UAAA5Y,CAAA,CAAAgE,CAAA,EACA,IAAAG,EAAAlD,EAAAnV,EAAAkgB,EAAAU,EAAA2G,EAAA2G,EAAA5D,EAAAC,EAAA4D,EAAAC,EAAAC,EAAAC,EAGAxK,EAAAhM,IADA,CACAO,CAAA,CACA0L,EAAA,CAAA7P,EAAA,IAAAsQ,UAAAtQ,EAAAgE,EAAA,EAAAG,CAAA,CAGA,IAAAyL,GAAA,CAAAC,GAAA,CAAAD,CAAA,MAAAC,CAAA,IAmBA,OAhBA,IARA,CAQArhB,CAAA,EAAAwR,EAAAxR,CAAA,EAAAohB,CAAAA,CAAAA,GAAAA,CAAA,KAAAC,CAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAA,KAAAD,CAAA,GAGA5P,EAAAxR,CAAA,EAAAoV,IAXA,CAWApV,CAAA,CAGA,GAAAqhB,GAKA7P,EAAAmE,CAAA,KACAnE,EAAAiB,CAAA,IALAjB,EAAAmE,CAAA,CAAAnE,EAAAiB,CAAA,OANAjB,EAAAmE,CAAA,CAAAnE,EAAAiB,CAAA,CAAAjB,EAAAxR,CAAA,MAeAwR,EAYA,IAAAlU,EATA0jB,SAAA5L,IA3BA,CA2BA3C,CAAA,CAjjEA,IAijEAuO,SAAAxP,EAAAiB,CAAA,CAjjEA,IAkjEAjB,EAAAxR,CAAA,EAAAoV,IA5BA,CA4BApV,CAAA,CACAwrB,CAAAA,EAAApK,EAAAplB,MAAA,EACAyvB,CAAAA,EAAApK,EAAArlB,MAAA,GAGA4vB,CAAAA,EAAAxK,EAAAA,EAAAC,EAAAA,EAAAuK,EAAAtuB,EAAAkuB,EAAAA,EAAAC,EAAAA,EAAAnuB,CAAAA,EAGAA,EAAAkuB,EAAAC,EAAAG,EAAA,GAAiCtuB,IAAKsuB,EAAA1pB,IAAA,KAKtC,IAAA5E,EAAAmuB,EAAkB,EAAAnuB,GAAA,GAAS,CAK3B,IAJAqY,EAAA,EACA+V,EAAArK,CAAA,CAAA/jB,EAAA,CA7jEA,IA8jEAquB,EAAAtK,CAAA,CAAA/jB,EAAA,CA9jEA,IA8jEA,EAEAkgB,EAAAlgB,EAAA4gB,CAAAA,EAAAsN,CAAA,EAA+BhO,EAAAlgB,GAG/BunB,EAAA8G,EAFA/D,CAAAA,EAAAxG,CAAA,GAAAlD,EAAA,CAjkEA,GAikEA,EAEA2J,CADAA,EAAAzG,CAAA,CAAAlD,EAAA,CAlkEA,IAkkEA,GACAwN,EAEA/V,EAAA,CAAAiS,CADAA,EAAA8D,EAAA9D,EAAA,EApkEA,QAokEAgE,CAAA,CAAApO,EAAA,CAAA7H,CAAAA,EAzkEA,KA0kEA,GAAAkP,CAAAA,EArkEA,IAqkEA,GAAA8G,EAAA9D,EACA+D,CAAA,CAAApO,IAAA,CAAAoK,EA3kEA,IA8kEAgE,CAAAA,CAAA,CAAApO,EAAA,CAAA7H,CACA,CAQA,OANAA,EACA,EAAAlD,EAEAmZ,EAAA9E,MAAA,MAGAhC,UAAAtT,EAAAoa,EAAAnZ,EACA,EAOAtB,EAAA0a,OAAA,YACA,IAAAzW,EAAA,IAAA0M,UAAA,MAEA,OADA1M,EAAApV,CAAA,EAAAoV,EAAApV,CAAA,OACAoV,CACA,EAuBAjE,EAAA6V,IAAA,UAAAxV,CAAA,CAAAgE,CAAA,EACA,IAAA/D,EAEAhV,EAAA2Y,IADA,CACApV,CAAA,CAMA,GAHAwV,EAAAhE,CADAA,EAAA,IAAAsQ,UAAAtQ,EAAAgE,EAAA,EACAxV,CAAA,CAGA,CAAAvD,GAAA,CAAA+Y,EAAA,WAAAsM,UAAAmH,KAGA,GAAAxsB,GAAA+Y,EAEA,OADAhE,EAAAxR,CAAA,EAAAwV,EACAJ,IAZA,CAYA6V,KAAA,CAAAzZ,GAGA,IAAA2Z,EAAA/V,IAfA,CAeA3C,CAAA,CA1oEA,GA2oEA2Y,EAAA5Z,EAAAiB,CAAA,CA3oEA,GA4oEA2O,EAAAhM,IAjBA,CAiBAO,CAAA,CACA0L,EAAA7P,EAAAmE,CAAA,CAEA,IAAAwV,GAAA,CAAAC,EAAA,CAGA,IAAAhK,GAAA,CAAAC,EAAA,WAAAS,UAAArlB,EAAA,GAIA,IAAA2kB,CAAA,MAAAC,CAAA,WAAAA,CAAA,IAAA7P,EAAA,IAAAsQ,UAAAV,CAAA,IA3BA,KA2BA3kB,EAAAA,EACA,CAOA,GALA0uB,EAAAnK,SAAAmK,GACAC,EAAApK,SAAAoK,GACAhK,EAAAA,EAAA/kB,KAAA,GAGAI,EAAA0uB,EAAAC,EAAA,CAUA,IATA3uB,EAAA,GACA2uB,EAAAD,EACA1Z,EAAA4P,IAEA5kB,EAAA,CAAAA,EACAgV,EAAA2P,GAGA3P,EAAA6V,OAAA,GACa7qB,IAAKgV,EAAAvP,IAAA,KAClBuP,EAAA6V,OAAA,EACA,CASA,IAPA7qB,CAAAA,EAAA2kB,EAAAplB,MAAA,EACAwZ,CAAAA,EAAA6L,EAAArlB,MAAA,EAGA,GAAAyV,CAAAA,EAAA4P,EAAAA,EAAAD,EAAAA,EAAA3P,EAAA+D,EAAA/Y,CAAAA,EAGAA,EAAA,EAAgB+Y,GAChB/Y,EAAA,CAAA2kB,CAAA,GAAA5L,EAAA,CAAA4L,CAAA,CAAA5L,EAAA,CAAA6L,CAAA,CAAA7L,EAAA,CAAA/Y,CAAAA,EArrEA,KAqrEA,EACA2kB,CAAA,CAAA5L,EAAA,CAAA6V,OAAAjK,CAAA,CAAA5L,EAAA,GAAA4L,CAAA,CAAA5L,EAAA,CAtrEA,KAgsEA,OAPA/Y,IACA2kB,EAAA,CAAA3kB,EAAA,CAAAwC,MAAA,CAAAmiB,GACA,EAAAgK,GAKAtG,UAAAtT,EAAA4P,EAAAgK,EACA,EAkBAja,EAAA2a,SAAA,CAAA3a,EAAA4T,EAAA,UAAAA,CAAA,CAAAR,CAAA,EACA,IAAA5O,EAAAxD,EAAAtV,EAGA,GAAAkoB,MAAAA,GAAAA,CAAA,CAAAA,IAAAA,EAKA,OAJAxD,SAAAwD,EAAA,EA9sEA,KA+sEAR,MAAAA,EAAAA,EAAA1B,EACAtB,SAAAgD,EAAA,KAEA5d,MAAA,IAAAmb,UAPA,MAOAiD,EAAAR,GAGA,IAAA5O,CAAAA,EAAAP,IAVA,CAUAO,CAAA,cAIA,GAFAxD,EAAAtV,GADAA,CAAAA,EAAA8Y,EAAA3Z,MAAA,IACA,EAEAa,EAAA8Y,CAAA,CAAA9Y,EAAA,EAGA,KAAaA,EAAA,MAAaA,GAAA,GAAAsV,KAG1B,IAAAtV,EAAA8Y,CAAA,IAAqB9Y,GAAA,GAASA,GAAA,GAAAsV,KAC9B,CAIA,OAFA4S,GAAA3P,IAvBA,CAuBA3C,CAAA,GAAAN,GAAAA,CAAAA,EAAAiD,IAvBA,CAuBA3C,CAAA,IAEAN,CACA,EAWAhB,EAAA4a,SAAA,UAAA7N,CAAA,EAEA,OADAqD,SAAArD,EAAA,kBAzvEA,kBA0vEA,KAAAkM,KAAA,MAAAlM,EACA,EAcA/M,EAAA6a,UAAA,CAAA7a,EAAA8a,IAAA,YACA,IAAApH,EAAA1S,EAAArS,EAAAosB,EAAAza,EAEAkE,EAAAP,IADA,CACAO,CAAA,CACA3V,EAAAoV,IAFA,CAEApV,CAAA,CACAyS,EAAA2C,IAHA,CAGA3C,CAAA,CACAkU,EAAA/D,EAAA,EACAiH,EAAA,IAAA/H,UAAA,OAGA,GAAA9hB,IAAAA,GAAA,CAAA2V,GAAA,CAAAA,CAAA,IACA,WAAAmM,UAAA,CAAA9hB,GAAAA,EAAA,KAAA2V,GAAAA,CAAA,KAAAsT,IAAAtT,EATA,KASA,KA8BA,GAtBA3V,GAJAA,CAAAA,EAAAygB,KAAAwL,IAAA,EAAAvJ,QAbA,MAaA,GAIA1iB,GAAA,KAEAmS,CAAAA,CADAA,EAAA8O,cAAAtL,EAAA,EACA3Z,MAAA,CAAAyW,CAAAA,EAAA,MAAAN,CAAAA,GAAA,KACAnS,EAAAygB,KAAAwL,IAAA,EAAA9Z,GACAM,EAAAuO,SAAA,CAAAvO,EAAA,MAAAA,CAAAA,EAAA,GAAAA,EAAA,GAGAN,EADAnS,GAAA,IACA,KAAAyS,EAGAN,CADAA,EAAAnS,EAAA2hB,aAAA,IACAtlB,KAAA,GAAA8V,EAAApO,OAAA,SAAA0O,EAGA3S,EAAA,IAAAgiB,UAAA3P,IAEArS,EAAA,IAAAgiB,UAAA9hB,EAAA,IAOAF,EAAA6V,CAAA,IAMA,KAJA3V,CAAAA,EAAAyS,CADAA,EAAA3S,EAAA2S,CAAA,EACAkU,CAAA,EACA,GAAA3mB,CAAAA,EAAA,KAOA,GAHAyR,EAAA3R,EACAA,EAAA+pB,EAAAO,KAAA,CAAA3Y,EAAAuV,IAAA,CAAA1E,EA/CA,KA+CA7Q,EAAAkV,EAAA,KAEA1F,cAAAxP,EAAAkE,CAAA,EAAAtZ,KAAA,GAAA2D,KAAA,CAAAmS,EAAA8O,cAAAnhB,EAAA6V,CAAA,GAAAtZ,KAAA,GAAA2D,GAAA,CAWA,GANAF,EAAA2S,CAAA,CAAAA,GAAA,EAAAzS,EAMAmS,QALAA,CAAAA,EAAAA,EAAA9V,KAAA,CAAA2D,EAAA,EAAAA,EAAA,KAKA,IAAAmS,QAAAA,CAAA,EAgBY,CAIZ,CAAAA,GAAA,EAAAA,EAAA9V,KAAA,KAAA8V,KAAAA,EAAAkD,MAAA,OAGA1O,MAAA7G,EAAAA,EAAA2S,CAAA,CAAAmQ,EAAA,KACAiC,EAAA,CAAA/kB,EAAAsqB,KAAA,CAAAtqB,GAAAyqB,EAAA,CApFA,OAuFA,KACA,CAxBA,IAAA2B,IACAvlB,MAAA8K,EAAAA,EAAAgB,CAAA,CAAAmQ,EAAA,KAEAnR,EAAA2Y,KAAA,CAAA3Y,GAAA8Y,EAAA,CAnEA,OAmEA,CACAzqB,EAAA2R,EACA,KACA,CAGAkV,GAAA,EACA3mB,GAAA,EACAksB,EAAA,CAcA,CACA,CAGA,OAAAvlB,MAAA7G,EAAAA,EAAA2S,CAAA,CAAAmQ,EAAA,EAAAC,EAAAgC,EACA,EAYA1T,EAAAwQ,aAAA,UAAAgF,CAAA,CAAApC,CAAA,EAKA,OAJA,MAAAoC,IACApF,SAAAoF,EAAA,EA/2EA,KAg3EAA,KAEArC,OAAA,KAAAqC,EAAApC,EAAA,EACA,EAeApT,EAAAgb,OAAA,UAAAxF,CAAA,CAAApC,CAAA,EAKA,OAJA,MAAAoC,IACApF,SAAAoF,EAAA,EAp4EA,KAq4EAA,EAAAA,EAAA,KAAAlU,CAAA,IAEA6R,OAAA,KAAAqC,EAAApC,EACA,EA4BApT,EAAAib,QAAA,UAAAzF,CAAA,CAAApC,CAAA,CAAAD,CAAA,EACA,IAAA/iB,EAGA,GAAA+iB,MAAAA,EACAqC,MAAAA,GAAApC,GAAA,iBAAAA,GACAD,EAAAC,EACAA,EAAA,MACQoC,GAAA,iBAAAA,GACRrC,EAAAqC,EACAA,EAAApC,EAAA,MAEAD,EAAAjB,OAEM,oBAAAiB,EACN,MAAA5C,MACAb,EAAA,2BAAAyD,GAKA,GAFA/iB,EAAA6T,IAjBA,CAiBA+W,OAAA,CAAAxF,EAAApC,GAEAnP,IAnBA,CAmBAO,CAAA,EACA,IAAArY,EACA+pB,EAAA9lB,EAAAsV,KAAA,MACAwV,EAAA,CAAA/H,EAAAhB,SAAA,CACAgJ,EAAA,CAAAhI,EAAAf,kBAAA,CACAC,EAAAc,EAAAd,cAAA,KACA+I,EAAAlF,CAAA,IACAmF,EAAAnF,CAAA,IACAoF,EAAArX,IA3BA,CA2BApV,CAAA,GACA0sB,EAAAD,EAAAF,EAAAlwB,KAAA,IAAAkwB,EACArT,EAAAwT,EAAA1wB,MAAA,CAIA,GAFAswB,GAAAhvB,CAAAA,EAAA+uB,EAAAA,EAAAC,EAAAA,EAAAhvB,EAAA4b,GAAA5b,CAAAA,EAEA+uB,EAAA,GAAAnT,EAAA,GAGA,IAFA5b,EAAA4b,EAAAmT,GAAAA,EACAE,EAAAG,EAAAC,MAAA,GAAArvB,GACeA,EAAA4b,EAAS5b,GAAA+uB,EAAAE,GAAA/I,EAAAkJ,EAAAC,MAAA,CAAArvB,EAAA+uB,GACxBC,EAAA,GAAAC,CAAAA,GAAA/I,EAAAkJ,EAAArwB,KAAA,CAAAiB,EAAA,EACAmvB,GAAAF,CAAAA,EAAA,IAAAA,CAAA,CACA,CAEAhrB,EAAAirB,EACAD,EAAAjI,CAAAA,EAAAb,gBAAA,QAAA6I,EAAA,CAAAhI,EAAAZ,iBAAA,EACA8I,EAAAtI,OAAA,eAA+CoI,EAAA,OAAW,KAC1D,KAAAhI,CAAAA,EAAAX,sBAAA,OACA6I,CAAA,EACAD,CACA,CAEA,OAAAjI,EAAAlkB,MAAA,MAAAmB,EAAA+iB,CAAAA,EAAAV,MAAA,KACA,EAcAzS,EAAAyb,UAAA,UAAAC,CAAA,EACA,IAAAhpB,EAAAipB,EAAAC,EAAAC,EAAAva,EAAAwa,EAAA9a,EAAA+a,EAAAC,EAAA5E,EAAAzoB,EAAAE,EAEAohB,EAAAhM,IADA,CACAO,CAAA,CAEA,GAAAkX,MAAAA,GAIA,EAAA1a,CAHAA,EAAA,IAAA2P,UAAA+K,EAAA,EAGA3C,SAAA,IAAA/X,CAAAA,EAAAwD,CAAA,EAAAxD,IAAAA,EAAAnS,CAAA,GAAAmS,EAAAqU,EAAA,CAAA7D,EAAA,EACA,MAAAjB,MACAb,EAAA,YACA1O,CAAAA,EAAA+X,SAAA,wCAAAxH,QAAAvQ,IAIA,IAAAiP,EAAA,WAAAU,UAdA,MAkCA,IAlBAje,EAAA,IAAAie,UAAAa,GACAwK,EAAAL,EAAA,IAAAhL,UAAAa,GACAoK,EAAAG,EAAA,IAAApL,UAAAa,GACA3iB,EAAAihB,cAAAG,GAIA3O,EAAA5O,EAAA4O,CAAA,CAAAzS,EAAAhE,MAAA,CAAAoZ,IAvBA,CAuBA3C,CAAA,GACA5O,EAAA8R,CAAA,IAAAoL,CAAA,EAAAkM,EAAAxa,EAzgFA,EAygFA,IAAAyO,GAAA+L,EAAAA,EAAA,CACAJ,EAAA,CAAAA,GAAA1a,EAAAoX,UAAA,CAAA1lB,GAAA,EAAA4O,EAAA,EAAA5O,EAAAspB,EAAAhb,EAEA8a,EAAAhK,EACAA,EAAA,IACA9Q,EAAA,IAAA2P,UAAA9hB,GAGAktB,EAAAvX,CAAA,MAGA4S,EAAAjG,EAAAnQ,EAAAtO,EAAA,KAEAmpB,GAAAA,CADAA,EAAAF,EAAA9F,IAAA,CAAAuB,EAAA6B,KAAA,CAAA2C,GAAA,EACAxD,UAAA,CAAAsD,IACAC,EAAAC,EACAA,EAAAC,EACAG,EAAAD,EAAAlG,IAAA,CAAAuB,EAAA6B,KAAA,CAAA4C,EAAAG,IACAD,EAAAF,EACAnpB,EAAAsO,EAAA8Y,KAAA,CAAA1C,EAAA6B,KAAA,CAAA4C,EAAAnpB,IACAsO,EAAA6a,EAeA,OAZAA,EAAA1K,EAAAuK,EAAA5B,KAAA,CAAA6B,GAAAC,EAAA,KACAG,EAAAA,EAAAlG,IAAA,CAAAgG,EAAA5C,KAAA,CAAA+C,IACAL,EAAAA,EAAA9F,IAAA,CAAAgG,EAAA5C,KAAA,CAAA2C,IACAG,EAAAltB,CAAA,CAAAmtB,EAAAntB,CAAA,CAAAoV,IAjDA,CAiDApV,CAAA,CACAyS,GAAA,EAGA3S,EAAAwiB,EAAAA,EAAA6K,EAAAJ,EAAAta,EAAAoQ,GAAAoI,KAAA,CArDA,MAqDA3B,GAAA,GAAAC,UAAA,CACAjH,EAAA4K,EAAAJ,EAAAra,EAAAoQ,GAAAoI,KAAA,CAtDA,MAsDA3B,GAAA,KAAA6D,EAAAJ,EAAA,EAAAG,EAAAJ,EAAA,CAEA7J,EAAAgK,EAEAntB,CACA,EAMAqR,EAAA1T,QAAA,YACA,OAAAilB,QAAA,KACA,EAcAvR,EAAAic,WAAA,UAAArI,CAAA,CAAAR,CAAA,EAEA,OADA,MAAAQ,GAAAxD,SAAAwD,EAAA,EA1jFA,KA2jFAT,OAAA,KAAAS,EAAAR,EAAA,EACA,EAcApT,EAAAvU,QAAA,UAAA4Y,CAAA,EACA,IAAAjU,EACA4Q,EAAA,KACAnS,EAAAmS,EAAAnS,CAAA,CACAyS,EAAAN,EAAAM,CAAA,CA0BA,OAvBAA,OAAAA,EACAzS,GACAuB,EAAA,WACAvB,EAAA,GAAAuB,CAAAA,EAAA,IAAAA,CAAA,GAEAA,EAAA,OAGAiU,MAAAA,EACAjU,EAAAkR,GAAAqQ,GAAArQ,GAAAsQ,EACApB,cAAAV,cAAA9O,EAAAwD,CAAA,EAAAlD,GACAmP,aAAAX,cAAA9O,EAAAwD,CAAA,EAAAlD,EAAA,KACQ+C,KAAAA,GAAAqO,EAERtiB,EAAAqgB,aAAAX,cAAA9O,CADAA,EAAAxL,MAAA,IAAAmb,UAAA3P,GAAAyQ,EAAAnQ,EAAA,EAAAoQ,EAAA,EACAlN,CAAA,EAAAxD,EAAAM,CAAA,OAEA8O,SAAA/L,EAAA,EAAAP,EAAAjZ,MAAA,SACAuF,EAAAghB,EAAAX,aAAAX,cAAA9O,EAAAwD,CAAA,EAAAlD,EAAA,QAAA+C,EAAAxV,EAAA,KAGAA,EAAA,GAAAmS,EAAAwD,CAAA,KAAApU,CAAAA,EAAA,IAAAA,CAAA,GAGAA,CACA,EAOA4P,EAAAuR,OAAA,CAAAvR,EAAA1O,MAAA,YACA,OAAAigB,QAAA,KACA,EAGAvR,EAAA8S,YAAA,IAEA9S,CAAA,CAAAc,OAAAob,WAAA,cAGAlc,CAAA,CAAAc,OAAAqb,GAAA,gCAAAnc,EAAAuR,OAAA,CAEA,MAAAX,GAAAD,UAAAre,GAAA,CAAAse,GAEAD,SACA,GAuIAyL,CAAAA,EAAAC,CAAA,CAAe1L,sCCx0FA,SAAA2L,gBAAAC,CAAA,CAAAC,CAAA,EAEf,IAAAR,EAAAS,iBAAAF,GACAG,EAAAD,iBAAAD,GAGAxE,EAAAgE,EAAA3a,GAAA,GACA4W,EAAAyE,EAAArb,GAAA,GAGA1S,EAAAguB,gBAAAX,EAAAU,UACA,IAAA/tB,EAAAA,EAGAqpB,GAAAC,EACA0E,gBAAA3E,EAAAtS,KAAA,MAAAuS,EAAAvS,KAAA,OACIsS,GAAAC,EACJD,EAAA,KAGA,CACA,wCAKO,IAAAhI,QAAA,CAAAuM,EAAAC,EAAAI,KAEPC,oBAAAD,GAIA,IAAA1X,EAAAoX,gBAAAC,EAAAC,GAEA,OAAAM,CAAA,CAAAF,EAAA,CAAAhZ,QAAA,CAAAsB,EACA,CAsBAoX,CAAAA,gBAAAS,QAAA,CAlCO,GACP,iBAAArxB,GAAA,SAAAgE,IAAA,CAAAhE,IAAAsxB,EAAAttB,IAAA,CAAAhE,GAkCA4wB,gBAAAtM,OAAA,CAAAA,QACAsM,gBAAAW,SAAA,CAtBO,CAAAvxB,EAAAiD,KAEP,IAAA+kB,EAAA/kB,EAAAuuB,KAAA,gBACAhc,EAAAwS,EAAAA,CAAA,QAGA,GAAAxS,MAAAA,GAAAA,MAAAA,EAAA,OAAA8O,QAAAtkB,EAAAiD,EAAAuS,GAGA,IAAAqb,EAAAC,EAAAW,EAAA,CAAAV,iBAAA/wB,GACA,CAAA0xB,EAAAC,EAAAC,EAAA,CAAAb,iBAAA9tB,UACA,IAAA4uB,eAAAhB,EAAAa,KACAlc,MAAAA,EACAyb,gBAAA,CAAAH,EAAAW,EAAA,EAAAE,EAAAC,EAAA,KAEA,IAAAC,eAAAf,EAAAa,IACAE,eAAAJ,EAAAG,IAAA,EACA,EAOA,IAAAN,EACA,6IAEAP,iBAAA,IACA,oBAAA/wB,EACA,oDAEA,IAAAwxB,EAAAxxB,EAAAwxB,KAAA,CAAAF,GACA,IAAAE,EACA,mDAA2DxxB,EAAE,cAG7D,OADAwxB,EAAAM,KAAA,GACAN,CACA,EAEAO,WAAA,GAAA5uB,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,EAEA6uB,SAAA,IACA,IAAA1c,EAAAnR,SAAAnE,EAAA,IACA,OAAAqsB,MAAA/W,GAAAtV,EAAAsV,CACA,EAEA2c,UAAA,CAAAryB,EAAA+Y,IACA,OAAA/Y,GAAA,OAAA+Y,EAAA,CAAAmC,OAAAlb,GAAAkb,OAAAnC,GAAA,EAAA/Y,EAAA+Y,EAAA,CAEAkZ,eAAA,CAAAjyB,EAAA+Y,KACA,GAAAoZ,WAAAnyB,IAAAmyB,WAAApZ,GAAA,SACA,IAAAuZ,EAAAC,EAAA,CAAAF,UAAAD,SAAApyB,GAAAoyB,SAAArZ,WACA,EAAAwZ,EAAA,EACAD,EAAAC,EAAA,GACA,CACA,EAEAlB,gBAAA,CAAArxB,EAAA+Y,KACA,QAAAlY,EAAA,EAAkBA,EAAAmjB,KAAAgB,GAAA,CAAAhlB,EAAAT,MAAA,CAAAwZ,EAAAxZ,MAAA,EAAkCsB,IAAA,CACpD,IAAAwC,EAAA4uB,eAAAjyB,CAAA,CAAAa,EAAA,IAAAkY,CAAA,CAAAlY,EAAA,KACA,GAAAwC,IAAAA,EAAA,OAAAA,CACA,CACA,QACA,EAEAmuB,EAAA,CACA,QACA,WACA,QACA,YACA,UAGAgB,EAAA7rB,OAAAU,IAAA,CAAAmqB,GAEAD,oBAAA,IACA,oBAAA3b,EACA,gBACA,kDAAwD,OAAAA,EAAU,GAGlE,GAAA4c,KAAAA,EAAAlrB,OAAA,CAAAsO,GACA,YACA,qCAA2C4c,EAAAC,IAAA,MAA2B,EAGtE","sources":["webpack://_N_E/./node_modules/@starcoin/starcoin/node_modules/ethereumjs-util/index.js","webpack://_N_E/./node_modules/@starcoin/starcoin/node_modules/keccak/js.js","webpack://_N_E/./node_modules/@starcoin/starcoin/node_modules/keccak/lib/api/index.js","webpack://_N_E/./node_modules/@starcoin/starcoin/node_modules/keccak/lib/api/keccak.js","webpack://_N_E/./node_modules/@starcoin/starcoin/node_modules/keccak/lib/api/shake.js","webpack://_N_E/./node_modules/@starcoin/starcoin/node_modules/keccak/lib/keccak-state-unroll.js","webpack://_N_E/./node_modules/@starcoin/starcoin/node_modules/keccak/lib/keccak.js","webpack://_N_E/./node_modules/@starcoin/starcoin/node_modules/ws/browser.js","webpack://_N_E/./node_modules/@starcoin/starmask-onboarding/dist/starmask-onboarding.es.js","webpack://_N_E/./node_modules/bech32/dist/index.js","webpack://_N_E/./node_modules/bip66/index.js","webpack://_N_E/./node_modules/is-alphabetical/index.js","webpack://_N_E/./node_modules/is-alphanumerical/index.js","webpack://_N_E/./node_modules/is-decimal/index.js","webpack://_N_E/./node_modules/is-hexadecimal/index.js","webpack://_N_E/./node_modules/is-whitespace-character/index.js","webpack://_N_E/./node_modules/secp256k1/elliptic.js","webpack://_N_E/./node_modules/secp256k1/lib/assert.js","webpack://_N_E/./node_modules/secp256k1/lib/der.js","webpack://_N_E/./node_modules/secp256k1/lib/elliptic/index.js","webpack://_N_E/./node_modules/secp256k1/lib/index.js","webpack://_N_E/./node_modules/bignumber.js/bignumber.mjs","webpack://_N_E/./node_modules/compare-versions/index.mjs","webpack://_N_E/<anon>"],"sourcesContent":["const createKeccakHash = require('keccak')\nconst secp256k1 = require('secp256k1')\nconst assert = require('assert')\nconst rlp = require('rlp')\nconst BN = require('bn.js')\nconst createHash = require('create-hash')\n\n/**\n * the max integer that this VM can handle (a ```BN```)\n * @var {BN} MAX_INTEGER\n */\nexports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)\n\n/**\n * 2^256 (a ```BN```)\n * @var {BN} TWO_POW256\n */\nexports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16)\n\n/**\n * SHA3-256 hash of null (a ```String```)\n * @var {String} SHA3_NULL_S\n */\nexports.SHA3_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n\n/**\n * SHA3-256 hash of null (a ```Buffer```)\n * @var {Buffer} SHA3_NULL\n */\nexports.SHA3_NULL = Buffer.from(exports.SHA3_NULL_S, 'hex')\n\n/**\n * SHA3-256 of an RLP of an empty array (a ```String```)\n * @var {String} SHA3_RLP_ARRAY_S\n */\nexports.SHA3_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'\n\n/**\n * SHA3-256 of an RLP of an empty array (a ```Buffer```)\n * @var {Buffer} SHA3_RLP_ARRAY\n */\nexports.SHA3_RLP_ARRAY = Buffer.from(exports.SHA3_RLP_ARRAY_S, 'hex')\n\n/**\n * SHA3-256 hash of the RLP of null  (a ```String```)\n * @var {String} SHA3_RLP_S\n */\nexports.SHA3_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'\n\n/**\n * SHA3-256 hash of the RLP of null (a ```Buffer```)\n * @var {Buffer} SHA3_RLP\n */\nexports.SHA3_RLP = Buffer.from(exports.SHA3_RLP_S, 'hex')\n\n/**\n * [`BN`](https://github.com/indutny/bn.js)\n * @var {Function}\n */\nexports.BN = BN\n\n/**\n * [`rlp`](https://github.com/ethereumjs/rlp)\n * @var {Function}\n */\nexports.rlp = rlp\n\n/**\n * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)\n * @var {Object}\n */\nexports.secp256k1 = secp256k1\n\n/**\n * Returns a buffer filled with 0s\n * @method zeros\n * @param {Number} bytes  the number of bytes the buffer should be\n * @return {Buffer}\n */\nexports.zeros = function (bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0)\n}\n\n/**\n * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @method lsetLength\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @param {Boolean} [right=false] whether to start padding form the left or right\n * @return {Buffer|Array}\n */\nexports.setLengthLeft = exports.setLength = function (msg, length, right) {\n  var buf = exports.zeros(length)\n  msg = exports.toBuffer(msg)\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf)\n      return buf\n    }\n    return msg.slice(0, length)\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length)\n      return buf\n    }\n    return msg.slice(-length)\n  }\n}\n\n/**\n * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @return {Buffer|Array}\n */\nexports.setLengthRight = function (msg, length) {\n  return exports.setLength(msg, length, true)\n}\n\n/**\n * Trims leading zeros from a `Buffer` or an `Array`\n * @param {Buffer|Array|String} a\n * @return {Buffer|Array|String}\n */\nexports.unpad = exports.stripZeros = function (a) {\n  a = exports.stripHexPrefix(a)\n  var first = a[0]\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1)\n    first = a[0]\n  }\n  return a\n}\n/**\n * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\n * @param {*} v the value\n */\nexports.toBuffer = function (v) {\n  if (!Buffer.isBuffer(v)) {\n    if (Array.isArray(v)) {\n      v = Buffer.from(v)\n    } else if (typeof v === 'string') {\n      if (exports.isHexPrefixed(v)) {\n        v = Buffer.from(exports.padToEven(exports.stripHexPrefix(v)), 'hex')\n      } else {\n        v = Buffer.from(v)\n      }\n    } else if (typeof v === 'number') {\n      v = exports.intToBuffer(v)\n    } else if (v === null || v === undefined) {\n      v = Buffer.allocUnsafe(0)\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = Buffer.from(v.toArray())\n    } else {\n      throw new Error('invalid type')\n    }\n  }\n  return v\n}\n\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nexports.intToHex = function (i) {\n  assert(i % 1 === 0, 'number is not a integer')\n  assert(i >= 0, 'number must be positive')\n  var hex = i.toString(16)\n  if (hex.length % 2) {\n    hex = '0' + hex\n  }\n\n  return '0x' + hex\n}\n\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nexports.intToBuffer = function (i) {\n  var hex = exports.intToHex(i)\n  return Buffer.from(hex.slice(2), 'hex')\n}\n\n/**\n * Converts a `Buffer` to a `Number`\n * @param {Buffer} buf\n * @return {Number}\n * @throws If the input number exceeds 53 bits.\n */\nexports.bufferToInt = function (buf) {\n  return new BN(exports.toBuffer(buf)).toNumber()\n}\n\n/**\n * Converts a `Buffer` into a hex `String`\n * @param {Buffer} buf\n * @return {String}\n */\nexports.bufferToHex = function (buf) {\n  buf = exports.toBuffer(buf)\n  return '0x' + buf.toString('hex')\n}\n\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param {Buffer} num\n * @return {BN}\n */\nexports.fromSigned = function (num) {\n  return new BN(num).fromTwos(256)\n}\n\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param {BN} num\n * @return {Buffer}\n */\nexports.toUnsigned = function (num) {\n  return Buffer.from(num.toTwos(256).toArray())\n}\n\n/**\n * Creates SHA-3 hash of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Number} [bits=256] the SHA width\n * @return {Buffer}\n */\nexports.sha3 = function (a, bits) {\n  a = exports.toBuffer(a)\n  if (!bits) bits = 256\n\n  return createKeccakHash('keccak' + bits).update(a).digest()\n}\n\n/**\n * Creates SHA256 hash of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\nexports.sha256 = function (a) {\n  a = exports.toBuffer(a)\n  return createHash('sha256').update(a).digest()\n}\n\n/**\n * Creates RIPEMD160 hash of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Boolean} padded whether it should be padded to 256 bits or not\n * @return {Buffer}\n */\nexports.ripemd160 = function (a, padded) {\n  a = exports.toBuffer(a)\n  var hash = createHash('rmd160').update(a).digest()\n  if (padded === true) {\n    return exports.setLength(hash, 32)\n  } else {\n    return hash\n  }\n}\n\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\nexports.rlphash = function (a) {\n  return exports.sha3(rlp.encode(a))\n}\n\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n * @param {Buffer} privateKey\n * @return {Boolean}\n */\nexports.isValidPrivate = function (privateKey) {\n  return secp256k1.privateKeyVerify(privateKey)\n}\n\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param {Boolean} [sanitize=false] Accept public keys in other formats\n * @return {Boolean}\n */\nexports.isValidPublic = function (publicKey, sanitize) {\n  if (publicKey.length === 64) {\n    // Convert to SEC1 for secp256k1\n    return secp256k1.publicKeyVerify(Buffer.concat([ Buffer.from([4]), publicKey ]))\n  }\n\n  if (!sanitize) {\n    return false\n  }\n\n  return secp256k1.publicKeyVerify(publicKey)\n}\n\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param {Boolean} [sanitize=false] Accept public keys in other formats\n * @return {Buffer}\n */\nexports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {\n  pubKey = exports.toBuffer(pubKey)\n  if (sanitize && (pubKey.length !== 64)) {\n    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1)\n  }\n  assert(pubKey.length === 64)\n  // Only take the lower 160bits of the hash\n  return exports.sha3(pubKey).slice(-20)\n}\n\n/**\n * Returns the ethereum public key of a given private key\n * @param {Buffer} privateKey A private key must be 256 bits wide\n * @return {Buffer}\n */\nvar privateToPublic = exports.privateToPublic = function (privateKey) {\n  privateKey = exports.toBuffer(privateKey)\n  // skip the type flag and use the X, Y points\n  return secp256k1.publicKeyCreate(privateKey, false).slice(1)\n}\n\n/**\n * Converts a public key to the Ethereum format.\n * @param {Buffer} publicKey\n * @return {Buffer}\n */\nexports.importPublic = function (publicKey) {\n  publicKey = exports.toBuffer(publicKey)\n  if (publicKey.length !== 64) {\n    publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1)\n  }\n  return publicKey\n}\n\n/**\n * ECDSA sign\n * @param {Buffer} msgHash\n * @param {Buffer} privateKey\n * @return {Object}\n */\nexports.ecsign = function (msgHash, privateKey) {\n  var sig = secp256k1.sign(msgHash, privateKey)\n\n  var ret = {}\n  ret.r = sig.signature.slice(0, 32)\n  ret.s = sig.signature.slice(32, 64)\n  ret.v = sig.recovery + 27\n  return ret\n}\n\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n * @param message\n * @returns {Buffer} hash\n */\nexports.hashPersonalMessage = function (message) {\n  var prefix = exports.toBuffer('\\u0019Ethereum Signed Message:\\n' + message.length.toString())\n  return exports.sha3(Buffer.concat([prefix, message]))\n}\n\n/**\n * ECDSA public key recovery from signature\n * @param {Buffer} msgHash\n * @param {Number} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @return {Buffer} publicKey\n */\nexports.ecrecover = function (msgHash, v, r, s) {\n  var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64)\n  var recovery = v - 27\n  if (recovery !== 0 && recovery !== 1) {\n    throw new Error('Invalid signature v value')\n  }\n  var senderPubKey = secp256k1.recover(msgHash, signature, recovery)\n  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1)\n}\n\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method\n * @param {Number} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @return {String} sig\n */\nexports.toRpcSig = function (v, r, s) {\n  // NOTE: with potential introduction of chainId this might need to be updated\n  if (v !== 27 && v !== 28) {\n    throw new Error('Invalid recovery id')\n  }\n\n  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n  // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053\n  return exports.bufferToHex(Buffer.concat([\n    exports.setLengthLeft(r, 32),\n    exports.setLengthLeft(s, 32),\n    exports.toBuffer(v - 27)\n  ]))\n}\n\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n * @param {String} sig\n * @return {Object}\n */\nexports.fromRpcSig = function (sig) {\n  sig = exports.toBuffer(sig)\n\n  // NOTE: with potential introduction of chainId this might need to be updated\n  if (sig.length !== 65) {\n    throw new Error('Invalid signature length')\n  }\n\n  var v = sig[64]\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v += 27\n  }\n\n  return {\n    v: v,\n    r: sig.slice(0, 32),\n    s: sig.slice(32, 64)\n  }\n}\n\n/**\n * Returns the ethereum address of a given private key\n * @param {Buffer} privateKey A private key must be 256 bits wide\n * @return {Buffer}\n */\nexports.privateToAddress = function (privateKey) {\n  return exports.publicToAddress(privateToPublic(privateKey))\n}\n\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too\n * @param {String} address\n * @return {Boolean}\n */\nexports.isValidAddress = function (address) {\n  return /^0x[0-9a-fA-F]{40}$/i.test(address)\n}\n\n/**\n * Returns a checksummed address\n * @param {String} address\n * @return {String}\n */\nexports.toChecksumAddress = function (address) {\n  address = exports.stripHexPrefix(address).toLowerCase()\n  var hash = exports.sha3(address).toString('hex')\n  var ret = '0x'\n\n  for (var i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase()\n    } else {\n      ret += address[i]\n    }\n  }\n\n  return ret\n}\n\n/**\n * Checks if the address is a valid checksummed address\n * @param {Buffer} address\n * @return {Boolean}\n */\nexports.isValidChecksumAddress = function (address) {\n  return exports.isValidAddress(address) && (exports.toChecksumAddress(address) === address)\n}\n\n/**\n * Generates an address of a newly created contract\n * @param {Buffer} from the address which is creating this new address\n * @param {Buffer} nonce the nonce of the from account\n * @return {Buffer}\n */\nexports.generateAddress = function (from, nonce) {\n  from = exports.toBuffer(from)\n  nonce = new BN(nonce)\n\n  if (nonce.isZero()) {\n    // in RLP we want to encode null in the case of zero nonce\n    // read the RLP documentation for an answer if you dare\n    nonce = null\n  } else {\n    nonce = Buffer.from(nonce.toArray())\n  }\n\n  // Only take the lower 160bits of the hash\n  return exports.rlphash([from, nonce]).slice(-20)\n}\n\n/**\n * Returns true if the supplied address belongs to a precompiled account\n * @param {Buffer|String} address\n * @return {Boolean}\n */\nexports.isPrecompiled = function (address) {\n  var a = exports.unpad(address)\n  return a.length === 1 && a[0] > 0 && a[0] < 5\n}\n\n/**\n * Returns a `Boolean` on whether or not the a `String` starts with \"0x\"\n * @param {String} str\n * @return {Boolean}\n */\nexports.isHexPrefixed = function (str) {\n  return str.slice(0, 2) === '0x'\n}\n\n/**\n * Removes \"0x\" from a given `String`\n * @param {String} str\n * @return {String}\n */\nexports.stripHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str\n  }\n  return exports.isHexPrefixed(str) ? str.slice(2) : str\n}\n\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\"\n * @param {String} str\n * @return {String}\n */\nexports.addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str\n  }\n\n  return exports.isHexPrefixed(str) ? str : '0x' + str\n}\n\n/**\n * Pads a `String` to have an even length\n * @param {String} a\n * @return {String}\n */\nexports.padToEven = function (a) {\n  if (a.length % 2) a = '0' + a\n  return a\n}\n\n/**\n * Validate ECDSA signature\n * @method isValidSignature\n * @param {Buffer} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @param {Boolean} [homestead=true]\n * @return {Boolean}\n */\n\nconst SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16)\nconst SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16)\n\nexports.isValidSignature = function (v, r, s, homestead) {\n  if (r.length !== 32 || s.length !== 32) {\n    return false\n  }\n\n  if (v !== 27 && v !== 28) {\n    return false\n  }\n\n  r = new BN(r)\n  s = new BN(s)\n\n  if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) {\n    return false\n  }\n\n  if ((homestead === false) && (new BN(s).cmp(SECP256K1_N_DIV_2) === 1)) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Converts a `Buffer` or `Array` to JSON\n * @param {Buffer|Array} ba\n * @return {Array|String|null}\n */\nexports.baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return '0x' + ba.toString('hex')\n  } else if (ba instanceof Array) {\n    var array = []\n    for (var i = 0; i < ba.length; i++) {\n      array.push(exports.baToJSON(ba[i]))\n    }\n    return array\n  }\n}\n\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @param {Object} self the `Object` to define properties on\n * @param {Array} fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param {*} data data to be validated against the definitions\n */\nexports.defineProperties = function (self, fields, data) {\n  self.raw = []\n  self._fields = []\n\n  // attach the `toJSON`\n  self.toJSON = function (label) {\n    if (label) {\n      var obj = {}\n      self._fields.forEach(function (field) {\n        obj[field] = '0x' + self[field].toString('hex')\n      })\n      return obj\n    }\n    return exports.baToJSON(this.raw)\n  }\n\n  self.serialize = function serialize () {\n    return rlp.encode(self.raw)\n  }\n\n  fields.forEach(function (field, i) {\n    self._fields.push(field.name)\n    function getter () {\n      return self.raw[i]\n    }\n    function setter (v) {\n      v = exports.toBuffer(v)\n\n      if (v.toString('hex') === '00' && !field.allowZero) {\n        v = Buffer.allocUnsafe(0)\n      }\n\n      if (field.allowLess && field.length) {\n        v = exports.stripZeros(v)\n        assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes')\n      } else if (!(field.allowZero && v.length === 0) && field.length) {\n        assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length)\n      }\n\n      self.raw[i] = v\n    }\n\n    Object.defineProperty(self, field.name, {\n      enumerable: true,\n      configurable: true,\n      get: getter,\n      set: setter\n    })\n\n    if (field.default) {\n      self[field.name] = field.default\n    }\n\n    // attach alias\n    if (field.alias) {\n      Object.defineProperty(self, field.alias, {\n        enumerable: false,\n        configurable: true,\n        set: setter,\n        get: getter\n      })\n    }\n  })\n\n  // if the constuctor is passed data\n  if (data) {\n    if (typeof data === 'string') {\n      data = Buffer.from(exports.stripHexPrefix(data), 'hex')\n    }\n\n    if (Buffer.isBuffer(data)) {\n      data = rlp.decode(data)\n    }\n\n    if (Array.isArray(data)) {\n      if (data.length > self._fields.length) {\n        throw (new Error('wrong number of fields in data'))\n      }\n\n      // make sure all the items are buffers\n      data.forEach(function (d, i) {\n        self[self._fields[i]] = exports.toBuffer(d)\n      })\n    } else if (typeof data === 'object') {\n      const keys = Object.keys(data)\n      fields.forEach(function (field) {\n        if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name]\n        if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias]\n      })\n    } else {\n      throw new Error('invalid data')\n    }\n  }\n}\n","'use strict'\nmodule.exports = require('./lib/api')(require('./lib/keccak'))\n","'use strict'\nvar createKeccak = require('./keccak')\nvar createShake = require('./shake')\n\nmodule.exports = function (KeccakState) {\n  var Keccak = createKeccak(KeccakState)\n  var Shake = createShake(KeccakState)\n\n  return function (algorithm, options) {\n    var hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm\n    switch (hash) {\n      case 'keccak224': return new Keccak(1152, 448, null, 224, options)\n      case 'keccak256': return new Keccak(1088, 512, null, 256, options)\n      case 'keccak384': return new Keccak(832, 768, null, 384, options)\n      case 'keccak512': return new Keccak(576, 1024, null, 512, options)\n\n      case 'sha3-224': return new Keccak(1152, 448, 0x06, 224, options)\n      case 'sha3-256': return new Keccak(1088, 512, 0x06, 256, options)\n      case 'sha3-384': return new Keccak(832, 768, 0x06, 384, options)\n      case 'sha3-512': return new Keccak(576, 1024, 0x06, 512, options)\n\n      case 'shake128': return new Shake(1344, 256, 0x1f, options)\n      case 'shake256': return new Shake(1088, 512, 0x1f, options)\n\n      default: throw new Error('Invald algorithm: ' + algorithm)\n    }\n  }\n}\n","'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar Transform = require('stream').Transform\nvar inherits = require('inherits')\n\nmodule.exports = function (KeccakState) {\n  function Keccak (rate, capacity, delimitedSuffix, hashBitLength, options) {\n    Transform.call(this, options)\n\n    this._rate = rate\n    this._capacity = capacity\n    this._delimitedSuffix = delimitedSuffix\n    this._hashBitLength = hashBitLength\n    this._options = options\n\n    this._state = new KeccakState()\n    this._state.initialize(rate, capacity)\n    this._finalized = false\n  }\n\n  inherits(Keccak, Transform)\n\n  Keccak.prototype._transform = function (chunk, encoding, callback) {\n    var error = null\n    try {\n      this.update(chunk, encoding)\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  Keccak.prototype._flush = function (callback) {\n    var error = null\n    try {\n      this.push(this.digest())\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  Keccak.prototype.update = function (data, encoding) {\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')\n    if (this._finalized) throw new Error('Digest already called')\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\n\n    this._state.absorb(data)\n\n    return this\n  }\n\n  Keccak.prototype.digest = function (encoding) {\n    if (this._finalized) throw new Error('Digest already called')\n    this._finalized = true\n\n    if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix)\n    var digest = this._state.squeeze(this._hashBitLength / 8)\n    if (encoding !== undefined) digest = digest.toString(encoding)\n\n    this._resetState()\n\n    return digest\n  }\n\n  // remove result from memory\n  Keccak.prototype._resetState = function () {\n    this._state.initialize(this._rate, this._capacity)\n    return this\n  }\n\n  // because sometimes we need hash right now and little later\n  Keccak.prototype._clone = function () {\n    var clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options)\n    this._state.copy(clone._state)\n    clone._finalized = this._finalized\n\n    return clone\n  }\n\n  return Keccak\n}\n","'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar Transform = require('stream').Transform\nvar inherits = require('inherits')\n\nmodule.exports = function (KeccakState) {\n  function Shake (rate, capacity, delimitedSuffix, options) {\n    Transform.call(this, options)\n\n    this._rate = rate\n    this._capacity = capacity\n    this._delimitedSuffix = delimitedSuffix\n    this._options = options\n\n    this._state = new KeccakState()\n    this._state.initialize(rate, capacity)\n    this._finalized = false\n  }\n\n  inherits(Shake, Transform)\n\n  Shake.prototype._transform = function (chunk, encoding, callback) {\n    var error = null\n    try {\n      this.update(chunk, encoding)\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  Shake.prototype._flush = function () {}\n\n  Shake.prototype._read = function (size) {\n    this.push(this.squeeze(size))\n  }\n\n  Shake.prototype.update = function (data, encoding) {\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')\n    if (this._finalized) throw new Error('Squeeze already called')\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\n\n    this._state.absorb(data)\n\n    return this\n  }\n\n  Shake.prototype.squeeze = function (dataByteLength, encoding) {\n    if (!this._finalized) {\n      this._finalized = true\n      this._state.absorbLastFewBits(this._delimitedSuffix)\n    }\n\n    var data = this._state.squeeze(dataByteLength)\n    if (encoding !== undefined) data = data.toString(encoding)\n\n    return data\n  }\n\n  Shake.prototype._resetState = function () {\n    this._state.initialize(this._rate, this._capacity)\n    return this\n  }\n\n  Shake.prototype._clone = function () {\n    var clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options)\n    this._state.copy(clone._state)\n    clone._finalized = this._finalized\n\n    return clone\n  }\n\n  return Shake\n}\n","'use strict'\nvar P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648]\n\nexports.p1600 = function (s) {\n  for (var round = 0; round < 24; ++round) {\n    // theta\n    var lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40]\n    var hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41]\n    var lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42]\n    var hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43]\n    var lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44]\n    var hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45]\n    var lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46]\n    var hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47]\n    var lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48]\n    var hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49]\n\n    var lo = lo4 ^ (lo1 << 1 | hi1 >>> 31)\n    var hi = hi4 ^ (hi1 << 1 | lo1 >>> 31)\n    var t1slo0 = s[0] ^ lo\n    var t1shi0 = s[1] ^ hi\n    var t1slo5 = s[10] ^ lo\n    var t1shi5 = s[11] ^ hi\n    var t1slo10 = s[20] ^ lo\n    var t1shi10 = s[21] ^ hi\n    var t1slo15 = s[30] ^ lo\n    var t1shi15 = s[31] ^ hi\n    var t1slo20 = s[40] ^ lo\n    var t1shi20 = s[41] ^ hi\n    lo = lo0 ^ (lo2 << 1 | hi2 >>> 31)\n    hi = hi0 ^ (hi2 << 1 | lo2 >>> 31)\n    var t1slo1 = s[2] ^ lo\n    var t1shi1 = s[3] ^ hi\n    var t1slo6 = s[12] ^ lo\n    var t1shi6 = s[13] ^ hi\n    var t1slo11 = s[22] ^ lo\n    var t1shi11 = s[23] ^ hi\n    var t1slo16 = s[32] ^ lo\n    var t1shi16 = s[33] ^ hi\n    var t1slo21 = s[42] ^ lo\n    var t1shi21 = s[43] ^ hi\n    lo = lo1 ^ (lo3 << 1 | hi3 >>> 31)\n    hi = hi1 ^ (hi3 << 1 | lo3 >>> 31)\n    var t1slo2 = s[4] ^ lo\n    var t1shi2 = s[5] ^ hi\n    var t1slo7 = s[14] ^ lo\n    var t1shi7 = s[15] ^ hi\n    var t1slo12 = s[24] ^ lo\n    var t1shi12 = s[25] ^ hi\n    var t1slo17 = s[34] ^ lo\n    var t1shi17 = s[35] ^ hi\n    var t1slo22 = s[44] ^ lo\n    var t1shi22 = s[45] ^ hi\n    lo = lo2 ^ (lo4 << 1 | hi4 >>> 31)\n    hi = hi2 ^ (hi4 << 1 | lo4 >>> 31)\n    var t1slo3 = s[6] ^ lo\n    var t1shi3 = s[7] ^ hi\n    var t1slo8 = s[16] ^ lo\n    var t1shi8 = s[17] ^ hi\n    var t1slo13 = s[26] ^ lo\n    var t1shi13 = s[27] ^ hi\n    var t1slo18 = s[36] ^ lo\n    var t1shi18 = s[37] ^ hi\n    var t1slo23 = s[46] ^ lo\n    var t1shi23 = s[47] ^ hi\n    lo = lo3 ^ (lo0 << 1 | hi0 >>> 31)\n    hi = hi3 ^ (hi0 << 1 | lo0 >>> 31)\n    var t1slo4 = s[8] ^ lo\n    var t1shi4 = s[9] ^ hi\n    var t1slo9 = s[18] ^ lo\n    var t1shi9 = s[19] ^ hi\n    var t1slo14 = s[28] ^ lo\n    var t1shi14 = s[29] ^ hi\n    var t1slo19 = s[38] ^ lo\n    var t1shi19 = s[39] ^ hi\n    var t1slo24 = s[48] ^ lo\n    var t1shi24 = s[49] ^ hi\n\n    // rho & pi\n    var t2slo0 = t1slo0\n    var t2shi0 = t1shi0\n    var t2slo16 = (t1shi5 << 4 | t1slo5 >>> 28)\n    var t2shi16 = (t1slo5 << 4 | t1shi5 >>> 28)\n    var t2slo7 = (t1slo10 << 3 | t1shi10 >>> 29)\n    var t2shi7 = (t1shi10 << 3 | t1slo10 >>> 29)\n    var t2slo23 = (t1shi15 << 9 | t1slo15 >>> 23)\n    var t2shi23 = (t1slo15 << 9 | t1shi15 >>> 23)\n    var t2slo14 = (t1slo20 << 18 | t1shi20 >>> 14)\n    var t2shi14 = (t1shi20 << 18 | t1slo20 >>> 14)\n    var t2slo10 = (t1slo1 << 1 | t1shi1 >>> 31)\n    var t2shi10 = (t1shi1 << 1 | t1slo1 >>> 31)\n    var t2slo1 = (t1shi6 << 12 | t1slo6 >>> 20)\n    var t2shi1 = (t1slo6 << 12 | t1shi6 >>> 20)\n    var t2slo17 = (t1slo11 << 10 | t1shi11 >>> 22)\n    var t2shi17 = (t1shi11 << 10 | t1slo11 >>> 22)\n    var t2slo8 = (t1shi16 << 13 | t1slo16 >>> 19)\n    var t2shi8 = (t1slo16 << 13 | t1shi16 >>> 19)\n    var t2slo24 = (t1slo21 << 2 | t1shi21 >>> 30)\n    var t2shi24 = (t1shi21 << 2 | t1slo21 >>> 30)\n    var t2slo20 = (t1shi2 << 30 | t1slo2 >>> 2)\n    var t2shi20 = (t1slo2 << 30 | t1shi2 >>> 2)\n    var t2slo11 = (t1slo7 << 6 | t1shi7 >>> 26)\n    var t2shi11 = (t1shi7 << 6 | t1slo7 >>> 26)\n    var t2slo2 = (t1shi12 << 11 | t1slo12 >>> 21)\n    var t2shi2 = (t1slo12 << 11 | t1shi12 >>> 21)\n    var t2slo18 = (t1slo17 << 15 | t1shi17 >>> 17)\n    var t2shi18 = (t1shi17 << 15 | t1slo17 >>> 17)\n    var t2slo9 = (t1shi22 << 29 | t1slo22 >>> 3)\n    var t2shi9 = (t1slo22 << 29 | t1shi22 >>> 3)\n    var t2slo5 = (t1slo3 << 28 | t1shi3 >>> 4)\n    var t2shi5 = (t1shi3 << 28 | t1slo3 >>> 4)\n    var t2slo21 = (t1shi8 << 23 | t1slo8 >>> 9)\n    var t2shi21 = (t1slo8 << 23 | t1shi8 >>> 9)\n    var t2slo12 = (t1slo13 << 25 | t1shi13 >>> 7)\n    var t2shi12 = (t1shi13 << 25 | t1slo13 >>> 7)\n    var t2slo3 = (t1slo18 << 21 | t1shi18 >>> 11)\n    var t2shi3 = (t1shi18 << 21 | t1slo18 >>> 11)\n    var t2slo19 = (t1shi23 << 24 | t1slo23 >>> 8)\n    var t2shi19 = (t1slo23 << 24 | t1shi23 >>> 8)\n    var t2slo15 = (t1slo4 << 27 | t1shi4 >>> 5)\n    var t2shi15 = (t1shi4 << 27 | t1slo4 >>> 5)\n    var t2slo6 = (t1slo9 << 20 | t1shi9 >>> 12)\n    var t2shi6 = (t1shi9 << 20 | t1slo9 >>> 12)\n    var t2slo22 = (t1shi14 << 7 | t1slo14 >>> 25)\n    var t2shi22 = (t1slo14 << 7 | t1shi14 >>> 25)\n    var t2slo13 = (t1slo19 << 8 | t1shi19 >>> 24)\n    var t2shi13 = (t1shi19 << 8 | t1slo19 >>> 24)\n    var t2slo4 = (t1slo24 << 14 | t1shi24 >>> 18)\n    var t2shi4 = (t1shi24 << 14 | t1slo24 >>> 18)\n\n    // chi\n    s[0] = t2slo0 ^ (~t2slo1 & t2slo2)\n    s[1] = t2shi0 ^ (~t2shi1 & t2shi2)\n    s[10] = t2slo5 ^ (~t2slo6 & t2slo7)\n    s[11] = t2shi5 ^ (~t2shi6 & t2shi7)\n    s[20] = t2slo10 ^ (~t2slo11 & t2slo12)\n    s[21] = t2shi10 ^ (~t2shi11 & t2shi12)\n    s[30] = t2slo15 ^ (~t2slo16 & t2slo17)\n    s[31] = t2shi15 ^ (~t2shi16 & t2shi17)\n    s[40] = t2slo20 ^ (~t2slo21 & t2slo22)\n    s[41] = t2shi20 ^ (~t2shi21 & t2shi22)\n    s[2] = t2slo1 ^ (~t2slo2 & t2slo3)\n    s[3] = t2shi1 ^ (~t2shi2 & t2shi3)\n    s[12] = t2slo6 ^ (~t2slo7 & t2slo8)\n    s[13] = t2shi6 ^ (~t2shi7 & t2shi8)\n    s[22] = t2slo11 ^ (~t2slo12 & t2slo13)\n    s[23] = t2shi11 ^ (~t2shi12 & t2shi13)\n    s[32] = t2slo16 ^ (~t2slo17 & t2slo18)\n    s[33] = t2shi16 ^ (~t2shi17 & t2shi18)\n    s[42] = t2slo21 ^ (~t2slo22 & t2slo23)\n    s[43] = t2shi21 ^ (~t2shi22 & t2shi23)\n    s[4] = t2slo2 ^ (~t2slo3 & t2slo4)\n    s[5] = t2shi2 ^ (~t2shi3 & t2shi4)\n    s[14] = t2slo7 ^ (~t2slo8 & t2slo9)\n    s[15] = t2shi7 ^ (~t2shi8 & t2shi9)\n    s[24] = t2slo12 ^ (~t2slo13 & t2slo14)\n    s[25] = t2shi12 ^ (~t2shi13 & t2shi14)\n    s[34] = t2slo17 ^ (~t2slo18 & t2slo19)\n    s[35] = t2shi17 ^ (~t2shi18 & t2shi19)\n    s[44] = t2slo22 ^ (~t2slo23 & t2slo24)\n    s[45] = t2shi22 ^ (~t2shi23 & t2shi24)\n    s[6] = t2slo3 ^ (~t2slo4 & t2slo0)\n    s[7] = t2shi3 ^ (~t2shi4 & t2shi0)\n    s[16] = t2slo8 ^ (~t2slo9 & t2slo5)\n    s[17] = t2shi8 ^ (~t2shi9 & t2shi5)\n    s[26] = t2slo13 ^ (~t2slo14 & t2slo10)\n    s[27] = t2shi13 ^ (~t2shi14 & t2shi10)\n    s[36] = t2slo18 ^ (~t2slo19 & t2slo15)\n    s[37] = t2shi18 ^ (~t2shi19 & t2shi15)\n    s[46] = t2slo23 ^ (~t2slo24 & t2slo20)\n    s[47] = t2shi23 ^ (~t2shi24 & t2shi20)\n    s[8] = t2slo4 ^ (~t2slo0 & t2slo1)\n    s[9] = t2shi4 ^ (~t2shi0 & t2shi1)\n    s[18] = t2slo9 ^ (~t2slo5 & t2slo6)\n    s[19] = t2shi9 ^ (~t2shi5 & t2shi6)\n    s[28] = t2slo14 ^ (~t2slo10 & t2slo11)\n    s[29] = t2shi14 ^ (~t2shi10 & t2shi11)\n    s[38] = t2slo19 ^ (~t2slo15 & t2slo16)\n    s[39] = t2shi19 ^ (~t2shi15 & t2shi16)\n    s[48] = t2slo24 ^ (~t2slo20 & t2slo21)\n    s[49] = t2shi24 ^ (~t2shi20 & t2shi21)\n\n    // iota\n    s[0] ^= P1600_ROUND_CONSTANTS[round * 2]\n    s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1]\n  }\n}\n","'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar keccakState = require('./keccak-state-unroll')\n\nfunction Keccak () {\n  // much faster than `new Array(50)`\n  this.state = [\n    0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0\n  ]\n\n  this.blockSize = null\n  this.count = 0\n  this.squeezing = false\n}\n\nKeccak.prototype.initialize = function (rate, capacity) {\n  for (var i = 0; i < 50; ++i) this.state[i] = 0\n  this.blockSize = rate / 8\n  this.count = 0\n  this.squeezing = false\n}\n\nKeccak.prototype.absorb = function (data) {\n  for (var i = 0; i < data.length; ++i) {\n    this.state[~~(this.count / 4)] ^= data[i] << (8 * (this.count % 4))\n    this.count += 1\n    if (this.count === this.blockSize) {\n      keccakState.p1600(this.state)\n      this.count = 0\n    }\n  }\n}\n\nKeccak.prototype.absorbLastFewBits = function (bits) {\n  this.state[~~(this.count / 4)] ^= bits << (8 * (this.count % 4))\n  if ((bits & 0x80) !== 0 && this.count === (this.blockSize - 1)) keccakState.p1600(this.state)\n  this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << (8 * ((this.blockSize - 1) % 4))\n  keccakState.p1600(this.state)\n  this.count = 0\n  this.squeezing = true\n}\n\nKeccak.prototype.squeeze = function (length) {\n  if (!this.squeezing) this.absorbLastFewBits(0x01)\n\n  var output = Buffer.alloc(length)\n  for (var i = 0; i < length; ++i) {\n    output[i] = (this.state[~~(this.count / 4)] >>> (8 * (this.count % 4))) & 0xff\n    this.count += 1\n    if (this.count === this.blockSize) {\n      keccakState.p1600(this.state)\n      this.count = 0\n    }\n  }\n\n  return output\n}\n\nKeccak.prototype.copy = function (dest) {\n  for (var i = 0; i < 50; ++i) dest.state[i] = this.state[i]\n  dest.blockSize = this.blockSize\n  dest.count = this.count\n  dest.squeezing = this.squeezing\n}\n\nmodule.exports = Keccak\n","'use strict';\n\nmodule.exports = function() {\n  throw new Error(\n    'ws does not work in the browser. Browser clients must use the native ' +\n      'WebSocket object'\n  );\n};\n","import Bowser from 'bowser';\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\n\nvar ONBOARDING_STATE = {\r\n    INSTALLED: 'INSTALLED',\r\n    NOT_INSTALLED: 'NOT_INSTALLED',\r\n    REGISTERED: 'REGISTERED',\r\n    REGISTERING: 'REGISTERING',\r\n    RELOADING: 'RELOADING',\r\n};\r\nvar EXTENSION_DOWNLOAD_URL = {\r\n    CHROME: 'https://chrome.google.com/webstore/detail/starmask/mfhbebgoclkghebffdldpobeajmbecfk',\r\n    FIREFOX: 'https://starcoin.org',\r\n    DEFAULT: 'https://starcoin.org',\r\n};\r\n// sessionStorage key\r\nvar REGISTRATION_IN_PROGRESS = 'REGISTRATION_IN_PROGRESS';\r\n// forwarder iframe id\r\nvar FORWARDER_ID = 'FORWARDER_ID';\r\nvar Onboarding = /** @class */ (function () {\r\n    function Onboarding(_a) {\r\n        var _b = _a === void 0 ? {} : _a, _c = _b.forwarderOrigin, forwarderOrigin = _c === void 0 ? 'https://fwd-starmask.starcoin.org' : _c, _d = _b.forwarderMode, forwarderMode = _d === void 0 ? Onboarding.FORWARDER_MODE.INJECT : _d;\r\n        this.forwarderOrigin = forwarderOrigin;\r\n        this.forwarderMode = forwarderMode;\r\n        this.state = Onboarding.isStarMaskInstalled() ?\r\n            ONBOARDING_STATE.INSTALLED :\r\n            ONBOARDING_STATE.NOT_INSTALLED;\r\n        var browser = Onboarding._detectBrowser();\r\n        if (browser) {\r\n            this.downloadUrl = EXTENSION_DOWNLOAD_URL[browser];\r\n        }\r\n        else {\r\n            this.downloadUrl = EXTENSION_DOWNLOAD_URL.DEFAULT;\r\n        }\r\n        this._onMessage = this._onMessage.bind(this);\r\n        this._onMessageFromForwarder = this._onMessageFromForwarder.bind(this);\r\n        this._openForwarder = this._openForwarder.bind(this);\r\n        this._openDownloadPage = this._openDownloadPage.bind(this);\r\n        this.startOnboarding = this.startOnboarding.bind(this);\r\n        this.stopOnboarding = this.stopOnboarding.bind(this);\r\n        window.addEventListener('message', this._onMessage);\r\n        if (forwarderMode === Onboarding.FORWARDER_MODE.INJECT && sessionStorage.getItem(REGISTRATION_IN_PROGRESS) === 'true') {\r\n            Onboarding._injectForwarder(this.forwarderOrigin);\r\n        }\r\n    }\r\n    Onboarding.prototype._onMessage = function (event) {\r\n        if (event.origin !== this.forwarderOrigin) {\r\n            // Ignoring non-forwarder message\r\n            return undefined;\r\n        }\r\n        if (event.data.type === 'starmask:reload') {\r\n            return this._onMessageFromForwarder(event);\r\n        }\r\n        console.debug(\"Unknown message from '\" + event.origin + \"' with data \" + JSON.stringify(event.data));\r\n        return undefined;\r\n    };\r\n    Onboarding.prototype._onMessageUnknownStateError = function (state) {\r\n        throw new Error(\"Unknown state: '\" + state + \"'\");\r\n    };\r\n    Onboarding.prototype._onMessageFromForwarder = function (event) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _a = this.state;\r\n                        switch (_a) {\r\n                            case ONBOARDING_STATE.RELOADING: return [3 /*break*/, 1];\r\n                            case ONBOARDING_STATE.NOT_INSTALLED: return [3 /*break*/, 2];\r\n                            case ONBOARDING_STATE.INSTALLED: return [3 /*break*/, 3];\r\n                            case ONBOARDING_STATE.REGISTERING: return [3 /*break*/, 5];\r\n                            case ONBOARDING_STATE.REGISTERED: return [3 /*break*/, 6];\r\n                        }\r\n                        return [3 /*break*/, 7];\r\n                    case 1:\r\n                        console.debug('Ignoring message while reloading');\r\n                        return [3 /*break*/, 8];\r\n                    case 2:\r\n                        console.debug('Reloading now to register with StarMask');\r\n                        this.state = ONBOARDING_STATE.RELOADING;\r\n                        location.reload();\r\n                        return [3 /*break*/, 8];\r\n                    case 3:\r\n                        console.debug('Registering with StarMask');\r\n                        this.state = ONBOARDING_STATE.REGISTERING;\r\n                        return [4 /*yield*/, Onboarding._register()];\r\n                    case 4:\r\n                        _b.sent();\r\n                        this.state = ONBOARDING_STATE.REGISTERED;\r\n                        event.source.postMessage({ type: 'starmask:registrationCompleted' }, event.origin);\r\n                        this.stopOnboarding();\r\n                        return [3 /*break*/, 8];\r\n                    case 5:\r\n                        console.debug('Already registering - ignoring reload message');\r\n                        return [3 /*break*/, 8];\r\n                    case 6:\r\n                        console.debug('Already registered - ignoring reload message');\r\n                        return [3 /*break*/, 8];\r\n                    case 7:\r\n                        this._onMessageUnknownStateError(this.state);\r\n                        _b.label = 8;\r\n                    case 8: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Starts onboarding by opening the StarMask download page and the Onboarding forwarder\r\n     */\r\n    Onboarding.prototype.startOnboarding = function () {\r\n        sessionStorage.setItem(REGISTRATION_IN_PROGRESS, 'true');\r\n        this._openDownloadPage();\r\n        this._openForwarder();\r\n    };\r\n    /**\r\n     * Stops onboarding registration, including removing the injected forwarder (if any)\r\n     *\r\n     * Typically this function is not necessary, but it can be useful for cases where\r\n     * onboarding completes before the forwarder has registered.\r\n     */\r\n    Onboarding.prototype.stopOnboarding = function () {\r\n        if (sessionStorage.getItem(REGISTRATION_IN_PROGRESS) === 'true') {\r\n            if (this.forwarderMode === Onboarding.FORWARDER_MODE.INJECT) {\r\n                console.debug('Removing forwarder');\r\n                Onboarding._removeForwarder();\r\n            }\r\n            sessionStorage.setItem(REGISTRATION_IN_PROGRESS, 'false');\r\n        }\r\n    };\r\n    Onboarding.prototype._openForwarder = function () {\r\n        if (this.forwarderMode === Onboarding.FORWARDER_MODE.OPEN_TAB) {\r\n            window.open(this.forwarderOrigin, '_blank');\r\n        }\r\n        else {\r\n            Onboarding._injectForwarder(this.forwarderOrigin);\r\n        }\r\n    };\r\n    Onboarding.prototype._openDownloadPage = function () {\r\n        window.open(this.downloadUrl, '_blank');\r\n    };\r\n    /**\r\n     * Checks whether the StarMask extension is installed\r\n     */\r\n    Onboarding.isStarMaskInstalled = function () {\r\n        return Boolean(window.starcoin && window.starcoin.isStarMask);\r\n    };\r\n    Onboarding._register = function () {\r\n        return window.starcoin.request({\r\n            method: 'wallet_registerOnboarding',\r\n        });\r\n    };\r\n    Onboarding._injectForwarder = function (forwarderOrigin) {\r\n        var container = document.body;\r\n        var iframe = document.createElement('iframe');\r\n        iframe.setAttribute('height', '0');\r\n        iframe.setAttribute('width', '0');\r\n        iframe.setAttribute('style', 'display: none;');\r\n        iframe.setAttribute('src', forwarderOrigin);\r\n        iframe.setAttribute('id', FORWARDER_ID);\r\n        container.insertBefore(iframe, container.children[0]);\r\n    };\r\n    Onboarding._removeForwarder = function () {\r\n        var _a;\r\n        (_a = document.getElementById(FORWARDER_ID)) === null || _a === void 0 ? void 0 : _a.remove();\r\n    };\r\n    Onboarding._detectBrowser = function () {\r\n        var browserInfo = Bowser.parse(window.navigator.userAgent);\r\n        if (browserInfo.browser.name === 'Firefox') {\r\n            return 'FIREFOX';\r\n        }\r\n        else if (['Chrome', 'Chromium'].includes(browserInfo.browser.name || '')) {\r\n            return 'CHROME';\r\n        }\r\n        return null;\r\n    };\r\n    Onboarding.FORWARDER_MODE = {\r\n        INJECT: 'INJECT',\r\n        OPEN_TAB: 'OPEN_TAB',\r\n    };\r\n    return Onboarding;\r\n}());\n\nexport { Onboarding as default };\n","'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bech32m = exports.bech32 = void 0;\nconst ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\nconst ALPHABET_MAP = {};\nfor (let z = 0; z < ALPHABET.length; z++) {\n    const x = ALPHABET.charAt(z);\n    ALPHABET_MAP[x] = z;\n}\nfunction polymodStep(pre) {\n    const b = pre >> 25;\n    return (((pre & 0x1ffffff) << 5) ^\n        (-((b >> 0) & 1) & 0x3b6a57b2) ^\n        (-((b >> 1) & 1) & 0x26508e6d) ^\n        (-((b >> 2) & 1) & 0x1ea119fa) ^\n        (-((b >> 3) & 1) & 0x3d4233dd) ^\n        (-((b >> 4) & 1) & 0x2a1462b3));\n}\nfunction prefixChk(prefix) {\n    let chk = 1;\n    for (let i = 0; i < prefix.length; ++i) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            return 'Invalid prefix (' + prefix + ')';\n        chk = polymodStep(chk) ^ (c >> 5);\n    }\n    chk = polymodStep(chk);\n    for (let i = 0; i < prefix.length; ++i) {\n        const v = prefix.charCodeAt(i);\n        chk = polymodStep(chk) ^ (v & 0x1f);\n    }\n    return chk;\n}\nfunction convert(data, inBits, outBits, pad) {\n    let value = 0;\n    let bits = 0;\n    const maxV = (1 << outBits) - 1;\n    const result = [];\n    for (let i = 0; i < data.length; ++i) {\n        value = (value << inBits) | data[i];\n        bits += inBits;\n        while (bits >= outBits) {\n            bits -= outBits;\n            result.push((value >> bits) & maxV);\n        }\n    }\n    if (pad) {\n        if (bits > 0) {\n            result.push((value << (outBits - bits)) & maxV);\n        }\n    }\n    else {\n        if (bits >= inBits)\n            return 'Excess padding';\n        if ((value << (outBits - bits)) & maxV)\n            return 'Non-zero padding';\n    }\n    return result;\n}\nfunction toWords(bytes) {\n    return convert(bytes, 8, 5, true);\n}\nfunction fromWordsUnsafe(words) {\n    const res = convert(words, 5, 8, false);\n    if (Array.isArray(res))\n        return res;\n}\nfunction fromWords(words) {\n    const res = convert(words, 5, 8, false);\n    if (Array.isArray(res))\n        return res;\n    throw new Error(res);\n}\nfunction getLibraryFromEncoding(encoding) {\n    let ENCODING_CONST;\n    if (encoding === 'bech32') {\n        ENCODING_CONST = 1;\n    }\n    else {\n        ENCODING_CONST = 0x2bc830a3;\n    }\n    function encode(prefix, words, LIMIT) {\n        LIMIT = LIMIT || 90;\n        if (prefix.length + 7 + words.length > LIMIT)\n            throw new TypeError('Exceeds length limit');\n        prefix = prefix.toLowerCase();\n        // determine chk mod\n        let chk = prefixChk(prefix);\n        if (typeof chk === 'string')\n            throw new Error(chk);\n        let result = prefix + '1';\n        for (let i = 0; i < words.length; ++i) {\n            const x = words[i];\n            if (x >> 5 !== 0)\n                throw new Error('Non 5-bit word');\n            chk = polymodStep(chk) ^ x;\n            result += ALPHABET.charAt(x);\n        }\n        for (let i = 0; i < 6; ++i) {\n            chk = polymodStep(chk);\n        }\n        chk ^= ENCODING_CONST;\n        for (let i = 0; i < 6; ++i) {\n            const v = (chk >> ((5 - i) * 5)) & 0x1f;\n            result += ALPHABET.charAt(v);\n        }\n        return result;\n    }\n    function __decode(str, LIMIT) {\n        LIMIT = LIMIT || 90;\n        if (str.length < 8)\n            return str + ' too short';\n        if (str.length > LIMIT)\n            return 'Exceeds length limit';\n        // don't allow mixed case\n        const lowered = str.toLowerCase();\n        const uppered = str.toUpperCase();\n        if (str !== lowered && str !== uppered)\n            return 'Mixed-case string ' + str;\n        str = lowered;\n        const split = str.lastIndexOf('1');\n        if (split === -1)\n            return 'No separator character for ' + str;\n        if (split === 0)\n            return 'Missing prefix for ' + str;\n        const prefix = str.slice(0, split);\n        const wordChars = str.slice(split + 1);\n        if (wordChars.length < 6)\n            return 'Data too short';\n        let chk = prefixChk(prefix);\n        if (typeof chk === 'string')\n            return chk;\n        const words = [];\n        for (let i = 0; i < wordChars.length; ++i) {\n            const c = wordChars.charAt(i);\n            const v = ALPHABET_MAP[c];\n            if (v === undefined)\n                return 'Unknown character ' + c;\n            chk = polymodStep(chk) ^ v;\n            // not in the checksum?\n            if (i + 6 >= wordChars.length)\n                continue;\n            words.push(v);\n        }\n        if (chk !== ENCODING_CONST)\n            return 'Invalid checksum for ' + str;\n        return { prefix, words };\n    }\n    function decodeUnsafe(str, LIMIT) {\n        const res = __decode(str, LIMIT);\n        if (typeof res === 'object')\n            return res;\n    }\n    function decode(str, LIMIT) {\n        const res = __decode(str, LIMIT);\n        if (typeof res === 'object')\n            return res;\n        throw new Error(res);\n    }\n    return {\n        decodeUnsafe,\n        decode,\n        encode,\n        toWords,\n        fromWordsUnsafe,\n        fromWords,\n    };\n}\nexports.bech32 = getLibraryFromEncoding('bech32');\nexports.bech32m = getLibraryFromEncoding('bech32m');\n","// Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki\n// Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n// NOTE: SIGHASH byte ignored AND restricted, truncate before use\n\nvar Buffer = require('safe-buffer').Buffer\n\nfunction check (buffer) {\n  if (buffer.length < 8) return false\n  if (buffer.length > 72) return false\n  if (buffer[0] !== 0x30) return false\n  if (buffer[1] !== buffer.length - 2) return false\n  if (buffer[2] !== 0x02) return false\n\n  var lenR = buffer[3]\n  if (lenR === 0) return false\n  if (5 + lenR >= buffer.length) return false\n  if (buffer[4 + lenR] !== 0x02) return false\n\n  var lenS = buffer[5 + lenR]\n  if (lenS === 0) return false\n  if ((6 + lenR + lenS) !== buffer.length) return false\n\n  if (buffer[4] & 0x80) return false\n  if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) return false\n\n  if (buffer[lenR + 6] & 0x80) return false\n  if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) return false\n  return true\n}\n\nfunction decode (buffer) {\n  if (buffer.length < 8) throw new Error('DER sequence length is too short')\n  if (buffer.length > 72) throw new Error('DER sequence length is too long')\n  if (buffer[0] !== 0x30) throw new Error('Expected DER sequence')\n  if (buffer[1] !== buffer.length - 2) throw new Error('DER sequence length is invalid')\n  if (buffer[2] !== 0x02) throw new Error('Expected DER integer')\n\n  var lenR = buffer[3]\n  if (lenR === 0) throw new Error('R length is zero')\n  if (5 + lenR >= buffer.length) throw new Error('R length is too long')\n  if (buffer[4 + lenR] !== 0x02) throw new Error('Expected DER integer (2)')\n\n  var lenS = buffer[5 + lenR]\n  if (lenS === 0) throw new Error('S length is zero')\n  if ((6 + lenR + lenS) !== buffer.length) throw new Error('S length is invalid')\n\n  if (buffer[4] & 0x80) throw new Error('R value is negative')\n  if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) throw new Error('R value excessively padded')\n\n  if (buffer[lenR + 6] & 0x80) throw new Error('S value is negative')\n  if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) throw new Error('S value excessively padded')\n\n  // non-BIP66 - extract R, S values\n  return {\n    r: buffer.slice(4, 4 + lenR),\n    s: buffer.slice(6 + lenR)\n  }\n}\n\n/*\n * Expects r and s to be positive DER integers.\n *\n * The DER format uses the most significant bit as a sign bit (& 0x80).\n * If the significant bit is set AND the integer is positive, a 0x00 is prepended.\n *\n * Examples:\n *\n *      0 =>     0x00\n *      1 =>     0x01\n *     -1 =>     0xff\n *    127 =>     0x7f\n *   -127 =>     0x81\n *    128 =>   0x0080\n *   -128 =>     0x80\n *    255 =>   0x00ff\n *   -255 =>   0xff01\n *  16300 =>   0x3fac\n * -16300 =>   0xc054\n *  62300 => 0x00f35c\n * -62300 => 0xff0ca4\n*/\nfunction encode (r, s) {\n  var lenR = r.length\n  var lenS = s.length\n  if (lenR === 0) throw new Error('R length is zero')\n  if (lenS === 0) throw new Error('S length is zero')\n  if (lenR > 33) throw new Error('R length is too long')\n  if (lenS > 33) throw new Error('S length is too long')\n  if (r[0] & 0x80) throw new Error('R value is negative')\n  if (s[0] & 0x80) throw new Error('S value is negative')\n  if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) throw new Error('R value excessively padded')\n  if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) throw new Error('S value excessively padded')\n\n  var signature = Buffer.allocUnsafe(6 + lenR + lenS)\n\n  // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n  signature[0] = 0x30\n  signature[1] = signature.length - 2\n  signature[2] = 0x02\n  signature[3] = r.length\n  r.copy(signature, 4)\n  signature[4 + lenR] = 0x02\n  signature[5 + lenR] = s.length\n  s.copy(signature, 6 + lenR)\n\n  return signature\n}\n\nmodule.exports = {\n  check: check,\n  decode: decode,\n  encode: encode\n}\n","'use strict'\n\nmodule.exports = alphabetical\n\n// Check if the given character code, or the character code at the first\n// character, is alphabetical.\nfunction alphabetical(character) {\n  var code = typeof character === 'string' ? character.charCodeAt(0) : character\n\n  return (\n    (code >= 97 && code <= 122) /* a-z */ ||\n    (code >= 65 && code <= 90) /* A-Z */\n  )\n}\n","'use strict'\n\nvar alphabetical = require('is-alphabetical')\nvar decimal = require('is-decimal')\n\nmodule.exports = alphanumerical\n\n// Check if the given character code, or the character code at the first\n// character, is alphanumerical.\nfunction alphanumerical(character) {\n  return alphabetical(character) || decimal(character)\n}\n","'use strict'\n\nmodule.exports = decimal\n\n// Check if the given character code, or the character code at the first\n// character, is decimal.\nfunction decimal(character) {\n  var code = typeof character === 'string' ? character.charCodeAt(0) : character\n\n  return code >= 48 && code <= 57 /* 0-9 */\n}\n","'use strict'\n\nmodule.exports = hexadecimal\n\n// Check if the given character code, or the character code at the first\n// character, is hexadecimal.\nfunction hexadecimal(character) {\n  var code = typeof character === 'string' ? character.charCodeAt(0) : character\n\n  return (\n    (code >= 97 /* a */ && code <= 102) /* z */ ||\n    (code >= 65 /* A */ && code <= 70) /* Z */ ||\n    (code >= 48 /* A */ && code <= 57) /* Z */\n  )\n}\n","'use strict'\n\nmodule.exports = whitespace\n\nvar fromCode = String.fromCharCode\nvar re = /\\s/\n\n// Check if the given character code, or the character code at the first\n// character, is a whitespace character.\nfunction whitespace(character) {\n  return re.test(\n    typeof character === 'number' ? fromCode(character) : character.charAt(0)\n  )\n}\n","'use strict'\nmodule.exports = require('./lib')(require('./lib/elliptic'))\n","'use strict'\nvar toString = Object.prototype.toString\n\n// TypeError\nexports.isArray = function (value, message) {\n  if (!Array.isArray(value)) throw TypeError(message)\n}\n\nexports.isBoolean = function (value, message) {\n  if (toString.call(value) !== '[object Boolean]') throw TypeError(message)\n}\n\nexports.isBuffer = function (value, message) {\n  if (!Buffer.isBuffer(value)) throw TypeError(message)\n}\n\nexports.isFunction = function (value, message) {\n  if (toString.call(value) !== '[object Function]') throw TypeError(message)\n}\n\nexports.isNumber = function (value, message) {\n  if (toString.call(value) !== '[object Number]') throw TypeError(message)\n}\n\nexports.isObject = function (value, message) {\n  if (toString.call(value) !== '[object Object]') throw TypeError(message)\n}\n\n// RangeError\nexports.isBufferLength = function (buffer, length, message) {\n  if (buffer.length !== length) throw RangeError(message)\n}\n\nexports.isBufferLength2 = function (buffer, length1, length2, message) {\n  if (buffer.length !== length1 && buffer.length !== length2) throw RangeError(message)\n}\n\nexports.isLengthGTZero = function (value, message) {\n  if (value.length === 0) throw RangeError(message)\n}\n\nexports.isNumberInInterval = function (number, x, y, message) {\n  if (number <= x || number >= y) throw RangeError(message)\n}\n","'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar bip66 = require('bip66')\n\nvar EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([\n  // begin\n  0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,\n  // private key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  // middle\n  0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,\n  0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,\n  0x21, 0x02, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,\n  0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,\n  0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,\n  0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,\n  // public key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00\n])\n\nvar EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([\n  // begin\n  0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,\n  // private key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  // middle\n  0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,\n  0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,\n  0x41, 0x04, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,\n  0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,\n  0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0E, 0x11,\n  0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10,\n  0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,\n  0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,\n  // public key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00\n])\n\nexports.privateKeyExport = function (privateKey, publicKey, compressed) {\n  var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED)\n  privateKey.copy(result, compressed ? 8 : 9)\n  publicKey.copy(result, compressed ? 181 : 214)\n  return result\n}\n\nexports.privateKeyImport = function (privateKey) {\n  var length = privateKey.length\n\n  // sequence header\n  var index = 0\n  if (length < index + 1 || privateKey[index] !== 0x30) return\n  index += 1\n\n  // sequence length constructor\n  if (length < index + 1 || !(privateKey[index] & 0x80)) return\n\n  var lenb = privateKey[index] & 0x7f\n  index += 1\n  if (lenb < 1 || lenb > 2) return\n  if (length < index + lenb) return\n\n  // sequence length\n  var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0)\n  index += lenb\n  if (length < index + len) return\n\n  // sequence element 0: version number (=1)\n  if (length < index + 3 ||\n      privateKey[index] !== 0x02 ||\n      privateKey[index + 1] !== 0x01 ||\n      privateKey[index + 2] !== 0x01) {\n    return\n  }\n  index += 3\n\n  // sequence element 1: octet string, up to 32 bytes\n  if (length < index + 2 ||\n      privateKey[index] !== 0x04 ||\n      privateKey[index + 1] > 0x20 ||\n      length < index + 2 + privateKey[index + 1]) {\n    return\n  }\n\n  return privateKey.slice(index + 2, index + 2 + privateKey[index + 1])\n}\n\nexports.signatureExport = function (sigObj) {\n  var r = Buffer.concat([Buffer.from([0]), sigObj.r])\n  for (var lenR = 33, posR = 0; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n  var s = Buffer.concat([Buffer.from([0]), sigObj.s])\n  for (var lenS = 33, posS = 0; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n  return bip66.encode(r.slice(posR), s.slice(posS))\n}\n\nexports.signatureImport = function (sig) {\n  var r = Buffer.alloc(32, 0)\n  var s = Buffer.alloc(32, 0)\n\n  try {\n    var sigObj = bip66.decode(sig)\n    if (sigObj.r.length === 33 && sigObj.r[0] === 0x00) sigObj.r = sigObj.r.slice(1)\n    if (sigObj.r.length > 32) throw new Error('R length is too long')\n    if (sigObj.s.length === 33 && sigObj.s[0] === 0x00) sigObj.s = sigObj.s.slice(1)\n    if (sigObj.s.length > 32) throw new Error('S length is too long')\n  } catch (err) {\n    return\n  }\n\n  sigObj.r.copy(r, 32 - sigObj.r.length)\n  sigObj.s.copy(s, 32 - sigObj.s.length)\n\n  return { r: r, s: s }\n}\n\nexports.signatureImportLax = function (sig) {\n  var r = Buffer.alloc(32, 0)\n  var s = Buffer.alloc(32, 0)\n\n  var length = sig.length\n  var index = 0\n\n  // sequence tag byte\n  if (sig[index++] !== 0x30) return\n\n  // sequence length byte\n  var lenbyte = sig[index++]\n  if (lenbyte & 0x80) {\n    index += lenbyte - 0x80\n    if (index > length) return\n  }\n\n  // sequence tag byte for r\n  if (sig[index++] !== 0x02) return\n\n  // length for r\n  var rlen = sig[index++]\n  if (rlen & 0x80) {\n    lenbyte = rlen - 0x80\n    if (index + lenbyte > length) return\n    for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);\n    for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) rlen = (rlen << 8) + sig[index]\n  }\n  if (rlen > length - index) return\n  var rindex = index\n  index += rlen\n\n  // sequence tag byte for s\n  if (sig[index++] !== 0x02) return\n\n  // length for s\n  var slen = sig[index++]\n  if (slen & 0x80) {\n    lenbyte = slen - 0x80\n    if (index + lenbyte > length) return\n    for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);\n    for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) slen = (slen << 8) + sig[index]\n  }\n  if (slen > length - index) return\n  var sindex = index\n  index += slen\n\n  // ignore leading zeros in r\n  for (; rlen > 0 && sig[rindex] === 0x00; rlen -= 1, rindex += 1);\n  // copy r value\n  if (rlen > 32) return\n  var rvalue = sig.slice(rindex, rindex + rlen)\n  rvalue.copy(r, 32 - rvalue.length)\n\n  // ignore leading zeros in s\n  for (; slen > 0 && sig[sindex] === 0x00; slen -= 1, sindex += 1);\n  // copy s value\n  if (slen > 32) return\n  var svalue = sig.slice(sindex, sindex + slen)\n  svalue.copy(s, 32 - svalue.length)\n\n  return { r: r, s: s }\n}\n","'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar createHash = require('create-hash')\nvar BN = require('bn.js')\nvar EC = require('elliptic').ec\n\nvar messages = require('../messages.json')\n\nvar ec = new EC('secp256k1')\nvar ecparams = ec.curve\n\nfunction loadCompressedPublicKey (first, xBuffer) {\n  var x = new BN(xBuffer)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xBuffer, yBuffer) {\n  var x = new BN(xBuffer)\n  var y = new BN(yBuffer)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  var x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (publicKey) {\n  var first = publicKey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (publicKey.length !== 33) return null\n      return loadCompressedPublicKey(first, publicKey.slice(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (publicKey.length !== 65) return null\n      return loadUncompressedPublicKey(first, publicKey.slice(1, 33), publicKey.slice(33, 65))\n    default:\n      return null\n  }\n}\n\nexports.privateKeyVerify = function (privateKey) {\n  var bn = new BN(privateKey)\n  return bn.cmp(ecparams.n) < 0 && !bn.isZero()\n}\n\nexports.privateKeyExport = function (privateKey, compressed) {\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PRIVATE_KEY_EXPORT_DER_FAIL)\n\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))\n}\n\nexports.privateKeyNegate = function (privateKey) {\n  var bn = new BN(privateKey)\n  return bn.isZero() ? Buffer.alloc(32) : ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Buffer, 'be', 32)\n}\n\nexports.privateKeyModInverse = function (privateKey) {\n  var bn = new BN(privateKey)\n  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_RANGE_INVALID)\n\n  return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32)\n}\n\nexports.privateKeyTweakAdd = function (privateKey, tweak) {\n  var bn = new BN(tweak)\n  if (bn.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)\n\n  bn.iadd(new BN(privateKey))\n  if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n  if (bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)\n\n  return bn.toArrayLike(Buffer, 'be', 32)\n}\n\nexports.privateKeyTweakMul = function (privateKey, tweak) {\n  var bn = new BN(tweak)\n  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_MUL_FAIL)\n\n  bn.imul(new BN(privateKey))\n  if (bn.cmp(ecparams.n)) bn = bn.umod(ecparams.n)\n\n  return bn.toArrayLike(Buffer, 'be', 32)\n}\n\nexports.publicKeyCreate = function (privateKey, compressed) {\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PUBLIC_KEY_CREATE_FAIL)\n\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))\n}\n\nexports.publicKeyConvert = function (publicKey, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  return Buffer.from(pair.getPublic(compressed, true))\n}\n\nexports.publicKeyVerify = function (publicKey) {\n  return loadPublicKey(publicKey) !== null\n}\n\nexports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  tweak = new BN(tweak)\n  if (tweak.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)\n\n  var point = ecparams.g.mul(tweak).add(pair.pub)\n  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)\n\n  return Buffer.from(point.encode(true, compressed))\n}\n\nexports.publicKeyTweakMul = function (publicKey, tweak, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  tweak = new BN(tweak)\n  if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_MUL_FAIL)\n\n  return Buffer.from(pair.pub.mul(tweak).encode(true, compressed))\n}\n\nexports.publicKeyCombine = function (publicKeys, compressed) {\n  var pairs = new Array(publicKeys.length)\n  for (var i = 0; i < publicKeys.length; ++i) {\n    pairs[i] = loadPublicKey(publicKeys[i])\n    if (pairs[i] === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n  }\n\n  var point = pairs[0].pub\n  for (var j = 1; j < pairs.length; ++j) point = point.add(pairs[j].pub)\n  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_COMBINE_FAIL)\n\n  return Buffer.from(point.encode(true, compressed))\n}\n\nexports.signatureNormalize = function (signature) {\n  var r = new BN(signature.slice(0, 32))\n  var s = new BN(signature.slice(32, 64))\n  if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  var result = Buffer.from(signature)\n  if (s.cmp(ec.nh) === 1) ecparams.n.sub(s).toArrayLike(Buffer, 'be', 32).copy(result, 32)\n\n  return result\n}\n\nexports.signatureExport = function (signature) {\n  var r = signature.slice(0, 32)\n  var s = signature.slice(32, 64)\n  if (new BN(r).cmp(ecparams.n) >= 0 || new BN(s).cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  return { r: r, s: s }\n}\n\nexports.signatureImport = function (sigObj) {\n  var r = new BN(sigObj.r)\n  if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n  var s = new BN(sigObj.s)\n  if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n  return Buffer.concat([\n    r.toArrayLike(Buffer, 'be', 32),\n    s.toArrayLike(Buffer, 'be', 32)\n  ])\n}\n\nexports.sign = function (message, privateKey, noncefn, data) {\n  if (typeof noncefn === 'function') {\n    var getNonce = noncefn\n    noncefn = function (counter) {\n      var nonce = getNonce(message, privateKey, null, data, counter)\n      if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages.ECDSA_SIGN_FAIL)\n\n      return new BN(nonce)\n    }\n  }\n\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.ECDSA_SIGN_FAIL)\n\n  var result = ec.sign(message, privateKey, { canonical: true, k: noncefn, pers: data })\n  return {\n    signature: Buffer.concat([\n      result.r.toArrayLike(Buffer, 'be', 32),\n      result.s.toArrayLike(Buffer, 'be', 32)\n    ]),\n    recovery: result.recoveryParam\n  }\n}\n\nexports.verify = function (message, signature, publicKey) {\n  var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) }\n\n  var sigr = new BN(sigObj.r)\n  var sigs = new BN(sigObj.s)\n  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n  if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return false\n\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  return ec.verify(message, sigObj, { x: pair.pub.x, y: pair.pub.y })\n}\n\nexports.recover = function (message, signature, recovery, compressed) {\n  var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) }\n\n  var sigr = new BN(sigObj.r)\n  var sigs = new BN(sigObj.s)\n  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  try {\n    if (sigr.isZero() || sigs.isZero()) throw new Error()\n\n    var point = ec.recoverPubKey(message, sigObj, recovery)\n    return Buffer.from(point.encode(true, compressed))\n  } catch (err) {\n    throw new Error(messages.ECDSA_RECOVER_FAIL)\n  }\n}\n\nexports.ecdh = function (publicKey, privateKey) {\n  var shared = exports.ecdhUnsafe(publicKey, privateKey, true)\n  return createHash('sha256').update(shared).digest()\n}\n\nexports.ecdhUnsafe = function (publicKey, privateKey, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  var scalar = new BN(privateKey)\n  if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error(messages.ECDH_FAIL)\n\n  return Buffer.from(pair.pub.mul(scalar).encode(true, compressed))\n}\n","'use strict'\nvar assert = require('./assert')\nvar der = require('./der')\nvar messages = require('./messages.json')\n\nfunction initCompressedValue (value, defaultValue) {\n  if (value === undefined) return defaultValue\n\n  assert.isBoolean(value, messages.COMPRESSED_TYPE_INVALID)\n  return value\n}\n\nmodule.exports = function (secp256k1) {\n  return {\n    privateKeyVerify: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)\n    },\n\n    privateKeyExport: function (privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n      var publicKey = secp256k1.privateKeyExport(privateKey, compressed)\n\n      return der.privateKeyExport(privateKey, publicKey, compressed)\n    },\n\n    privateKeyImport: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n\n      privateKey = der.privateKeyImport(privateKey)\n      if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey\n\n      throw new Error(messages.EC_PRIVATE_KEY_IMPORT_DER_FAIL)\n    },\n\n    privateKeyNegate: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.privateKeyNegate(privateKey)\n    },\n\n    privateKeyModInverse: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.privateKeyModInverse(privateKey)\n    },\n\n    privateKeyTweakAdd: function (privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      return secp256k1.privateKeyTweakAdd(privateKey, tweak)\n    },\n\n    privateKeyTweakMul: function (privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      return secp256k1.privateKeyTweakMul(privateKey, tweak)\n    },\n\n    publicKeyCreate: function (privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyCreate(privateKey, compressed)\n    },\n\n    publicKeyConvert: function (publicKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyConvert(publicKey, compressed)\n    },\n\n    publicKeyVerify: function (publicKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      return secp256k1.publicKeyVerify(publicKey)\n    },\n\n    publicKeyTweakAdd: function (publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed)\n    },\n\n    publicKeyTweakMul: function (publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed)\n    },\n\n    publicKeyCombine: function (publicKeys, compressed) {\n      assert.isArray(publicKeys, messages.EC_PUBLIC_KEYS_TYPE_INVALID)\n      assert.isLengthGTZero(publicKeys, messages.EC_PUBLIC_KEYS_LENGTH_INVALID)\n      for (var i = 0; i < publicKeys.length; ++i) {\n        assert.isBuffer(publicKeys[i], messages.EC_PUBLIC_KEY_TYPE_INVALID)\n        assert.isBufferLength2(publicKeys[i], 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n      }\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyCombine(publicKeys, compressed)\n    },\n\n    signatureNormalize: function (signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      return secp256k1.signatureNormalize(signature)\n    },\n\n    signatureExport: function (signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = secp256k1.signatureExport(signature)\n      return der.signatureExport(sigObj)\n    },\n\n    signatureImport: function (sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = der.signatureImport(sig)\n      if (sigObj) return secp256k1.signatureImport(sigObj)\n\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)\n    },\n\n    signatureImportLax: function (sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = der.signatureImportLax(sig)\n      if (sigObj) return secp256k1.signatureImport(sigObj)\n\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)\n    },\n\n    sign: function (message, privateKey, options) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      var data = null\n      var noncefn = null\n      if (options !== undefined) {\n        assert.isObject(options, messages.OPTIONS_TYPE_INVALID)\n\n        if (options.data !== undefined) {\n          assert.isBuffer(options.data, messages.OPTIONS_DATA_TYPE_INVALID)\n          assert.isBufferLength(options.data, 32, messages.OPTIONS_DATA_LENGTH_INVALID)\n          data = options.data\n        }\n\n        if (options.noncefn !== undefined) {\n          assert.isFunction(options.noncefn, messages.OPTIONS_NONCEFN_TYPE_INVALID)\n          noncefn = options.noncefn\n        }\n      }\n\n      return secp256k1.sign(message, privateKey, noncefn, data)\n    },\n\n    verify: function (message, signature, publicKey) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      return secp256k1.verify(message, signature, publicKey)\n    },\n\n    recover: function (message, signature, recovery, compressed) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      assert.isNumber(recovery, messages.RECOVERY_ID_TYPE_INVALID)\n      assert.isNumberInInterval(recovery, -1, 4, messages.RECOVERY_ID_VALUE_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.recover(message, signature, recovery, compressed)\n    },\n\n    ecdh: function (publicKey, privateKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.ecdh(publicKey, privateKey)\n    },\n\n    ecdhUnsafe: function (publicKey, privateKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed)\n    }\n  }\n}\n","/*\r\n *      bignumber.js v9.1.0\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n    alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                       not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if less than two characters,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, P.lt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, P.gt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  function maxOrMin(args, method) {\r\n    var n,\r\n      i = 1,\r\n      m = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      n = new BigNumber(args[i]);\r\n\r\n      // If any number is NaN, return NaN.\r\n      if (!n.s) {\r\n        m = n;\r\n        break;\r\n      } else if (method.call(m, n)) {\r\n        m = n;\r\n      }\r\n    }\r\n\r\n    return m;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = n / pows10[d - j - 1] % 10 | 0;\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n","export default function compareVersions(v1, v2) {\n  // validate input and split into segments\n  const n1 = validateAndParse(v1);\n  const n2 = validateAndParse(v2);\n\n  // pop off the patch\n  const p1 = n1.pop();\n  const p2 = n2.pop();\n\n  // validate numbers\n  const r = compareSegments(n1, n2);\n  if (r !== 0) return r;\n\n  // validate pre-release\n  if (p1 && p2) {\n    return compareSegments(p1.split('.'), p2.split('.'));\n  } else if (p1 || p2) {\n    return p1 ? -1 : 1;\n  }\n\n  return 0;\n}\n\nexport const validate = (v) =>\n  typeof v === 'string' && /^[v\\d]/.test(v) && semver.test(v);\n\nexport const compare = (v1, v2, operator) => {\n  // validate input operator\n  assertValidOperator(operator);\n\n  // since result of compareVersions can only be -1 or 0 or 1\n  // a simple map can be used to replace switch\n  const res = compareVersions(v1, v2);\n\n  return operatorResMap[operator].includes(res);\n};\n\nexport const satisfies = (v, r) => {\n  // if no range operator then \"=\"\n  const m = r.match(/^([<>=~^]+)/);\n  const op = m ? m[1] : '=';\n\n  // if gt/lt/eq then operator compare\n  if (op !== '^' && op !== '~') return compare(v, r, op);\n\n  // else range of either \"~\" or \"^\" is assumed\n  const [v1, v2, v3] = validateAndParse(v);\n  const [r1, r2, r3] = validateAndParse(r);\n  if (compareStrings(v1, r1) !== 0) return false;\n  if (op === '^') {\n    return compareSegments([v2, v3], [r2, r3]) >= 0;\n  }\n  if (compareStrings(v2, r2) !== 0) return false;\n  return compareStrings(v3, r3) >= 0;\n};\n\n// export CJS style for parity\ncompareVersions.validate = validate;\ncompareVersions.compare = compare;\ncompareVersions.satisfies = satisfies;\n\nconst semver =\n  /^[v^~<>=]*?(\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+))?(?:-([\\da-z\\-]+(?:\\.[\\da-z\\-]+)*))?(?:\\+[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?)?)?$/i;\n\nconst validateAndParse = (v) => {\n  if (typeof v !== 'string') {\n    throw new TypeError('Invalid argument expected string');\n  }\n  const match = v.match(semver);\n  if (!match) {\n    throw new Error(`Invalid argument not valid semver ('${v}' received)`);\n  }\n  match.shift();\n  return match;\n};\n\nconst isWildcard = (s) => s === '*' || s === 'x' || s === 'X';\n\nconst tryParse = (v) => {\n  const n = parseInt(v, 10);\n  return isNaN(n) ? v : n;\n};\n\nconst forceType = (a, b) =>\n  typeof a !== typeof b ? [String(a), String(b)] : [a, b];\n\nconst compareStrings = (a, b) => {\n  if (isWildcard(a) || isWildcard(b)) return 0;\n  const [ap, bp] = forceType(tryParse(a), tryParse(b));\n  if (ap > bp) return 1;\n  if (ap < bp) return -1;\n  return 0;\n};\n\nconst compareSegments = (a, b) => {\n  for (let i = 0; i < Math.max(a.length, b.length); i++) {\n    const r = compareStrings(a[i] || 0, b[i] || 0);\n    if (r !== 0) return r;\n  }\n  return 0;\n};\n\nconst operatorResMap = {\n  '>': [1],\n  '>=': [0, 1],\n  '=': [0],\n  '<=': [-1, 0],\n  '<': [-1],\n};\n\nconst allowedOperators = Object.keys(operatorResMap);\n\nconst assertValidOperator = (op) => {\n  if (typeof op !== 'string') {\n    throw new TypeError(\n      `Invalid operator type, expected string but got ${typeof op}`\n    );\n  }\n  if (allowedOperators.indexOf(op) === -1) {\n    throw new Error(\n      `Invalid operator, expected one of ${allowedOperators.join('|')}`\n    );\n  }\n};\n"],"names":["createKeccakHash","__webpack_require__","secp256k1","assert","rlp","BN","createHash","exports","MAX_INTEGER","TWO_POW256","SHA3_NULL_S","SHA3_NULL","Buffer","from","SHA3_RLP_ARRAY_S","SHA3_RLP_ARRAY","SHA3_RLP_S","SHA3_RLP","zeros","bytes","allocUnsafe","fill","setLengthLeft","setLength","msg","length","right","buf","toBuffer","copy","slice","setLengthRight","unpad","stripZeros","a","first","stripHexPrefix","toString","v","isBuffer","Array","isArray","isHexPrefixed","padToEven","intToBuffer","toArray","intToHex","i","hex","bufferToInt","toNumber","bufferToHex","fromSigned","num","fromTwos","toUnsigned","toTwos","sha3","bits","update","digest","sha256","ripemd160","padded","hash","rlphash","encode","isValidPrivate","privateKey","privateKeyVerify","isValidPublic","publicKey","sanitize","publicKeyVerify","concat","pubToAddress","publicToAddress","pubKey","publicKeyConvert","privateToPublic","publicKeyCreate","importPublic","ecsign","msgHash","sig","sign","ret","r","signature","s","recovery","hashPersonalMessage","message","prefix","ecrecover","senderPubKey","recover","toRpcSig","fromRpcSig","privateToAddress","isValidAddress","address","test","toChecksumAddress","toLowerCase","parseInt","toUpperCase","isValidChecksumAddress","generateAddress","nonce","isZero","isPrecompiled","str","addHexPrefix","SECP256K1_N_DIV_2","SECP256K1_N","isValidSignature","homestead","gt","cmp","baToJSON","ba","array","push","defineProperties","self","fields","data","raw","_fields","toJSON","label","obj","forEach","field","serialize","getter","setter","allowZero","allowLess","name","Object","defineProperty","enumerable","configurable","get","set","default","alias","decode","d","keys","indexOf","module","createKeccak","createShake","KeccakState","Keccak","Shake","algorithm","options","Transform","inherits","rate","capacity","delimitedSuffix","hashBitLength","call","_rate","_capacity","_delimitedSuffix","_hashBitLength","_options","_state","initialize","_finalized","prototype","_transform","chunk","encoding","callback","error","err","_flush","absorb","absorbLastFewBits","squeeze","undefined","_resetState","_clone","clone","_read","size","dataByteLength","P1600_ROUND_CONSTANTS","p1600","round","lo0","hi0","lo1","hi1","lo2","hi2","lo3","hi3","lo4","hi4","lo","hi","t1slo0","t1shi0","t1slo5","t1shi5","t1slo10","t1shi10","t1slo15","t1shi15","t1slo20","t1shi20","t1slo1","t1shi1","t1slo6","t1shi6","t1slo11","t1shi11","t1slo16","t1shi16","t1slo21","t1shi21","t1slo2","t1shi2","t1slo7","t1shi7","t1slo12","t1shi12","t1slo17","t1shi17","t1slo22","t1shi22","t1slo3","t1shi3","t1slo8","t1shi8","t1slo13","t1shi13","t1slo18","t1shi18","t1slo23","t1shi23","t1slo4","t1shi4","t1slo9","t1shi9","t1slo14","t1shi14","t1slo19","t1shi19","t1slo24","t1shi24","t2slo16","t2shi16","t2slo7","t2shi7","t2slo23","t2shi23","t2slo14","t2shi14","t2slo10","t2shi10","t2slo1","t2shi1","t2slo17","t2shi17","t2slo8","t2shi8","t2slo24","t2shi24","t2slo20","t2shi20","t2slo11","t2shi11","t2slo2","t2shi2","t2slo18","t2shi18","t2slo9","t2shi9","t2slo5","t2shi5","t2slo21","t2shi21","t2slo12","t2shi12","t2slo3","t2shi3","t2slo19","t2shi19","t2slo15","t2shi15","t2slo6","t2shi6","t2slo22","t2shi22","t2slo13","t2shi13","t2slo4","t2shi4","t2slo0","t2shi0","keccakState","state","blockSize","count","squeezing","output","alloc","dest","ONBOARDING_STATE","INSTALLED","NOT_INSTALLED","REGISTERED","REGISTERING","RELOADING","EXTENSION_DOWNLOAD_URL","CHROME","FIREFOX","DEFAULT","REGISTRATION_IN_PROGRESS","FORWARDER_ID","Onboarding","_a","_b","_c","forwarderOrigin","_d","forwarderMode","FORWARDER_MODE","INJECT","isStarMaskInstalled","browser","_detectBrowser","downloadUrl","_onMessage","bind","_onMessageFromForwarder","_openForwarder","_openDownloadPage","startOnboarding","stopOnboarding","window","addEventListener","sessionStorage","getItem","_injectForwarder","event","origin","type","console","debug","JSON","stringify","_onMessageUnknownStateError","thisArg","_arguments","P","generator","__generator","body","f","y","t","g","_","sent","trys","ops","next","verb","Symbol","iterator","n","step","op","done","value","pop","e","location","reload","_register","source","postMessage","Promise","resolve","reject","fulfilled","rejected","result","adopt","then","apply","setItem","_removeForwarder","OPEN_TAB","open","Boolean","starcoin","isStarMask","request","method","container","document","iframe","createElement","setAttribute","insertBefore","children","getElementById","remove","browserInfo","bowser__WEBPACK_IMPORTED_MODULE_0___default","parse","navigator","userAgent","includes","gW","ALPHABET","ALPHABET_MAP","z","x","charAt","polymodStep","pre","b","prefixChk","chk","c","charCodeAt","convert","inBits","outBits","pad","maxV","toWords","fromWordsUnsafe","words","res","fromWords","getLibraryFromEncoding","ENCODING_CONST","__decode","LIMIT","lowered","uppered","split","lastIndexOf","wordChars","decodeUnsafe","check","buffer","lenR","lenS","character","code","alphabetical","decimal","re","fromCode","String","fromCharCode","TypeError","isBoolean","isFunction","isNumber","isObject","isBufferLength","RangeError","isBufferLength2","length1","length2","isLengthGTZero","isNumberInInterval","number","bip66","EC_PRIVKEY_EXPORT_DER_COMPRESSED","EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED","privateKeyExport","compressed","privateKeyImport","index","lenb","len","signatureExport","sigObj","posR","posS","signatureImport","signatureImportLax","lenbyte","rlen","rindex","slen","sindex","rvalue","svalue","EC","ec","messages","ecparams","curve","loadPublicKey","loadCompressedPublicKey","xBuffer","p","toRed","red","redSqr","redIMul","redIAdd","redSqrt","isOdd","redNeg","keyPair","pub","loadUncompressedPublicKey","yBuffer","x3","redISub","bn","EC_PRIVATE_KEY_EXPORT_DER_FAIL","keyFromPrivate","getPublic","privateKeyNegate","sub","umod","toArrayLike","privateKeyModInverse","EC_PRIVATE_KEY_RANGE_INVALID","invm","privateKeyTweakAdd","tweak","iadd","isub","EC_PRIVATE_KEY_TWEAK_ADD_FAIL","privateKeyTweakMul","EC_PRIVATE_KEY_TWEAK_MUL_FAIL","imul","EC_PUBLIC_KEY_CREATE_FAIL","pair","EC_PUBLIC_KEY_PARSE_FAIL","publicKeyTweakAdd","EC_PUBLIC_KEY_TWEAK_ADD_FAIL","point","mul","add","isInfinity","publicKeyTweakMul","EC_PUBLIC_KEY_TWEAK_MUL_FAIL","publicKeyCombine","publicKeys","pairs","j","EC_PUBLIC_KEY_COMBINE_FAIL","signatureNormalize","ECDSA_SIGNATURE_PARSE_FAIL","nh","noncefn","getNonce","counter","ECDSA_SIGN_FAIL","canonical","k","pers","recoveryParam","verify","sigr","sigs","recoverPubKey","ECDSA_RECOVER_FAIL","ecdh","shared","ecdhUnsafe","scalar","ECDH_FAIL","der","initCompressedValue","defaultValue","COMPRESSED_TYPE_INVALID","EC_PRIVATE_KEY_TYPE_INVALID","EC_PRIVATE_KEY_LENGTH_INVALID","EC_PRIVATE_KEY_IMPORT_DER_FAIL","TWEAK_TYPE_INVALID","TWEAK_LENGTH_INVALID","EC_PUBLIC_KEY_TYPE_INVALID","EC_PUBLIC_KEY_LENGTH_INVALID","EC_PUBLIC_KEYS_TYPE_INVALID","EC_PUBLIC_KEYS_LENGTH_INVALID","ECDSA_SIGNATURE_TYPE_INVALID","ECDSA_SIGNATURE_LENGTH_INVALID","ECDSA_SIGNATURE_PARSE_DER_FAIL","MSG32_TYPE_INVALID","MSG32_LENGTH_INVALID","OPTIONS_TYPE_INVALID","OPTIONS_DATA_TYPE_INVALID","OPTIONS_DATA_LENGTH_INVALID","OPTIONS_NONCEFN_TYPE_INVALID","RECOVERY_ID_TYPE_INVALID","RECOVERY_ID_VALUE_INVALID","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","POWS_TEN","bitFloor","coeffToString","LOG_BASE","compare","xc","yc","l","intCheck","min","max","Error","toExponential","toFixedPoint","zs","BigNumber","configObject","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","div","convertBase","parseNumeric","constructor","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","alphabetHasNormalDecimalDigits","alphabet","caseChanged","isNum","_isBigNumber","replace","search","substring","DEBUG","format","rm","id","c0","ne","maxOrMin","args","m","normalise","sd","ni","rd","out","pows10","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","lt","minimum","random","dp","rand","Uint32Array","splice","sum","plus","toBaseOut","baseIn","baseOut","arrL","arr","reverse","callerIsToString","pow","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","minus","xLTy","xe","ye","BASE","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","toFraction","md","d0","d1","d2","exp","n0","n1","toPrecision","toStringTag","for","__webpack_exports__","Z","compareVersions","v1","v2","validateAndParse","n2","compareSegments","operator","assertValidOperator","operatorResMap","validate","semver","satisfies","match","v3","r1","r2","r3","compareStrings","shift","isWildcard","tryParse","forceType","ap","bp","allowedOperators","join"],"sourceRoot":""}