{"version":3,"file":"static/chunks/780.a52c8bf94903968d.js","mappings":"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","sources":["webpack://_N_E/./node_modules/tweetnacl/nacl-fast.js","webpack://_N_E/<anon>"],"sourcesContent":["(function(nacl) {\n'use strict';\n\n// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.\n// Public domain.\n//\n// Implementation derived from TweetNaCl version 20140427.\n// See for details: http://tweetnacl.cr.yp.to/\n\nvar gf = function(init) {\n  var i, r = new Float64Array(16);\n  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];\n  return r;\n};\n\n//  Pluggable, initialized in high-level API below.\nvar randombytes = function(/* x, n */) { throw new Error('no PRNG'); };\n\nvar _0 = new Uint8Array(16);\nvar _9 = new Uint8Array(32); _9[0] = 9;\n\nvar gf0 = gf(),\n    gf1 = gf([1]),\n    _121665 = gf([0xdb41, 1]),\n    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),\n    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),\n    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),\n    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),\n    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\nfunction ts64(x, i, h, l) {\n  x[i]   = (h >> 24) & 0xff;\n  x[i+1] = (h >> 16) & 0xff;\n  x[i+2] = (h >>  8) & 0xff;\n  x[i+3] = h & 0xff;\n  x[i+4] = (l >> 24)  & 0xff;\n  x[i+5] = (l >> 16)  & 0xff;\n  x[i+6] = (l >>  8)  & 0xff;\n  x[i+7] = l & 0xff;\n}\n\nfunction vn(x, xi, y, yi, n) {\n  var i,d = 0;\n  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];\n  return (1 & ((d - 1) >>> 8)) - 1;\n}\n\nfunction crypto_verify_16(x, xi, y, yi) {\n  return vn(x,xi,y,yi,16);\n}\n\nfunction crypto_verify_32(x, xi, y, yi) {\n  return vn(x,xi,y,yi,32);\n}\n\nfunction core_salsa20(o, p, k, c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,\n      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,\n      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,\n      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,\n      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,\n      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,\n      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,\n      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u;\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0;\n    x4 ^= u<<7 | u>>>(32-7);\n    u = x4 + x0 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x4 | 0;\n    x12 ^= u<<13 | u>>>(32-13);\n    u = x12 + x8 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x1 | 0;\n    x9 ^= u<<7 | u>>>(32-7);\n    u = x9 + x5 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x9 | 0;\n    x1 ^= u<<13 | u>>>(32-13);\n    u = x1 + x13 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x6 | 0;\n    x14 ^= u<<7 | u>>>(32-7);\n    u = x14 + x10 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x14 | 0;\n    x6 ^= u<<13 | u>>>(32-13);\n    u = x6 + x2 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x11 | 0;\n    x3 ^= u<<7 | u>>>(32-7);\n    u = x3 + x15 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x3 | 0;\n    x11 ^= u<<13 | u>>>(32-13);\n    u = x11 + x7 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n\n    u = x0 + x3 | 0;\n    x1 ^= u<<7 | u>>>(32-7);\n    u = x1 + x0 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x1 | 0;\n    x3 ^= u<<13 | u>>>(32-13);\n    u = x3 + x2 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x4 | 0;\n    x6 ^= u<<7 | u>>>(32-7);\n    u = x6 + x5 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x6 | 0;\n    x4 ^= u<<13 | u>>>(32-13);\n    u = x4 + x7 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x9 | 0;\n    x11 ^= u<<7 | u>>>(32-7);\n    u = x11 + x10 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x11 | 0;\n    x9 ^= u<<13 | u>>>(32-13);\n    u = x9 + x8 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x14 | 0;\n    x12 ^= u<<7 | u>>>(32-7);\n    u = x12 + x15 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x12 | 0;\n    x14 ^= u<<13 | u>>>(32-13);\n    u = x14 + x13 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n  }\n   x0 =  x0 +  j0 | 0;\n   x1 =  x1 +  j1 | 0;\n   x2 =  x2 +  j2 | 0;\n   x3 =  x3 +  j3 | 0;\n   x4 =  x4 +  j4 | 0;\n   x5 =  x5 +  j5 | 0;\n   x6 =  x6 +  j6 | 0;\n   x7 =  x7 +  j7 | 0;\n   x8 =  x8 +  j8 | 0;\n   x9 =  x9 +  j9 | 0;\n  x10 = x10 + j10 | 0;\n  x11 = x11 + j11 | 0;\n  x12 = x12 + j12 | 0;\n  x13 = x13 + j13 | 0;\n  x14 = x14 + j14 | 0;\n  x15 = x15 + j15 | 0;\n\n  o[ 0] = x0 >>>  0 & 0xff;\n  o[ 1] = x0 >>>  8 & 0xff;\n  o[ 2] = x0 >>> 16 & 0xff;\n  o[ 3] = x0 >>> 24 & 0xff;\n\n  o[ 4] = x1 >>>  0 & 0xff;\n  o[ 5] = x1 >>>  8 & 0xff;\n  o[ 6] = x1 >>> 16 & 0xff;\n  o[ 7] = x1 >>> 24 & 0xff;\n\n  o[ 8] = x2 >>>  0 & 0xff;\n  o[ 9] = x2 >>>  8 & 0xff;\n  o[10] = x2 >>> 16 & 0xff;\n  o[11] = x2 >>> 24 & 0xff;\n\n  o[12] = x3 >>>  0 & 0xff;\n  o[13] = x3 >>>  8 & 0xff;\n  o[14] = x3 >>> 16 & 0xff;\n  o[15] = x3 >>> 24 & 0xff;\n\n  o[16] = x4 >>>  0 & 0xff;\n  o[17] = x4 >>>  8 & 0xff;\n  o[18] = x4 >>> 16 & 0xff;\n  o[19] = x4 >>> 24 & 0xff;\n\n  o[20] = x5 >>>  0 & 0xff;\n  o[21] = x5 >>>  8 & 0xff;\n  o[22] = x5 >>> 16 & 0xff;\n  o[23] = x5 >>> 24 & 0xff;\n\n  o[24] = x6 >>>  0 & 0xff;\n  o[25] = x6 >>>  8 & 0xff;\n  o[26] = x6 >>> 16 & 0xff;\n  o[27] = x6 >>> 24 & 0xff;\n\n  o[28] = x7 >>>  0 & 0xff;\n  o[29] = x7 >>>  8 & 0xff;\n  o[30] = x7 >>> 16 & 0xff;\n  o[31] = x7 >>> 24 & 0xff;\n\n  o[32] = x8 >>>  0 & 0xff;\n  o[33] = x8 >>>  8 & 0xff;\n  o[34] = x8 >>> 16 & 0xff;\n  o[35] = x8 >>> 24 & 0xff;\n\n  o[36] = x9 >>>  0 & 0xff;\n  o[37] = x9 >>>  8 & 0xff;\n  o[38] = x9 >>> 16 & 0xff;\n  o[39] = x9 >>> 24 & 0xff;\n\n  o[40] = x10 >>>  0 & 0xff;\n  o[41] = x10 >>>  8 & 0xff;\n  o[42] = x10 >>> 16 & 0xff;\n  o[43] = x10 >>> 24 & 0xff;\n\n  o[44] = x11 >>>  0 & 0xff;\n  o[45] = x11 >>>  8 & 0xff;\n  o[46] = x11 >>> 16 & 0xff;\n  o[47] = x11 >>> 24 & 0xff;\n\n  o[48] = x12 >>>  0 & 0xff;\n  o[49] = x12 >>>  8 & 0xff;\n  o[50] = x12 >>> 16 & 0xff;\n  o[51] = x12 >>> 24 & 0xff;\n\n  o[52] = x13 >>>  0 & 0xff;\n  o[53] = x13 >>>  8 & 0xff;\n  o[54] = x13 >>> 16 & 0xff;\n  o[55] = x13 >>> 24 & 0xff;\n\n  o[56] = x14 >>>  0 & 0xff;\n  o[57] = x14 >>>  8 & 0xff;\n  o[58] = x14 >>> 16 & 0xff;\n  o[59] = x14 >>> 24 & 0xff;\n\n  o[60] = x15 >>>  0 & 0xff;\n  o[61] = x15 >>>  8 & 0xff;\n  o[62] = x15 >>> 16 & 0xff;\n  o[63] = x15 >>> 24 & 0xff;\n}\n\nfunction core_hsalsa20(o,p,k,c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,\n      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,\n      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,\n      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,\n      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,\n      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,\n      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,\n      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u;\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0;\n    x4 ^= u<<7 | u>>>(32-7);\n    u = x4 + x0 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x4 | 0;\n    x12 ^= u<<13 | u>>>(32-13);\n    u = x12 + x8 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x1 | 0;\n    x9 ^= u<<7 | u>>>(32-7);\n    u = x9 + x5 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x9 | 0;\n    x1 ^= u<<13 | u>>>(32-13);\n    u = x1 + x13 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x6 | 0;\n    x14 ^= u<<7 | u>>>(32-7);\n    u = x14 + x10 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x14 | 0;\n    x6 ^= u<<13 | u>>>(32-13);\n    u = x6 + x2 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x11 | 0;\n    x3 ^= u<<7 | u>>>(32-7);\n    u = x3 + x15 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x3 | 0;\n    x11 ^= u<<13 | u>>>(32-13);\n    u = x11 + x7 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n\n    u = x0 + x3 | 0;\n    x1 ^= u<<7 | u>>>(32-7);\n    u = x1 + x0 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x1 | 0;\n    x3 ^= u<<13 | u>>>(32-13);\n    u = x3 + x2 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x4 | 0;\n    x6 ^= u<<7 | u>>>(32-7);\n    u = x6 + x5 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x6 | 0;\n    x4 ^= u<<13 | u>>>(32-13);\n    u = x4 + x7 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x9 | 0;\n    x11 ^= u<<7 | u>>>(32-7);\n    u = x11 + x10 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x11 | 0;\n    x9 ^= u<<13 | u>>>(32-13);\n    u = x9 + x8 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x14 | 0;\n    x12 ^= u<<7 | u>>>(32-7);\n    u = x12 + x15 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x12 | 0;\n    x14 ^= u<<13 | u>>>(32-13);\n    u = x14 + x13 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n  }\n\n  o[ 0] = x0 >>>  0 & 0xff;\n  o[ 1] = x0 >>>  8 & 0xff;\n  o[ 2] = x0 >>> 16 & 0xff;\n  o[ 3] = x0 >>> 24 & 0xff;\n\n  o[ 4] = x5 >>>  0 & 0xff;\n  o[ 5] = x5 >>>  8 & 0xff;\n  o[ 6] = x5 >>> 16 & 0xff;\n  o[ 7] = x5 >>> 24 & 0xff;\n\n  o[ 8] = x10 >>>  0 & 0xff;\n  o[ 9] = x10 >>>  8 & 0xff;\n  o[10] = x10 >>> 16 & 0xff;\n  o[11] = x10 >>> 24 & 0xff;\n\n  o[12] = x15 >>>  0 & 0xff;\n  o[13] = x15 >>>  8 & 0xff;\n  o[14] = x15 >>> 16 & 0xff;\n  o[15] = x15 >>> 24 & 0xff;\n\n  o[16] = x6 >>>  0 & 0xff;\n  o[17] = x6 >>>  8 & 0xff;\n  o[18] = x6 >>> 16 & 0xff;\n  o[19] = x6 >>> 24 & 0xff;\n\n  o[20] = x7 >>>  0 & 0xff;\n  o[21] = x7 >>>  8 & 0xff;\n  o[22] = x7 >>> 16 & 0xff;\n  o[23] = x7 >>> 24 & 0xff;\n\n  o[24] = x8 >>>  0 & 0xff;\n  o[25] = x8 >>>  8 & 0xff;\n  o[26] = x8 >>> 16 & 0xff;\n  o[27] = x8 >>> 24 & 0xff;\n\n  o[28] = x9 >>>  0 & 0xff;\n  o[29] = x9 >>>  8 & 0xff;\n  o[30] = x9 >>> 16 & 0xff;\n  o[31] = x9 >>> 24 & 0xff;\n}\n\nfunction crypto_core_salsa20(out,inp,k,c) {\n  core_salsa20(out,inp,k,c);\n}\n\nfunction crypto_core_hsalsa20(out,inp,k,c) {\n  core_hsalsa20(out,inp,k,c);\n}\n\nvar sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);\n            // \"expand 32-byte k\"\n\nfunction crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {\n  var z = new Uint8Array(16), x = new Uint8Array(64);\n  var u, i;\n  for (i = 0; i < 16; i++) z[i] = 0;\n  for (i = 0; i < 8; i++) z[i] = n[i];\n  while (b >= 64) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];\n    u = 1;\n    for (i = 8; i < 16; i++) {\n      u = u + (z[i] & 0xff) | 0;\n      z[i] = u & 0xff;\n      u >>>= 8;\n    }\n    b -= 64;\n    cpos += 64;\n    mpos += 64;\n  }\n  if (b > 0) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];\n  }\n  return 0;\n}\n\nfunction crypto_stream_salsa20(c,cpos,b,n,k) {\n  var z = new Uint8Array(16), x = new Uint8Array(64);\n  var u, i;\n  for (i = 0; i < 16; i++) z[i] = 0;\n  for (i = 0; i < 8; i++) z[i] = n[i];\n  while (b >= 64) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < 64; i++) c[cpos+i] = x[i];\n    u = 1;\n    for (i = 8; i < 16; i++) {\n      u = u + (z[i] & 0xff) | 0;\n      z[i] = u & 0xff;\n      u >>>= 8;\n    }\n    b -= 64;\n    cpos += 64;\n  }\n  if (b > 0) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < b; i++) c[cpos+i] = x[i];\n  }\n  return 0;\n}\n\nfunction crypto_stream(c,cpos,d,n,k) {\n  var s = new Uint8Array(32);\n  crypto_core_hsalsa20(s,n,k,sigma);\n  var sn = new Uint8Array(8);\n  for (var i = 0; i < 8; i++) sn[i] = n[i+16];\n  return crypto_stream_salsa20(c,cpos,d,sn,s);\n}\n\nfunction crypto_stream_xor(c,cpos,m,mpos,d,n,k) {\n  var s = new Uint8Array(32);\n  crypto_core_hsalsa20(s,n,k,sigma);\n  var sn = new Uint8Array(8);\n  for (var i = 0; i < 8; i++) sn[i] = n[i+16];\n  return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);\n}\n\n/*\n* Port of Andrew Moon's Poly1305-donna-16. Public domain.\n* https://github.com/floodyberry/poly1305-donna\n*/\n\nvar poly1305 = function(key) {\n  this.buffer = new Uint8Array(16);\n  this.r = new Uint16Array(10);\n  this.h = new Uint16Array(10);\n  this.pad = new Uint16Array(8);\n  this.leftover = 0;\n  this.fin = 0;\n\n  var t0, t1, t2, t3, t4, t5, t6, t7;\n\n  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;\n  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;\n  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;\n  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;\n  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;\n  this.r[5] = ((t4 >>>  1)) & 0x1ffe;\n  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;\n  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;\n  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;\n  this.r[9] = ((t7 >>>  5)) & 0x007f;\n\n  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;\n  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;\n  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;\n  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;\n  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;\n  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;\n  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;\n  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;\n};\n\npoly1305.prototype.blocks = function(m, mpos, bytes) {\n  var hibit = this.fin ? 0 : (1 << 11);\n  var t0, t1, t2, t3, t4, t5, t6, t7, c;\n  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;\n\n  var h0 = this.h[0],\n      h1 = this.h[1],\n      h2 = this.h[2],\n      h3 = this.h[3],\n      h4 = this.h[4],\n      h5 = this.h[5],\n      h6 = this.h[6],\n      h7 = this.h[7],\n      h8 = this.h[8],\n      h9 = this.h[9];\n\n  var r0 = this.r[0],\n      r1 = this.r[1],\n      r2 = this.r[2],\n      r3 = this.r[3],\n      r4 = this.r[4],\n      r5 = this.r[5],\n      r6 = this.r[6],\n      r7 = this.r[7],\n      r8 = this.r[8],\n      r9 = this.r[9];\n\n  while (bytes >= 16) {\n    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;\n    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;\n    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;\n    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;\n    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;\n    h5 += ((t4 >>>  1)) & 0x1fff;\n    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;\n    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;\n    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;\n    h9 += ((t7 >>> 5)) | hibit;\n\n    c = 0;\n\n    d0 = c;\n    d0 += h0 * r0;\n    d0 += h1 * (5 * r9);\n    d0 += h2 * (5 * r8);\n    d0 += h3 * (5 * r7);\n    d0 += h4 * (5 * r6);\n    c = (d0 >>> 13); d0 &= 0x1fff;\n    d0 += h5 * (5 * r5);\n    d0 += h6 * (5 * r4);\n    d0 += h7 * (5 * r3);\n    d0 += h8 * (5 * r2);\n    d0 += h9 * (5 * r1);\n    c += (d0 >>> 13); d0 &= 0x1fff;\n\n    d1 = c;\n    d1 += h0 * r1;\n    d1 += h1 * r0;\n    d1 += h2 * (5 * r9);\n    d1 += h3 * (5 * r8);\n    d1 += h4 * (5 * r7);\n    c = (d1 >>> 13); d1 &= 0x1fff;\n    d1 += h5 * (5 * r6);\n    d1 += h6 * (5 * r5);\n    d1 += h7 * (5 * r4);\n    d1 += h8 * (5 * r3);\n    d1 += h9 * (5 * r2);\n    c += (d1 >>> 13); d1 &= 0x1fff;\n\n    d2 = c;\n    d2 += h0 * r2;\n    d2 += h1 * r1;\n    d2 += h2 * r0;\n    d2 += h3 * (5 * r9);\n    d2 += h4 * (5 * r8);\n    c = (d2 >>> 13); d2 &= 0x1fff;\n    d2 += h5 * (5 * r7);\n    d2 += h6 * (5 * r6);\n    d2 += h7 * (5 * r5);\n    d2 += h8 * (5 * r4);\n    d2 += h9 * (5 * r3);\n    c += (d2 >>> 13); d2 &= 0x1fff;\n\n    d3 = c;\n    d3 += h0 * r3;\n    d3 += h1 * r2;\n    d3 += h2 * r1;\n    d3 += h3 * r0;\n    d3 += h4 * (5 * r9);\n    c = (d3 >>> 13); d3 &= 0x1fff;\n    d3 += h5 * (5 * r8);\n    d3 += h6 * (5 * r7);\n    d3 += h7 * (5 * r6);\n    d3 += h8 * (5 * r5);\n    d3 += h9 * (5 * r4);\n    c += (d3 >>> 13); d3 &= 0x1fff;\n\n    d4 = c;\n    d4 += h0 * r4;\n    d4 += h1 * r3;\n    d4 += h2 * r2;\n    d4 += h3 * r1;\n    d4 += h4 * r0;\n    c = (d4 >>> 13); d4 &= 0x1fff;\n    d4 += h5 * (5 * r9);\n    d4 += h6 * (5 * r8);\n    d4 += h7 * (5 * r7);\n    d4 += h8 * (5 * r6);\n    d4 += h9 * (5 * r5);\n    c += (d4 >>> 13); d4 &= 0x1fff;\n\n    d5 = c;\n    d5 += h0 * r5;\n    d5 += h1 * r4;\n    d5 += h2 * r3;\n    d5 += h3 * r2;\n    d5 += h4 * r1;\n    c = (d5 >>> 13); d5 &= 0x1fff;\n    d5 += h5 * r0;\n    d5 += h6 * (5 * r9);\n    d5 += h7 * (5 * r8);\n    d5 += h8 * (5 * r7);\n    d5 += h9 * (5 * r6);\n    c += (d5 >>> 13); d5 &= 0x1fff;\n\n    d6 = c;\n    d6 += h0 * r6;\n    d6 += h1 * r5;\n    d6 += h2 * r4;\n    d6 += h3 * r3;\n    d6 += h4 * r2;\n    c = (d6 >>> 13); d6 &= 0x1fff;\n    d6 += h5 * r1;\n    d6 += h6 * r0;\n    d6 += h7 * (5 * r9);\n    d6 += h8 * (5 * r8);\n    d6 += h9 * (5 * r7);\n    c += (d6 >>> 13); d6 &= 0x1fff;\n\n    d7 = c;\n    d7 += h0 * r7;\n    d7 += h1 * r6;\n    d7 += h2 * r5;\n    d7 += h3 * r4;\n    d7 += h4 * r3;\n    c = (d7 >>> 13); d7 &= 0x1fff;\n    d7 += h5 * r2;\n    d7 += h6 * r1;\n    d7 += h7 * r0;\n    d7 += h8 * (5 * r9);\n    d7 += h9 * (5 * r8);\n    c += (d7 >>> 13); d7 &= 0x1fff;\n\n    d8 = c;\n    d8 += h0 * r8;\n    d8 += h1 * r7;\n    d8 += h2 * r6;\n    d8 += h3 * r5;\n    d8 += h4 * r4;\n    c = (d8 >>> 13); d8 &= 0x1fff;\n    d8 += h5 * r3;\n    d8 += h6 * r2;\n    d8 += h7 * r1;\n    d8 += h8 * r0;\n    d8 += h9 * (5 * r9);\n    c += (d8 >>> 13); d8 &= 0x1fff;\n\n    d9 = c;\n    d9 += h0 * r9;\n    d9 += h1 * r8;\n    d9 += h2 * r7;\n    d9 += h3 * r6;\n    d9 += h4 * r5;\n    c = (d9 >>> 13); d9 &= 0x1fff;\n    d9 += h5 * r4;\n    d9 += h6 * r3;\n    d9 += h7 * r2;\n    d9 += h8 * r1;\n    d9 += h9 * r0;\n    c += (d9 >>> 13); d9 &= 0x1fff;\n\n    c = (((c << 2) + c)) | 0;\n    c = (c + d0) | 0;\n    d0 = c & 0x1fff;\n    c = (c >>> 13);\n    d1 += c;\n\n    h0 = d0;\n    h1 = d1;\n    h2 = d2;\n    h3 = d3;\n    h4 = d4;\n    h5 = d5;\n    h6 = d6;\n    h7 = d7;\n    h8 = d8;\n    h9 = d9;\n\n    mpos += 16;\n    bytes -= 16;\n  }\n  this.h[0] = h0;\n  this.h[1] = h1;\n  this.h[2] = h2;\n  this.h[3] = h3;\n  this.h[4] = h4;\n  this.h[5] = h5;\n  this.h[6] = h6;\n  this.h[7] = h7;\n  this.h[8] = h8;\n  this.h[9] = h9;\n};\n\npoly1305.prototype.finish = function(mac, macpos) {\n  var g = new Uint16Array(10);\n  var c, mask, f, i;\n\n  if (this.leftover) {\n    i = this.leftover;\n    this.buffer[i++] = 1;\n    for (; i < 16; i++) this.buffer[i] = 0;\n    this.fin = 1;\n    this.blocks(this.buffer, 0, 16);\n  }\n\n  c = this.h[1] >>> 13;\n  this.h[1] &= 0x1fff;\n  for (i = 2; i < 10; i++) {\n    this.h[i] += c;\n    c = this.h[i] >>> 13;\n    this.h[i] &= 0x1fff;\n  }\n  this.h[0] += (c * 5);\n  c = this.h[0] >>> 13;\n  this.h[0] &= 0x1fff;\n  this.h[1] += c;\n  c = this.h[1] >>> 13;\n  this.h[1] &= 0x1fff;\n  this.h[2] += c;\n\n  g[0] = this.h[0] + 5;\n  c = g[0] >>> 13;\n  g[0] &= 0x1fff;\n  for (i = 1; i < 10; i++) {\n    g[i] = this.h[i] + c;\n    c = g[i] >>> 13;\n    g[i] &= 0x1fff;\n  }\n  g[9] -= (1 << 13);\n\n  mask = (c ^ 1) - 1;\n  for (i = 0; i < 10; i++) g[i] &= mask;\n  mask = ~mask;\n  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];\n\n  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;\n  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;\n  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;\n  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;\n  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;\n  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;\n  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;\n  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;\n\n  f = this.h[0] + this.pad[0];\n  this.h[0] = f & 0xffff;\n  for (i = 1; i < 8; i++) {\n    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;\n    this.h[i] = f & 0xffff;\n  }\n\n  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;\n  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;\n  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;\n  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;\n  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;\n  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;\n  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;\n  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;\n  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;\n  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;\n  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;\n  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;\n  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;\n  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;\n  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;\n  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;\n};\n\npoly1305.prototype.update = function(m, mpos, bytes) {\n  var i, want;\n\n  if (this.leftover) {\n    want = (16 - this.leftover);\n    if (want > bytes)\n      want = bytes;\n    for (i = 0; i < want; i++)\n      this.buffer[this.leftover + i] = m[mpos+i];\n    bytes -= want;\n    mpos += want;\n    this.leftover += want;\n    if (this.leftover < 16)\n      return;\n    this.blocks(this.buffer, 0, 16);\n    this.leftover = 0;\n  }\n\n  if (bytes >= 16) {\n    want = bytes - (bytes % 16);\n    this.blocks(m, mpos, want);\n    mpos += want;\n    bytes -= want;\n  }\n\n  if (bytes) {\n    for (i = 0; i < bytes; i++)\n      this.buffer[this.leftover + i] = m[mpos+i];\n    this.leftover += bytes;\n  }\n};\n\nfunction crypto_onetimeauth(out, outpos, m, mpos, n, k) {\n  var s = new poly1305(k);\n  s.update(m, mpos, n);\n  s.finish(out, outpos);\n  return 0;\n}\n\nfunction crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {\n  var x = new Uint8Array(16);\n  crypto_onetimeauth(x,0,m,mpos,n,k);\n  return crypto_verify_16(h,hpos,x,0);\n}\n\nfunction crypto_secretbox(c,m,d,n,k) {\n  var i;\n  if (d < 32) return -1;\n  crypto_stream_xor(c,0,m,0,d,n,k);\n  crypto_onetimeauth(c, 16, c, 32, d - 32, c);\n  for (i = 0; i < 16; i++) c[i] = 0;\n  return 0;\n}\n\nfunction crypto_secretbox_open(m,c,d,n,k) {\n  var i;\n  var x = new Uint8Array(32);\n  if (d < 32) return -1;\n  crypto_stream(x,0,32,n,k);\n  if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;\n  crypto_stream_xor(m,0,c,0,d,n,k);\n  for (i = 0; i < 32; i++) m[i] = 0;\n  return 0;\n}\n\nfunction set25519(r, a) {\n  var i;\n  for (i = 0; i < 16; i++) r[i] = a[i]|0;\n}\n\nfunction car25519(o) {\n  var i, v, c = 1;\n  for (i = 0; i < 16; i++) {\n    v = o[i] + c + 65535;\n    c = Math.floor(v / 65536);\n    o[i] = v - c * 65536;\n  }\n  o[0] += c-1 + 37 * (c-1);\n}\n\nfunction sel25519(p, q, b) {\n  var t, c = ~(b-1);\n  for (var i = 0; i < 16; i++) {\n    t = c & (p[i] ^ q[i]);\n    p[i] ^= t;\n    q[i] ^= t;\n  }\n}\n\nfunction pack25519(o, n) {\n  var i, j, b;\n  var m = gf(), t = gf();\n  for (i = 0; i < 16; i++) t[i] = n[i];\n  car25519(t);\n  car25519(t);\n  car25519(t);\n  for (j = 0; j < 2; j++) {\n    m[0] = t[0] - 0xffed;\n    for (i = 1; i < 15; i++) {\n      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);\n      m[i-1] &= 0xffff;\n    }\n    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);\n    b = (m[15]>>16) & 1;\n    m[14] &= 0xffff;\n    sel25519(t, m, 1-b);\n  }\n  for (i = 0; i < 16; i++) {\n    o[2*i] = t[i] & 0xff;\n    o[2*i+1] = t[i]>>8;\n  }\n}\n\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32), d = new Uint8Array(32);\n  pack25519(c, a);\n  pack25519(d, b);\n  return crypto_verify_32(c, 0, d, 0);\n}\n\nfunction par25519(a) {\n  var d = new Uint8Array(32);\n  pack25519(d, a);\n  return d[0] & 1;\n}\n\nfunction unpack25519(o, n) {\n  var i;\n  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);\n  o[15] &= 0x7fff;\n}\n\nfunction A(o, a, b) {\n  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];\n}\n\nfunction Z(o, a, b) {\n  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];\n}\n\nfunction M(o, a, b) {\n  var v, c,\n     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,\n     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,\n    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,\n    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,\n    b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7],\n    b8 = b[8],\n    b9 = b[9],\n    b10 = b[10],\n    b11 = b[11],\n    b12 = b[12],\n    b13 = b[13],\n    b14 = b[14],\n    b15 = b[15];\n\n  v = a[0];\n  t0 += v * b0;\n  t1 += v * b1;\n  t2 += v * b2;\n  t3 += v * b3;\n  t4 += v * b4;\n  t5 += v * b5;\n  t6 += v * b6;\n  t7 += v * b7;\n  t8 += v * b8;\n  t9 += v * b9;\n  t10 += v * b10;\n  t11 += v * b11;\n  t12 += v * b12;\n  t13 += v * b13;\n  t14 += v * b14;\n  t15 += v * b15;\n  v = a[1];\n  t1 += v * b0;\n  t2 += v * b1;\n  t3 += v * b2;\n  t4 += v * b3;\n  t5 += v * b4;\n  t6 += v * b5;\n  t7 += v * b6;\n  t8 += v * b7;\n  t9 += v * b8;\n  t10 += v * b9;\n  t11 += v * b10;\n  t12 += v * b11;\n  t13 += v * b12;\n  t14 += v * b13;\n  t15 += v * b14;\n  t16 += v * b15;\n  v = a[2];\n  t2 += v * b0;\n  t3 += v * b1;\n  t4 += v * b2;\n  t5 += v * b3;\n  t6 += v * b4;\n  t7 += v * b5;\n  t8 += v * b6;\n  t9 += v * b7;\n  t10 += v * b8;\n  t11 += v * b9;\n  t12 += v * b10;\n  t13 += v * b11;\n  t14 += v * b12;\n  t15 += v * b13;\n  t16 += v * b14;\n  t17 += v * b15;\n  v = a[3];\n  t3 += v * b0;\n  t4 += v * b1;\n  t5 += v * b2;\n  t6 += v * b3;\n  t7 += v * b4;\n  t8 += v * b5;\n  t9 += v * b6;\n  t10 += v * b7;\n  t11 += v * b8;\n  t12 += v * b9;\n  t13 += v * b10;\n  t14 += v * b11;\n  t15 += v * b12;\n  t16 += v * b13;\n  t17 += v * b14;\n  t18 += v * b15;\n  v = a[4];\n  t4 += v * b0;\n  t5 += v * b1;\n  t6 += v * b2;\n  t7 += v * b3;\n  t8 += v * b4;\n  t9 += v * b5;\n  t10 += v * b6;\n  t11 += v * b7;\n  t12 += v * b8;\n  t13 += v * b9;\n  t14 += v * b10;\n  t15 += v * b11;\n  t16 += v * b12;\n  t17 += v * b13;\n  t18 += v * b14;\n  t19 += v * b15;\n  v = a[5];\n  t5 += v * b0;\n  t6 += v * b1;\n  t7 += v * b2;\n  t8 += v * b3;\n  t9 += v * b4;\n  t10 += v * b5;\n  t11 += v * b6;\n  t12 += v * b7;\n  t13 += v * b8;\n  t14 += v * b9;\n  t15 += v * b10;\n  t16 += v * b11;\n  t17 += v * b12;\n  t18 += v * b13;\n  t19 += v * b14;\n  t20 += v * b15;\n  v = a[6];\n  t6 += v * b0;\n  t7 += v * b1;\n  t8 += v * b2;\n  t9 += v * b3;\n  t10 += v * b4;\n  t11 += v * b5;\n  t12 += v * b6;\n  t13 += v * b7;\n  t14 += v * b8;\n  t15 += v * b9;\n  t16 += v * b10;\n  t17 += v * b11;\n  t18 += v * b12;\n  t19 += v * b13;\n  t20 += v * b14;\n  t21 += v * b15;\n  v = a[7];\n  t7 += v * b0;\n  t8 += v * b1;\n  t9 += v * b2;\n  t10 += v * b3;\n  t11 += v * b4;\n  t12 += v * b5;\n  t13 += v * b6;\n  t14 += v * b7;\n  t15 += v * b8;\n  t16 += v * b9;\n  t17 += v * b10;\n  t18 += v * b11;\n  t19 += v * b12;\n  t20 += v * b13;\n  t21 += v * b14;\n  t22 += v * b15;\n  v = a[8];\n  t8 += v * b0;\n  t9 += v * b1;\n  t10 += v * b2;\n  t11 += v * b3;\n  t12 += v * b4;\n  t13 += v * b5;\n  t14 += v * b6;\n  t15 += v * b7;\n  t16 += v * b8;\n  t17 += v * b9;\n  t18 += v * b10;\n  t19 += v * b11;\n  t20 += v * b12;\n  t21 += v * b13;\n  t22 += v * b14;\n  t23 += v * b15;\n  v = a[9];\n  t9 += v * b0;\n  t10 += v * b1;\n  t11 += v * b2;\n  t12 += v * b3;\n  t13 += v * b4;\n  t14 += v * b5;\n  t15 += v * b6;\n  t16 += v * b7;\n  t17 += v * b8;\n  t18 += v * b9;\n  t19 += v * b10;\n  t20 += v * b11;\n  t21 += v * b12;\n  t22 += v * b13;\n  t23 += v * b14;\n  t24 += v * b15;\n  v = a[10];\n  t10 += v * b0;\n  t11 += v * b1;\n  t12 += v * b2;\n  t13 += v * b3;\n  t14 += v * b4;\n  t15 += v * b5;\n  t16 += v * b6;\n  t17 += v * b7;\n  t18 += v * b8;\n  t19 += v * b9;\n  t20 += v * b10;\n  t21 += v * b11;\n  t22 += v * b12;\n  t23 += v * b13;\n  t24 += v * b14;\n  t25 += v * b15;\n  v = a[11];\n  t11 += v * b0;\n  t12 += v * b1;\n  t13 += v * b2;\n  t14 += v * b3;\n  t15 += v * b4;\n  t16 += v * b5;\n  t17 += v * b6;\n  t18 += v * b7;\n  t19 += v * b8;\n  t20 += v * b9;\n  t21 += v * b10;\n  t22 += v * b11;\n  t23 += v * b12;\n  t24 += v * b13;\n  t25 += v * b14;\n  t26 += v * b15;\n  v = a[12];\n  t12 += v * b0;\n  t13 += v * b1;\n  t14 += v * b2;\n  t15 += v * b3;\n  t16 += v * b4;\n  t17 += v * b5;\n  t18 += v * b6;\n  t19 += v * b7;\n  t20 += v * b8;\n  t21 += v * b9;\n  t22 += v * b10;\n  t23 += v * b11;\n  t24 += v * b12;\n  t25 += v * b13;\n  t26 += v * b14;\n  t27 += v * b15;\n  v = a[13];\n  t13 += v * b0;\n  t14 += v * b1;\n  t15 += v * b2;\n  t16 += v * b3;\n  t17 += v * b4;\n  t18 += v * b5;\n  t19 += v * b6;\n  t20 += v * b7;\n  t21 += v * b8;\n  t22 += v * b9;\n  t23 += v * b10;\n  t24 += v * b11;\n  t25 += v * b12;\n  t26 += v * b13;\n  t27 += v * b14;\n  t28 += v * b15;\n  v = a[14];\n  t14 += v * b0;\n  t15 += v * b1;\n  t16 += v * b2;\n  t17 += v * b3;\n  t18 += v * b4;\n  t19 += v * b5;\n  t20 += v * b6;\n  t21 += v * b7;\n  t22 += v * b8;\n  t23 += v * b9;\n  t24 += v * b10;\n  t25 += v * b11;\n  t26 += v * b12;\n  t27 += v * b13;\n  t28 += v * b14;\n  t29 += v * b15;\n  v = a[15];\n  t15 += v * b0;\n  t16 += v * b1;\n  t17 += v * b2;\n  t18 += v * b3;\n  t19 += v * b4;\n  t20 += v * b5;\n  t21 += v * b6;\n  t22 += v * b7;\n  t23 += v * b8;\n  t24 += v * b9;\n  t25 += v * b10;\n  t26 += v * b11;\n  t27 += v * b12;\n  t28 += v * b13;\n  t29 += v * b14;\n  t30 += v * b15;\n\n  t0  += 38 * t16;\n  t1  += 38 * t17;\n  t2  += 38 * t18;\n  t3  += 38 * t19;\n  t4  += 38 * t20;\n  t5  += 38 * t21;\n  t6  += 38 * t22;\n  t7  += 38 * t23;\n  t8  += 38 * t24;\n  t9  += 38 * t25;\n  t10 += 38 * t26;\n  t11 += 38 * t27;\n  t12 += 38 * t28;\n  t13 += 38 * t29;\n  t14 += 38 * t30;\n  // t15 left as is\n\n  // first car\n  c = 1;\n  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;\n  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;\n  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;\n  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;\n  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;\n  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;\n  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;\n  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;\n  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;\n  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;\n  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n  t0 += c-1 + 37 * (c-1);\n\n  // second car\n  c = 1;\n  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;\n  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;\n  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;\n  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;\n  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;\n  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;\n  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;\n  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;\n  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;\n  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;\n  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n  t0 += c-1 + 37 * (c-1);\n\n  o[ 0] = t0;\n  o[ 1] = t1;\n  o[ 2] = t2;\n  o[ 3] = t3;\n  o[ 4] = t4;\n  o[ 5] = t5;\n  o[ 6] = t6;\n  o[ 7] = t7;\n  o[ 8] = t8;\n  o[ 9] = t9;\n  o[10] = t10;\n  o[11] = t11;\n  o[12] = t12;\n  o[13] = t13;\n  o[14] = t14;\n  o[15] = t15;\n}\n\nfunction S(o, a) {\n  M(o, a, a);\n}\n\nfunction inv25519(o, i) {\n  var c = gf();\n  var a;\n  for (a = 0; a < 16; a++) c[a] = i[a];\n  for (a = 253; a >= 0; a--) {\n    S(c, c);\n    if(a !== 2 && a !== 4) M(c, c, i);\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a];\n}\n\nfunction pow2523(o, i) {\n  var c = gf();\n  var a;\n  for (a = 0; a < 16; a++) c[a] = i[a];\n  for (a = 250; a >= 0; a--) {\n      S(c, c);\n      if(a !== 1) M(c, c, i);\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a];\n}\n\nfunction crypto_scalarmult(q, n, p) {\n  var z = new Uint8Array(32);\n  var x = new Float64Array(80), r, i;\n  var a = gf(), b = gf(), c = gf(),\n      d = gf(), e = gf(), f = gf();\n  for (i = 0; i < 31; i++) z[i] = n[i];\n  z[31]=(n[31]&127)|64;\n  z[0]&=248;\n  unpack25519(x,p);\n  for (i = 0; i < 16; i++) {\n    b[i]=x[i];\n    d[i]=a[i]=c[i]=0;\n  }\n  a[0]=d[0]=1;\n  for (i=254; i>=0; --i) {\n    r=(z[i>>>3]>>>(i&7))&1;\n    sel25519(a,b,r);\n    sel25519(c,d,r);\n    A(e,a,c);\n    Z(a,a,c);\n    A(c,b,d);\n    Z(b,b,d);\n    S(d,e);\n    S(f,a);\n    M(a,c,a);\n    M(c,b,e);\n    A(e,a,c);\n    Z(a,a,c);\n    S(b,a);\n    Z(c,d,f);\n    M(a,c,_121665);\n    A(a,a,d);\n    M(c,c,a);\n    M(a,d,f);\n    M(d,b,x);\n    S(b,e);\n    sel25519(a,b,r);\n    sel25519(c,d,r);\n  }\n  for (i = 0; i < 16; i++) {\n    x[i+16]=a[i];\n    x[i+32]=c[i];\n    x[i+48]=b[i];\n    x[i+64]=d[i];\n  }\n  var x32 = x.subarray(32);\n  var x16 = x.subarray(16);\n  inv25519(x32,x32);\n  M(x16,x16,x32);\n  pack25519(q,x16);\n  return 0;\n}\n\nfunction crypto_scalarmult_base(q, n) {\n  return crypto_scalarmult(q, n, _9);\n}\n\nfunction crypto_box_keypair(y, x) {\n  randombytes(x, 32);\n  return crypto_scalarmult_base(y, x);\n}\n\nfunction crypto_box_beforenm(k, y, x) {\n  var s = new Uint8Array(32);\n  crypto_scalarmult(s, x, y);\n  return crypto_core_hsalsa20(k, _0, s, sigma);\n}\n\nvar crypto_box_afternm = crypto_secretbox;\nvar crypto_box_open_afternm = crypto_secretbox_open;\n\nfunction crypto_box(c, m, d, n, y, x) {\n  var k = new Uint8Array(32);\n  crypto_box_beforenm(k, y, x);\n  return crypto_box_afternm(c, m, d, n, k);\n}\n\nfunction crypto_box_open(m, c, d, n, y, x) {\n  var k = new Uint8Array(32);\n  crypto_box_beforenm(k, y, x);\n  return crypto_box_open_afternm(m, c, d, n, k);\n}\n\nvar K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction crypto_hashblocks_hl(hh, hl, m, n) {\n  var wh = new Int32Array(16), wl = new Int32Array(16),\n      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,\n      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,\n      th, tl, i, j, h, l, a, b, c, d;\n\n  var ah0 = hh[0],\n      ah1 = hh[1],\n      ah2 = hh[2],\n      ah3 = hh[3],\n      ah4 = hh[4],\n      ah5 = hh[5],\n      ah6 = hh[6],\n      ah7 = hh[7],\n\n      al0 = hl[0],\n      al1 = hl[1],\n      al2 = hl[2],\n      al3 = hl[3],\n      al4 = hl[4],\n      al5 = hl[5],\n      al6 = hl[6],\n      al7 = hl[7];\n\n  var pos = 0;\n  while (n >= 128) {\n    for (i = 0; i < 16; i++) {\n      j = 8 * i + pos;\n      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];\n      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];\n    }\n    for (i = 0; i < 80; i++) {\n      bh0 = ah0;\n      bh1 = ah1;\n      bh2 = ah2;\n      bh3 = ah3;\n      bh4 = ah4;\n      bh5 = ah5;\n      bh6 = ah6;\n      bh7 = ah7;\n\n      bl0 = al0;\n      bl1 = al1;\n      bl2 = al2;\n      bl3 = al3;\n      bl4 = al4;\n      bl5 = al5;\n      bl6 = al6;\n      bl7 = al7;\n\n      // add\n      h = ah7;\n      l = al7;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      // Sigma1\n      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));\n      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // Ch\n      h = (ah4 & ah5) ^ (~ah4 & ah6);\n      l = (al4 & al5) ^ (~al4 & al6);\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // K\n      h = K[i*2];\n      l = K[i*2+1];\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // w\n      h = wh[i%16];\n      l = wl[i%16];\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      th = c & 0xffff | d << 16;\n      tl = a & 0xffff | b << 16;\n\n      // add\n      h = th;\n      l = tl;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      // Sigma0\n      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));\n      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // Maj\n      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);\n      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      bh7 = (c & 0xffff) | (d << 16);\n      bl7 = (a & 0xffff) | (b << 16);\n\n      // add\n      h = bh3;\n      l = bl3;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      h = th;\n      l = tl;\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      bh3 = (c & 0xffff) | (d << 16);\n      bl3 = (a & 0xffff) | (b << 16);\n\n      ah1 = bh0;\n      ah2 = bh1;\n      ah3 = bh2;\n      ah4 = bh3;\n      ah5 = bh4;\n      ah6 = bh5;\n      ah7 = bh6;\n      ah0 = bh7;\n\n      al1 = bl0;\n      al2 = bl1;\n      al3 = bl2;\n      al4 = bl3;\n      al5 = bl4;\n      al6 = bl5;\n      al7 = bl6;\n      al0 = bl7;\n\n      if (i%16 === 15) {\n        for (j = 0; j < 16; j++) {\n          // add\n          h = wh[j];\n          l = wl[j];\n\n          a = l & 0xffff; b = l >>> 16;\n          c = h & 0xffff; d = h >>> 16;\n\n          h = wh[(j+9)%16];\n          l = wl[(j+9)%16];\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          // sigma0\n          th = wh[(j+1)%16];\n          tl = wl[(j+1)%16];\n          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);\n          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          // sigma1\n          th = wh[(j+14)%16];\n          tl = wl[(j+14)%16];\n          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);\n          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          b += a >>> 16;\n          c += b >>> 16;\n          d += c >>> 16;\n\n          wh[j] = (c & 0xffff) | (d << 16);\n          wl[j] = (a & 0xffff) | (b << 16);\n        }\n      }\n    }\n\n    // add\n    h = ah0;\n    l = al0;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[0];\n    l = hl[0];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[0] = ah0 = (c & 0xffff) | (d << 16);\n    hl[0] = al0 = (a & 0xffff) | (b << 16);\n\n    h = ah1;\n    l = al1;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[1];\n    l = hl[1];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[1] = ah1 = (c & 0xffff) | (d << 16);\n    hl[1] = al1 = (a & 0xffff) | (b << 16);\n\n    h = ah2;\n    l = al2;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[2];\n    l = hl[2];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[2] = ah2 = (c & 0xffff) | (d << 16);\n    hl[2] = al2 = (a & 0xffff) | (b << 16);\n\n    h = ah3;\n    l = al3;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[3];\n    l = hl[3];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[3] = ah3 = (c & 0xffff) | (d << 16);\n    hl[3] = al3 = (a & 0xffff) | (b << 16);\n\n    h = ah4;\n    l = al4;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[4];\n    l = hl[4];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[4] = ah4 = (c & 0xffff) | (d << 16);\n    hl[4] = al4 = (a & 0xffff) | (b << 16);\n\n    h = ah5;\n    l = al5;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[5];\n    l = hl[5];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[5] = ah5 = (c & 0xffff) | (d << 16);\n    hl[5] = al5 = (a & 0xffff) | (b << 16);\n\n    h = ah6;\n    l = al6;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[6];\n    l = hl[6];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[6] = ah6 = (c & 0xffff) | (d << 16);\n    hl[6] = al6 = (a & 0xffff) | (b << 16);\n\n    h = ah7;\n    l = al7;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[7];\n    l = hl[7];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[7] = ah7 = (c & 0xffff) | (d << 16);\n    hl[7] = al7 = (a & 0xffff) | (b << 16);\n\n    pos += 128;\n    n -= 128;\n  }\n\n  return n;\n}\n\nfunction crypto_hash(out, m, n) {\n  var hh = new Int32Array(8),\n      hl = new Int32Array(8),\n      x = new Uint8Array(256),\n      i, b = n;\n\n  hh[0] = 0x6a09e667;\n  hh[1] = 0xbb67ae85;\n  hh[2] = 0x3c6ef372;\n  hh[3] = 0xa54ff53a;\n  hh[4] = 0x510e527f;\n  hh[5] = 0x9b05688c;\n  hh[6] = 0x1f83d9ab;\n  hh[7] = 0x5be0cd19;\n\n  hl[0] = 0xf3bcc908;\n  hl[1] = 0x84caa73b;\n  hl[2] = 0xfe94f82b;\n  hl[3] = 0x5f1d36f1;\n  hl[4] = 0xade682d1;\n  hl[5] = 0x2b3e6c1f;\n  hl[6] = 0xfb41bd6b;\n  hl[7] = 0x137e2179;\n\n  crypto_hashblocks_hl(hh, hl, m, n);\n  n %= 128;\n\n  for (i = 0; i < n; i++) x[i] = m[b-n+i];\n  x[n] = 128;\n\n  n = 256-128*(n<112?1:0);\n  x[n-9] = 0;\n  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);\n  crypto_hashblocks_hl(hh, hl, x, n);\n\n  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);\n\n  return 0;\n}\n\nfunction add(p, q) {\n  var a = gf(), b = gf(), c = gf(),\n      d = gf(), e = gf(), f = gf(),\n      g = gf(), h = gf(), t = gf();\n\n  Z(a, p[1], p[0]);\n  Z(t, q[1], q[0]);\n  M(a, a, t);\n  A(b, p[0], p[1]);\n  A(t, q[0], q[1]);\n  M(b, b, t);\n  M(c, p[3], q[3]);\n  M(c, c, D2);\n  M(d, p[2], q[2]);\n  A(d, d, d);\n  Z(e, b, a);\n  Z(f, d, c);\n  A(g, d, c);\n  A(h, b, a);\n\n  M(p[0], e, f);\n  M(p[1], h, g);\n  M(p[2], g, f);\n  M(p[3], e, h);\n}\n\nfunction cswap(p, q, b) {\n  var i;\n  for (i = 0; i < 4; i++) {\n    sel25519(p[i], q[i], b);\n  }\n}\n\nfunction pack(r, p) {\n  var tx = gf(), ty = gf(), zi = gf();\n  inv25519(zi, p[2]);\n  M(tx, p[0], zi);\n  M(ty, p[1], zi);\n  pack25519(r, ty);\n  r[31] ^= par25519(tx) << 7;\n}\n\nfunction scalarmult(p, q, s) {\n  var b, i;\n  set25519(p[0], gf0);\n  set25519(p[1], gf1);\n  set25519(p[2], gf1);\n  set25519(p[3], gf0);\n  for (i = 255; i >= 0; --i) {\n    b = (s[(i/8)|0] >> (i&7)) & 1;\n    cswap(p, q, b);\n    add(q, p);\n    add(p, p);\n    cswap(p, q, b);\n  }\n}\n\nfunction scalarbase(p, s) {\n  var q = [gf(), gf(), gf(), gf()];\n  set25519(q[0], X);\n  set25519(q[1], Y);\n  set25519(q[2], gf1);\n  M(q[3], X, Y);\n  scalarmult(p, q, s);\n}\n\nfunction crypto_sign_keypair(pk, sk, seeded) {\n  var d = new Uint8Array(64);\n  var p = [gf(), gf(), gf(), gf()];\n  var i;\n\n  if (!seeded) randombytes(sk, 32);\n  crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n\n  scalarbase(p, d);\n  pack(pk, p);\n\n  for (i = 0; i < 32; i++) sk[i+32] = pk[i];\n  return 0;\n}\n\nvar L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);\n\nfunction modL(r, x) {\n  var carry, i, j, k;\n  for (i = 63; i >= 32; --i) {\n    carry = 0;\n    for (j = i - 32, k = i - 12; j < k; ++j) {\n      x[j] += carry - 16 * x[i] * L[j - (i - 32)];\n      carry = Math.floor((x[j] + 128) / 256);\n      x[j] -= carry * 256;\n    }\n    x[j] += carry;\n    x[i] = 0;\n  }\n  carry = 0;\n  for (j = 0; j < 32; j++) {\n    x[j] += carry - (x[31] >> 4) * L[j];\n    carry = x[j] >> 8;\n    x[j] &= 255;\n  }\n  for (j = 0; j < 32; j++) x[j] -= carry * L[j];\n  for (i = 0; i < 32; i++) {\n    x[i+1] += x[i] >> 8;\n    r[i] = x[i] & 255;\n  }\n}\n\nfunction reduce(r) {\n  var x = new Float64Array(64), i;\n  for (i = 0; i < 64; i++) x[i] = r[i];\n  for (i = 0; i < 64; i++) r[i] = 0;\n  modL(r, x);\n}\n\n// Note: difference from C - smlen returned, not passed as argument.\nfunction crypto_sign(sm, m, n, sk) {\n  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);\n  var i, j, x = new Float64Array(64);\n  var p = [gf(), gf(), gf(), gf()];\n\n  crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n\n  var smlen = n + 64;\n  for (i = 0; i < n; i++) sm[64 + i] = m[i];\n  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];\n\n  crypto_hash(r, sm.subarray(32), n+32);\n  reduce(r);\n  scalarbase(p, r);\n  pack(sm, p);\n\n  for (i = 32; i < 64; i++) sm[i] = sk[i];\n  crypto_hash(h, sm, n + 64);\n  reduce(h);\n\n  for (i = 0; i < 64; i++) x[i] = 0;\n  for (i = 0; i < 32; i++) x[i] = r[i];\n  for (i = 0; i < 32; i++) {\n    for (j = 0; j < 32; j++) {\n      x[i+j] += h[i] * d[j];\n    }\n  }\n\n  modL(sm.subarray(32), x);\n  return smlen;\n}\n\nfunction unpackneg(r, p) {\n  var t = gf(), chk = gf(), num = gf(),\n      den = gf(), den2 = gf(), den4 = gf(),\n      den6 = gf();\n\n  set25519(r[2], gf1);\n  unpack25519(r[1], p);\n  S(num, r[1]);\n  M(den, num, D);\n  Z(num, num, r[2]);\n  A(den, r[2], den);\n\n  S(den2, den);\n  S(den4, den2);\n  M(den6, den4, den2);\n  M(t, den6, num);\n  M(t, t, den);\n\n  pow2523(t, t);\n  M(t, t, num);\n  M(t, t, den);\n  M(t, t, den);\n  M(r[0], t, den);\n\n  S(chk, r[0]);\n  M(chk, chk, den);\n  if (neq25519(chk, num)) M(r[0], r[0], I);\n\n  S(chk, r[0]);\n  M(chk, chk, den);\n  if (neq25519(chk, num)) return -1;\n\n  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);\n\n  M(r[3], r[0], r[1]);\n  return 0;\n}\n\nfunction crypto_sign_open(m, sm, n, pk) {\n  var i;\n  var t = new Uint8Array(32), h = new Uint8Array(64);\n  var p = [gf(), gf(), gf(), gf()],\n      q = [gf(), gf(), gf(), gf()];\n\n  if (n < 64) return -1;\n\n  if (unpackneg(q, pk)) return -1;\n\n  for (i = 0; i < n; i++) m[i] = sm[i];\n  for (i = 0; i < 32; i++) m[i+32] = pk[i];\n  crypto_hash(h, m, n);\n  reduce(h);\n  scalarmult(p, q, h);\n\n  scalarbase(q, sm.subarray(32));\n  add(p, q);\n  pack(t, p);\n\n  n -= 64;\n  if (crypto_verify_32(sm, 0, t, 0)) {\n    for (i = 0; i < n; i++) m[i] = 0;\n    return -1;\n  }\n\n  for (i = 0; i < n; i++) m[i] = sm[i + 64];\n  return n;\n}\n\nvar crypto_secretbox_KEYBYTES = 32,\n    crypto_secretbox_NONCEBYTES = 24,\n    crypto_secretbox_ZEROBYTES = 32,\n    crypto_secretbox_BOXZEROBYTES = 16,\n    crypto_scalarmult_BYTES = 32,\n    crypto_scalarmult_SCALARBYTES = 32,\n    crypto_box_PUBLICKEYBYTES = 32,\n    crypto_box_SECRETKEYBYTES = 32,\n    crypto_box_BEFORENMBYTES = 32,\n    crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,\n    crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,\n    crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,\n    crypto_sign_BYTES = 64,\n    crypto_sign_PUBLICKEYBYTES = 32,\n    crypto_sign_SECRETKEYBYTES = 64,\n    crypto_sign_SEEDBYTES = 32,\n    crypto_hash_BYTES = 64;\n\nnacl.lowlevel = {\n  crypto_core_hsalsa20: crypto_core_hsalsa20,\n  crypto_stream_xor: crypto_stream_xor,\n  crypto_stream: crypto_stream,\n  crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,\n  crypto_stream_salsa20: crypto_stream_salsa20,\n  crypto_onetimeauth: crypto_onetimeauth,\n  crypto_onetimeauth_verify: crypto_onetimeauth_verify,\n  crypto_verify_16: crypto_verify_16,\n  crypto_verify_32: crypto_verify_32,\n  crypto_secretbox: crypto_secretbox,\n  crypto_secretbox_open: crypto_secretbox_open,\n  crypto_scalarmult: crypto_scalarmult,\n  crypto_scalarmult_base: crypto_scalarmult_base,\n  crypto_box_beforenm: crypto_box_beforenm,\n  crypto_box_afternm: crypto_box_afternm,\n  crypto_box: crypto_box,\n  crypto_box_open: crypto_box_open,\n  crypto_box_keypair: crypto_box_keypair,\n  crypto_hash: crypto_hash,\n  crypto_sign: crypto_sign,\n  crypto_sign_keypair: crypto_sign_keypair,\n  crypto_sign_open: crypto_sign_open,\n\n  crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,\n  crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,\n  crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,\n  crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,\n  crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,\n  crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,\n  crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,\n  crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,\n  crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,\n  crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,\n  crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,\n  crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,\n  crypto_sign_BYTES: crypto_sign_BYTES,\n  crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,\n  crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,\n  crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,\n  crypto_hash_BYTES: crypto_hash_BYTES,\n\n  gf: gf,\n  D: D,\n  L: L,\n  pack25519: pack25519,\n  unpack25519: unpack25519,\n  M: M,\n  A: A,\n  S: S,\n  Z: Z,\n  pow2523: pow2523,\n  add: add,\n  set25519: set25519,\n  modL: modL,\n  scalarmult: scalarmult,\n  scalarbase: scalarbase,\n};\n\n/* High-level API */\n\nfunction checkLengths(k, n) {\n  if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');\n  if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');\n}\n\nfunction checkBoxLengths(pk, sk) {\n  if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');\n  if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');\n}\n\nfunction checkArrayTypes() {\n  for (var i = 0; i < arguments.length; i++) {\n    if (!(arguments[i] instanceof Uint8Array))\n      throw new TypeError('unexpected type, use Uint8Array');\n  }\n}\n\nfunction cleanup(arr) {\n  for (var i = 0; i < arr.length; i++) arr[i] = 0;\n}\n\nnacl.randomBytes = function(n) {\n  var b = new Uint8Array(n);\n  randombytes(b, n);\n  return b;\n};\n\nnacl.secretbox = function(msg, nonce, key) {\n  checkArrayTypes(msg, nonce, key);\n  checkLengths(key, nonce);\n  var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);\n  var c = new Uint8Array(m.length);\n  for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];\n  crypto_secretbox(c, m, m.length, nonce, key);\n  return c.subarray(crypto_secretbox_BOXZEROBYTES);\n};\n\nnacl.secretbox.open = function(box, nonce, key) {\n  checkArrayTypes(box, nonce, key);\n  checkLengths(key, nonce);\n  var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);\n  var m = new Uint8Array(c.length);\n  for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];\n  if (c.length < 32) return null;\n  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;\n  return m.subarray(crypto_secretbox_ZEROBYTES);\n};\n\nnacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;\nnacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;\nnacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;\n\nnacl.scalarMult = function(n, p) {\n  checkArrayTypes(n, p);\n  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');\n  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');\n  var q = new Uint8Array(crypto_scalarmult_BYTES);\n  crypto_scalarmult(q, n, p);\n  return q;\n};\n\nnacl.scalarMult.base = function(n) {\n  checkArrayTypes(n);\n  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');\n  var q = new Uint8Array(crypto_scalarmult_BYTES);\n  crypto_scalarmult_base(q, n);\n  return q;\n};\n\nnacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;\nnacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;\n\nnacl.box = function(msg, nonce, publicKey, secretKey) {\n  var k = nacl.box.before(publicKey, secretKey);\n  return nacl.secretbox(msg, nonce, k);\n};\n\nnacl.box.before = function(publicKey, secretKey) {\n  checkArrayTypes(publicKey, secretKey);\n  checkBoxLengths(publicKey, secretKey);\n  var k = new Uint8Array(crypto_box_BEFORENMBYTES);\n  crypto_box_beforenm(k, publicKey, secretKey);\n  return k;\n};\n\nnacl.box.after = nacl.secretbox;\n\nnacl.box.open = function(msg, nonce, publicKey, secretKey) {\n  var k = nacl.box.before(publicKey, secretKey);\n  return nacl.secretbox.open(msg, nonce, k);\n};\n\nnacl.box.open.after = nacl.secretbox.open;\n\nnacl.box.keyPair = function() {\n  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);\n  crypto_box_keypair(pk, sk);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.box.keyPair.fromSecretKey = function(secretKey) {\n  checkArrayTypes(secretKey);\n  if (secretKey.length !== crypto_box_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n  crypto_scalarmult_base(pk, secretKey);\n  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};\n};\n\nnacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;\nnacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;\nnacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;\nnacl.box.nonceLength = crypto_box_NONCEBYTES;\nnacl.box.overheadLength = nacl.secretbox.overheadLength;\n\nnacl.sign = function(msg, secretKey) {\n  checkArrayTypes(msg, secretKey);\n  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);\n  crypto_sign(signedMsg, msg, msg.length, secretKey);\n  return signedMsg;\n};\n\nnacl.sign.open = function(signedMsg, publicKey) {\n  checkArrayTypes(signedMsg, publicKey);\n  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)\n    throw new Error('bad public key size');\n  var tmp = new Uint8Array(signedMsg.length);\n  var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);\n  if (mlen < 0) return null;\n  var m = new Uint8Array(mlen);\n  for (var i = 0; i < m.length; i++) m[i] = tmp[i];\n  return m;\n};\n\nnacl.sign.detached = function(msg, secretKey) {\n  var signedMsg = nacl.sign(msg, secretKey);\n  var sig = new Uint8Array(crypto_sign_BYTES);\n  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];\n  return sig;\n};\n\nnacl.sign.detached.verify = function(msg, sig, publicKey) {\n  checkArrayTypes(msg, sig, publicKey);\n  if (sig.length !== crypto_sign_BYTES)\n    throw new Error('bad signature size');\n  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)\n    throw new Error('bad public key size');\n  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);\n  var m = new Uint8Array(crypto_sign_BYTES + msg.length);\n  var i;\n  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];\n  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];\n  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);\n};\n\nnacl.sign.keyPair = function() {\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n  crypto_sign_keypair(pk, sk);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.sign.keyPair.fromSecretKey = function(secretKey) {\n  checkArrayTypes(secretKey);\n  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];\n  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};\n};\n\nnacl.sign.keyPair.fromSeed = function(seed) {\n  checkArrayTypes(seed);\n  if (seed.length !== crypto_sign_SEEDBYTES)\n    throw new Error('bad seed size');\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n  for (var i = 0; i < 32; i++) sk[i] = seed[i];\n  crypto_sign_keypair(pk, sk, true);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;\nnacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;\nnacl.sign.seedLength = crypto_sign_SEEDBYTES;\nnacl.sign.signatureLength = crypto_sign_BYTES;\n\nnacl.hash = function(msg) {\n  checkArrayTypes(msg);\n  var h = new Uint8Array(crypto_hash_BYTES);\n  crypto_hash(h, msg, msg.length);\n  return h;\n};\n\nnacl.hash.hashLength = crypto_hash_BYTES;\n\nnacl.verify = function(x, y) {\n  checkArrayTypes(x, y);\n  // Zero length arguments are considered not equal.\n  if (x.length === 0 || y.length === 0) return false;\n  if (x.length !== y.length) return false;\n  return (vn(x, 0, y, 0, x.length) === 0) ? true : false;\n};\n\nnacl.setPRNG = function(fn) {\n  randombytes = fn;\n};\n\n(function() {\n  // Initialize PRNG if environment provides CSPRNG.\n  // If not, methods calling randombytes will throw.\n  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;\n  if (crypto && crypto.getRandomValues) {\n    // Browsers.\n    var QUOTA = 65536;\n    nacl.setPRNG(function(x, n) {\n      var i, v = new Uint8Array(n);\n      for (i = 0; i < n; i += QUOTA) {\n        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));\n      }\n      for (i = 0; i < n; i++) x[i] = v[i];\n      cleanup(v);\n    });\n  } else if (typeof require !== 'undefined') {\n    // Node.js.\n    crypto = require('crypto');\n    if (crypto && crypto.randomBytes) {\n      nacl.setPRNG(function(x, n) {\n        var i, v = crypto.randomBytes(n);\n        for (i = 0; i < n; i++) x[i] = v[i];\n        cleanup(v);\n      });\n    }\n  }\n})();\n\n})(typeof module !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));\n"],"names":["nacl","crypto","gf","init","i","r","Float64Array","length","randombytes","_0","Uint8Array","_9","gf0","gf1","_121665","D","D2","X","Y","I","ts64","x","h","l","vn","xi","y","yi","n","d","crypto_verify_16","crypto_verify_32","crypto_core_salsa20","out","inp","k","c","core_salsa20","o","p","u","j0","j1","j2","j3","j4","j5","j6","j7","j8","j9","j10","j11","j12","j13","j14","j15","x0","x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","x11","x12","x13","x14","x15","crypto_core_hsalsa20","core_hsalsa20","sigma","crypto_stream_salsa20_xor","cpos","m","mpos","b","z","crypto_stream_salsa20","crypto_stream","s","sn","crypto_stream_xor","poly1305","key","t0","t1","t2","t3","t4","t5","t6","t7","buffer","Uint16Array","pad","leftover","fin","crypto_onetimeauth","outpos","update","finish","crypto_onetimeauth_verify","hpos","crypto_secretbox","crypto_secretbox_open","set25519","a","car25519","v","Math","floor","sel25519","q","t","pack25519","j","neq25519","par25519","unpack25519","A","Z","M","t8","t9","t10","t11","t12","t13","t14","t15","t16","t17","t18","t19","t20","t21","t22","t23","t24","t25","t26","t27","t28","t29","t30","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","b10","b11","b12","b13","b14","b15","S","inv25519","pow2523","crypto_scalarmult","e","f","x32","subarray","x16","crypto_scalarmult_base","crypto_box_keypair","crypto_box_beforenm","prototype","blocks","bytes","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","hibit","h0","h1","h2","h3","h4","h5","h6","h7","h8","h9","r0","r1","r2","r3","r4","r5","r6","r7","r8","r9","mac","macpos","mask","g","want","K","crypto_hashblocks_hl","hh","hl","bh0","bh1","bh2","bh3","bh4","bh5","bh6","bh7","bl0","bl1","bl2","bl3","bl4","bl5","bl6","bl7","th","tl","wh","Int32Array","wl","ah0","ah1","ah2","ah3","ah4","ah5","ah6","ah7","al0","al1","al2","al3","al4","al5","al6","al7","pos","crypto_hash","add","cswap","pack","tx","ty","zi","scalarmult","scalarbase","crypto_sign_keypair","pk","sk","seeded","L","modL","carry","reduce","crypto_sign","sm","smlen","crypto_sign_open","chk","num","den","den2","den4","den6","checkLengths","checkArrayTypes","arguments","cleanup","arr","lowlevel","crypto_box_afternm","crypto_box","crypto_box_open","crypto_box_open_afternm","crypto_secretbox_KEYBYTES","crypto_secretbox_NONCEBYTES","crypto_secretbox_ZEROBYTES","crypto_secretbox_BOXZEROBYTES","crypto_scalarmult_BYTES","crypto_scalarmult_SCALARBYTES","crypto_box_PUBLICKEYBYTES","crypto_box_SECRETKEYBYTES","crypto_box_BEFORENMBYTES","crypto_box_NONCEBYTES","crypto_box_ZEROBYTES","crypto_box_BOXZEROBYTES","crypto_sign_BYTES","crypto_sign_PUBLICKEYBYTES","crypto_sign_SECRETKEYBYTES","crypto_sign_SEEDBYTES","crypto_hash_BYTES","randomBytes","secretbox","msg","nonce","open","box","keyLength","nonceLength","overheadLength","scalarMult","base","scalarLength","groupElementLength","publicKey","secretKey","before","checkBoxLengths","after","keyPair","fromSecretKey","publicKeyLength","secretKeyLength","sharedKeyLength","sign","signedMsg","tmp","mlen","detached","sig","verify","fromSeed","seed","seedLength","signatureLength","hash","hashLength","setPRNG","fn","self","msCrypto","getRandomValues","min","__webpack_require__","exports","module"],"sourceRoot":""}