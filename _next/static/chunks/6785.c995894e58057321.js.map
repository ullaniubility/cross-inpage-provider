{"version":3,"file":"static/chunks/6785.c995894e58057321.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@noble/hashes/esm/utils.js","webpack://_N_E/./node_modules/@onekeyfe/extension-bridge-injected/dist/JsBridgeExtInjected.js","webpack://_N_E/./node_modules/@onekeyfe/extension-bridge-injected/dist/index.js","webpack://_N_E/./node_modules/@onekeyfe/onekey-cosmos-provider/dist/ProviderCosmosBase.js","webpack://_N_E/./node_modules/long/index.js","webpack://_N_E/./node_modules/@onekeyfe/onekey-cosmos-provider/dist/cosmjs.js","webpack://_N_E/./node_modules/@onekeyfe/onekey-cosmos-provider/dist/OnekeyCosmosProvider.js","webpack://_N_E/./node_modules/@onekeyfe/onekey-cosmos-provider/dist/types/type.js","webpack://_N_E/./node_modules/@onekeyfe/onekey-cosmos-provider/dist/types/index.js","webpack://_N_E/./node_modules/@onekeyfe/onekey-cosmos-provider/dist/index.js","webpack://_N_E/<anon>"],"sourcesContent":["/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nconst u8a = (a) => a instanceof Uint8Array;\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!u8a(data))\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { fakeDebugLogger, consts } from '@onekeyfe/cross-inpage-provider-core';\nimport { JsBridgeBase, injectedProviderReceiveHandler, injectJsBridge, } from '@onekeyfe/cross-inpage-provider-core';\nconst { JS_BRIDGE_MESSAGE_DIRECTION, JS_BRIDGE_MESSAGE_EXT_CHANNEL } = consts;\nfunction getOrCreateExtInjectedJsBridge(options = {}) {\n    // create ext bridge by default\n    const bridgeCreator = () => new JsBridgeExtInjected(Object.assign(Object.assign({}, options), { receiveHandler: injectedProviderReceiveHandler }));\n    const bridge = injectJsBridge(bridgeCreator);\n    return bridge;\n}\nlet postMessageListenerAdded = false;\nfunction setupPostMessageListener(options = {}) {\n    const debugLogger = options.debugLogger || fakeDebugLogger;\n    if (postMessageListenerAdded) {\n        return;\n    }\n    postMessageListenerAdded = true;\n    // - receive\n    // #### content-script -> injected\n    window.addEventListener('message', (event) => {\n        var _a, _b;\n        // We only accept messages from ourselves\n        if (event.source !== window) {\n            return;\n        }\n        const eventData = event.data;\n        // only accept extension messages\n        if (eventData.channel === JS_BRIDGE_MESSAGE_EXT_CHANNEL &&\n            eventData.direction === JS_BRIDGE_MESSAGE_DIRECTION.HOST_TO_INPAGE) {\n            debugLogger.extInjected('onWindowPostMessage', eventData);\n            const payload = eventData.payload;\n            const jsBridge = (_a = options.bridge) !== null && _a !== void 0 ? _a : (_b = window === null || window === void 0 ? void 0 : window.$onekey) === null || _b === void 0 ? void 0 : _b.jsBridge;\n            if (jsBridge) {\n                jsBridge.receive(payload);\n            }\n        }\n    }, false);\n}\nclass JsBridgeExtInjected extends JsBridgeBase {\n    constructor(config) {\n        super(config);\n        this.sendAsString = false;\n        this.isInjected = true;\n        // receive message\n        setupPostMessageListener({\n            debugLogger: this.debugLogger,\n            bridge: this,\n        });\n    }\n    // send message\n    sendPayload(payloadObj) {\n        window.postMessage({\n            channel: JS_BRIDGE_MESSAGE_EXT_CHANNEL,\n            direction: JS_BRIDGE_MESSAGE_DIRECTION.INPAGE_TO_HOST,\n            payload: payloadObj,\n        });\n    }\n}\nexport { JsBridgeExtInjected, getOrCreateExtInjectedJsBridge };\n","export * from './JsBridgeExtInjected';\n","import { IInjectedProviderNames } from '@onekeyfe/cross-inpage-provider-types';\nimport { ProviderBase } from '@onekeyfe/cross-inpage-provider-core';\nclass ProviderCosmosBase extends ProviderBase {\n    constructor(props) {\n        super(props);\n        this.providerName = IInjectedProviderNames.cosmos;\n    }\n    request(data) {\n        return this.bridgeRequest(data);\n    }\n}\nexport { ProviderCosmosBase };\n","/**\n * @license\n * Copyright 2009 The Closure Library Authors\n * Copyright 2020 Daniel Wirtz / The long.js Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// WebAssembly optimizations to do native i64 multiplication and divide\nvar wasm = null;\ntry {\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n  ])), {}).exports;\n} catch (e) {\n  // no wasm support :(\n}\n\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nfunction Long(low, high, unsigned) {\n\n  /**\n   * The low 32 bits as a signed value.\n   * @type {number}\n   */\n  this.low = low | 0;\n\n  /**\n   * The high 32 bits as a signed value.\n   * @type {number}\n   */\n  this.high = high | 0;\n\n  /**\n   * Whether unsigned or not.\n   * @type {boolean}\n   */\n  this.unsigned = !!unsigned;\n}\n\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\n\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nfunction isLong(obj) {\n  return (obj && obj[\"__isLong__\"]) === true;\n}\n\n/**\n * @function\n * @param {*} value number\n * @returns {number}\n * @inner\n */\nfunction ctz32(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n}\n\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\nLong.isLong = isLong;\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromInt(value, unsigned) {\n  var obj, cachedObj, cache;\n  if (unsigned) {\n    value >>>= 0;\n    if (cache = (0 <= value && value < 256)) {\n      cachedObj = UINT_CACHE[value];\n      if (cachedObj)\n        return cachedObj;\n    }\n    obj = fromBits(value, 0, true);\n    if (cache)\n      UINT_CACHE[value] = obj;\n    return obj;\n  } else {\n    value |= 0;\n    if (cache = (-128 <= value && value < 128)) {\n      cachedObj = INT_CACHE[value];\n      if (cachedObj)\n        return cachedObj;\n    }\n    obj = fromBits(value, value < 0 ? -1 : 0, false);\n    if (cache)\n      INT_CACHE[value] = obj;\n    return obj;\n  }\n}\n\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromInt = fromInt;\n\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromNumber(value, unsigned) {\n  if (isNaN(value))\n    return unsigned ? UZERO : ZERO;\n  if (unsigned) {\n    if (value < 0)\n      return UZERO;\n    if (value >= TWO_PWR_64_DBL)\n      return MAX_UNSIGNED_VALUE;\n  } else {\n    if (value <= -TWO_PWR_63_DBL)\n      return MIN_VALUE;\n    if (value + 1 >= TWO_PWR_63_DBL)\n      return MAX_VALUE;\n  }\n  if (value < 0)\n    return fromNumber(-value, unsigned).neg();\n  return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromNumber = fromNumber;\n\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromBits(lowBits, highBits, unsigned) {\n  return new Long(lowBits, highBits, unsigned);\n}\n\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromBits = fromBits;\n\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nfunction fromString(str, unsigned, radix) {\n  if (str.length === 0)\n    throw Error('empty string');\n  if (typeof unsigned === 'number') {\n    // For goog.math.long compatibility\n    radix = unsigned;\n    unsigned = false;\n  } else {\n    unsigned = !!unsigned;\n  }\n  if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n    return unsigned ? UZERO : ZERO;\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix)\n    throw RangeError('radix');\n\n  var p;\n  if ((p = str.indexOf('-')) > 0)\n    throw Error('interior hyphen');\n  else if (p === 0) {\n    return fromString(str.substring(1), unsigned, radix).neg();\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 8));\n\n  var result = ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i),\n      value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = fromNumber(pow_dbl(radix, size));\n      result = result.mul(power).add(fromNumber(value));\n    } else {\n      result = result.mul(radixToPower);\n      result = result.add(fromNumber(value));\n    }\n  }\n  result.unsigned = unsigned;\n  return result;\n}\n\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\nLong.fromString = fromString;\n\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromValue(val, unsigned) {\n  if (typeof val === 'number')\n    return fromNumber(val, unsigned);\n  if (typeof val === 'string')\n    return fromString(val, unsigned);\n  // Throws for non-objects, converts non-instanceof Long:\n  return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\nLong.fromValue = fromValue;\n\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n\n/**\n * @type {!Long}\n * @inner\n */\nvar ZERO = fromInt(0);\n\n/**\n * Signed zero.\n * @type {!Long}\n */\nLong.ZERO = ZERO;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar UZERO = fromInt(0, true);\n\n/**\n * Unsigned zero.\n * @type {!Long}\n */\nLong.UZERO = UZERO;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar ONE = fromInt(1);\n\n/**\n * Signed one.\n * @type {!Long}\n */\nLong.ONE = ONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar UONE = fromInt(1, true);\n\n/**\n * Unsigned one.\n * @type {!Long}\n */\nLong.UONE = UONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar NEG_ONE = fromInt(-1);\n\n/**\n * Signed negative one.\n * @type {!Long}\n */\nLong.NEG_ONE = NEG_ONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n\n/**\n * Maximum signed value.\n * @type {!Long}\n */\nLong.MAX_VALUE = MAX_VALUE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n\n/**\n * Minimum signed value.\n * @type {!Long}\n */\nLong.MIN_VALUE = MIN_VALUE;\n\n/**\n * @alias Long.prototype\n * @inner\n */\nvar LongPrototype = Long.prototype;\n\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.toInt = function toInt() {\n  return this.unsigned ? this.low >>> 0 : this.low;\n};\n\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.toNumber = function toNumber() {\n  if (this.unsigned)\n    return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\n  return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n};\n\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nLongPrototype.toString = function toString(radix) {\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix)\n    throw RangeError('radix');\n  if (this.isZero())\n    return '0';\n  if (this.isNegative()) { // Unsigned Longs are never negative\n    if (this.eq(MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = fromNumber(radix),\n        div = this.div(radixLong),\n        rem1 = div.mul(radixLong).sub(this);\n      return div.toString(radix) + rem1.toInt().toString(radix);\n    } else\n      return '-' + this.neg().toString(radix);\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n    rem = this;\n  var result = '';\n  while (true) {\n    var remDiv = rem.div(radixToPower),\n      intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n      digits = intval.toString(radix);\n    rem = remDiv;\n    if (rem.isZero())\n      return digits + result;\n    else {\n      while (digits.length < 6)\n        digits = '0' + digits;\n      result = '' + digits + result;\n    }\n  }\n};\n\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nLongPrototype.getHighBits = function getHighBits() {\n  return this.high;\n};\n\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n  return this.high >>> 0;\n};\n\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nLongPrototype.getLowBits = function getLowBits() {\n  return this.low;\n};\n\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n  return this.low >>> 0;\n};\n\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n  if (this.isNegative()) // Unsigned Longs are never negative\n    return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n  var val = this.high != 0 ? this.high : this.low;\n  for (var bit = 31; bit > 0; bit--)\n    if ((val & (1 << bit)) != 0)\n      break;\n  return this.high != 0 ? bit + 33 : bit + 1;\n};\n\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isZero = function isZero() {\n  return this.high === 0 && this.low === 0;\n};\n\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\nLongPrototype.eqz = LongPrototype.isZero;\n\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isNegative = function isNegative() {\n  return !this.unsigned && this.high < 0;\n};\n\n/**\n * Tests if this Long's value is positive or zero.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isPositive = function isPositive() {\n  return this.unsigned || this.high >= 0;\n};\n\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isOdd = function isOdd() {\n  return (this.low & 1) === 1;\n};\n\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isEven = function isEven() {\n  return (this.low & 1) === 0;\n};\n\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.equals = function equals(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n    return false;\n  return this.high === other.high && this.low === other.low;\n};\n\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.eq = LongPrototype.equals;\n\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.notEquals = function notEquals(other) {\n  return !this.eq(/* validates */ other);\n};\n\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.neq = LongPrototype.notEquals;\n\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.ne = LongPrototype.notEquals;\n\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lessThan = function lessThan(other) {\n  return this.comp(/* validates */ other) < 0;\n};\n\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lt = LongPrototype.lessThan;\n\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n  return this.comp(/* validates */ other) <= 0;\n};\n\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\n\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.le = LongPrototype.lessThanOrEqual;\n\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.greaterThan = function greaterThan(other) {\n  return this.comp(/* validates */ other) > 0;\n};\n\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.gt = LongPrototype.greaterThan;\n\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n  return this.comp(/* validates */ other) >= 0;\n};\n\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\n\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\n\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nLongPrototype.compare = function compare(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  if (this.eq(other))\n    return 0;\n  var thisNeg = this.isNegative(),\n    otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg)\n    return -1;\n  if (!thisNeg && otherNeg)\n    return 1;\n  // At this point the sign bits are the same\n  if (!this.unsigned)\n    return this.sub(other).isNegative() ? -1 : 1;\n  // Both are positive if at least one is unsigned\n  return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\n};\n\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nLongPrototype.comp = LongPrototype.compare;\n\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nLongPrototype.negate = function negate() {\n  if (!this.unsigned && this.eq(MIN_VALUE))\n    return MIN_VALUE;\n  return this.not().add(ONE);\n};\n\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\nLongPrototype.neg = LongPrototype.negate;\n\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nLongPrototype.add = function add(addend) {\n  if (!isLong(addend))\n    addend = fromValue(addend);\n\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xFFFF;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xFFFF;\n\n  var b48 = addend.high >>> 16;\n  var b32 = addend.high & 0xFFFF;\n  var b16 = addend.low >>> 16;\n  var b00 = addend.low & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n};\n\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nLongPrototype.subtract = function subtract(subtrahend) {\n  if (!isLong(subtrahend))\n    subtrahend = fromValue(subtrahend);\n  return this.add(subtrahend.neg());\n};\n\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nLongPrototype.sub = LongPrototype.subtract;\n\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nLongPrototype.multiply = function multiply(multiplier) {\n  if (this.isZero())\n    return this;\n  if (!isLong(multiplier))\n    multiplier = fromValue(multiplier);\n\n  // use wasm support if present\n  if (wasm) {\n    var low = wasm[\"mul\"](this.low,\n      this.high,\n      multiplier.low,\n      multiplier.high);\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  if (multiplier.isZero())\n    return this.unsigned ? UZERO : ZERO;\n  if (this.eq(MIN_VALUE))\n    return multiplier.isOdd() ? MIN_VALUE : ZERO;\n  if (multiplier.eq(MIN_VALUE))\n    return this.isOdd() ? MIN_VALUE : ZERO;\n\n  if (this.isNegative()) {\n    if (multiplier.isNegative())\n      return this.neg().mul(multiplier.neg());\n    else\n      return this.neg().mul(multiplier).neg();\n  } else if (multiplier.isNegative())\n    return this.mul(multiplier.neg()).neg();\n\n  // If both longs are small, use float multiplication\n  if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\n    return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xFFFF;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xFFFF;\n\n  var b48 = multiplier.high >>> 16;\n  var b32 = multiplier.high & 0xFFFF;\n  var b16 = multiplier.low >>> 16;\n  var b00 = multiplier.low & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n};\n\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nLongPrototype.mul = LongPrototype.multiply;\n\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nLongPrototype.divide = function divide(divisor) {\n  if (!isLong(divisor))\n    divisor = fromValue(divisor);\n  if (divisor.isZero())\n    throw Error('division by zero');\n\n  // use wasm support if present\n  if (wasm) {\n    // guard against signed division overflow: the largest\n    // negative number / -1 would be 1 larger than the largest\n    // positive number, due to two's complement.\n    if (!this.unsigned &&\n      this.high === -0x80000000 &&\n      divisor.low === -1 && divisor.high === -1) {\n      // be consistent with non-wasm code path\n      return this;\n    }\n    var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(\n      this.low,\n      this.high,\n      divisor.low,\n      divisor.high\n    );\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  if (this.isZero())\n    return this.unsigned ? UZERO : ZERO;\n  var approx, rem, res;\n  if (!this.unsigned) {\n    // This section is only relevant for signed longs and is derived from the\n    // closure library as a whole.\n    if (this.eq(MIN_VALUE)) {\n      if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\n        return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\n      else if (divisor.eq(MIN_VALUE))\n        return ONE;\n      else {\n        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n        var halfThis = this.shr(1);\n        approx = halfThis.div(divisor).shl(1);\n        if (approx.eq(ZERO)) {\n          return divisor.isNegative() ? ONE : NEG_ONE;\n        } else {\n          rem = this.sub(divisor.mul(approx));\n          res = approx.add(rem.div(divisor));\n          return res;\n        }\n      }\n    } else if (divisor.eq(MIN_VALUE))\n      return this.unsigned ? UZERO : ZERO;\n    if (this.isNegative()) {\n      if (divisor.isNegative())\n        return this.neg().div(divisor.neg());\n      return this.neg().div(divisor).neg();\n    } else if (divisor.isNegative())\n      return this.div(divisor.neg()).neg();\n    res = ZERO;\n  } else {\n    // The algorithm below has not been made for unsigned longs. It's therefore\n    // required to take special care of the MSB prior to running it.\n    if (!divisor.unsigned)\n      divisor = divisor.toUnsigned();\n    if (divisor.gt(this))\n      return UZERO;\n    if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n      return UONE;\n    res = UZERO;\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  rem = this;\n  while (rem.gte(divisor)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n      delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\n\n      // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n      approxRem = approxRes.mul(divisor);\n    while (approxRem.isNegative() || approxRem.gt(rem)) {\n      approx -= delta;\n      approxRes = fromNumber(approx, this.unsigned);\n      approxRem = approxRes.mul(divisor);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero())\n      approxRes = ONE;\n\n    res = res.add(approxRes);\n    rem = rem.sub(approxRem);\n  }\n  return res;\n};\n\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nLongPrototype.div = LongPrototype.divide;\n\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.modulo = function modulo(divisor) {\n  if (!isLong(divisor))\n    divisor = fromValue(divisor);\n\n  // use wasm support if present\n  if (wasm) {\n    var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(\n      this.low,\n      this.high,\n      divisor.low,\n      divisor.high\n    );\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  return this.sub(this.div(divisor).mul(divisor));\n};\n\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.mod = LongPrototype.modulo;\n\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.rem = LongPrototype.modulo;\n\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nLongPrototype.not = function not() {\n  return fromBits(~this.low, ~this.high, this.unsigned);\n};\n\n/**\n * Returns count leading zeros of this Long.\n * @this {!Long}\n * @returns {!number}\n */\nLongPrototype.countLeadingZeros = function countLeadingZeros() {\n  return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n};\n\n/**\n * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n * @function\n * @param {!Long}\n * @returns {!number}\n */\nLongPrototype.clz = LongPrototype.countLeadingZeros;\n\n/**\n * Returns count trailing zeros of this Long.\n * @this {!Long}\n * @returns {!number}\n */\nLongPrototype.countTrailingZeros = function countTrailingZeros() {\n  return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n};\n\n/**\n * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n * @function\n * @param {!Long}\n * @returns {!number}\n */\nLongPrototype.ctz = LongPrototype.countTrailingZeros;\n\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.and = function and(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n};\n\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.or = function or(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n};\n\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.xor = function xor(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\n  if (isLong(numBits))\n    numBits = numBits.toInt();\n  if ((numBits &= 63) === 0)\n    return this;\n  else if (numBits < 32)\n    return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\n  else\n    return fromBits(0, this.low << (numBits - 32), this.unsigned);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shl = LongPrototype.shiftLeft;\n\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftRight = function shiftRight(numBits) {\n  if (isLong(numBits))\n    numBits = numBits.toInt();\n  if ((numBits &= 63) === 0)\n    return this;\n  else if (numBits < 32)\n    return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\n  else\n    return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\n};\n\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shr = LongPrototype.shiftRight;\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits < 32) return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >>> numBits, this.unsigned);\n  if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n  return fromBits(this.high >>> (numBits - 32), 0, this.unsigned);\n};\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotateLeft = function rotateLeft(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = (32 - numBits);\n    return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\n  }\n  numBits -= 32;\n  b = (32 - numBits);\n  return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\n}\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotl = LongPrototype.rotateLeft;\n\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotateRight = function rotateRight(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = (32 - numBits);\n    return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\n  }\n  numBits -= 32;\n  b = (32 - numBits);\n  return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\n}\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotr = LongPrototype.rotateRight;\n\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nLongPrototype.toSigned = function toSigned() {\n  if (!this.unsigned)\n    return this;\n  return fromBits(this.low, this.high, false);\n};\n\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nLongPrototype.toUnsigned = function toUnsigned() {\n  if (this.unsigned)\n    return this;\n  return fromBits(this.low, this.high, true);\n};\n\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nLongPrototype.toBytes = function toBytes(le) {\n  return le ? this.toBytesLE() : this.toBytesBE();\n};\n\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nLongPrototype.toBytesLE = function toBytesLE() {\n  var hi = this.high,\n    lo = this.low;\n  return [\n    lo & 0xff,\n    lo >>> 8 & 0xff,\n    lo >>> 16 & 0xff,\n    lo >>> 24,\n    hi & 0xff,\n    hi >>> 8 & 0xff,\n    hi >>> 16 & 0xff,\n    hi >>> 24\n  ];\n};\n\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nLongPrototype.toBytesBE = function toBytesBE() {\n  var hi = this.high,\n    lo = this.low;\n  return [\n    hi >>> 24,\n    hi >>> 16 & 0xff,\n    hi >>> 8 & 0xff,\n    hi & 0xff,\n    lo >>> 24,\n    lo >>> 16 & 0xff,\n    lo >>> 8 & 0xff,\n    lo & 0xff\n  ];\n};\n\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\n  return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n};\n\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n  return new Long(\n    bytes[0] |\n    bytes[1] << 8 |\n    bytes[2] << 16 |\n    bytes[3] << 24,\n    bytes[4] |\n    bytes[5] << 8 |\n    bytes[6] << 16 |\n    bytes[7] << 24,\n    unsigned\n  );\n};\n\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n  return new Long(\n    bytes[4] << 24 |\n    bytes[5] << 16 |\n    bytes[6] << 8 |\n    bytes[7],\n    bytes[0] << 24 |\n    bytes[1] << 16 |\n    bytes[2] << 8 |\n    bytes[3],\n    unsigned\n  );\n};\n\nexport default Long;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport Long from 'long';\nexport class CosmJSOfflineSignerOnlyAmino {\n    constructor(chainId, service) {\n        this.chainId = chainId;\n        this.service = service;\n    }\n    getAccounts() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = yield this.service.getKey(this.chainId);\n            return [\n                {\n                    address: key.bech32Address,\n                    // Currently, only secp256k1 is supported.\n                    algo: 'secp256k1',\n                    pubkey: key.pubKey,\n                },\n            ];\n        });\n    }\n    signAmino(signerAddress, signDoc) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.chainId !== signDoc.chain_id) {\n                throw new Error('Unmatched chain id with the offline signer');\n            }\n            const key = yield this.service.getKey(signDoc.chain_id);\n            if (key.bech32Address !== signerAddress) {\n                throw new Error('Unknown signer address');\n            }\n            return yield this.service.signAmino(this.chainId, signerAddress, signDoc);\n        });\n    }\n    // Fallback function for the legacy cosmjs implementation before the staragte.\n    sign(signerAddress, signDoc) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.signAmino(signerAddress, signDoc);\n        });\n    }\n}\nexport class CosmJSOfflineSigner extends CosmJSOfflineSignerOnlyAmino {\n    constructor(chainId, service) {\n        super(chainId, service);\n        this.chainId = chainId;\n        this.service = service;\n    }\n    signDirect(signerAddress, signDoc) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.chainId !== signDoc.chainId) {\n                throw new Error('Unmatched chain id with the offline signer');\n            }\n            const key = yield this.service.getKey(signDoc.chainId);\n            if (key.bech32Address !== signerAddress) {\n                throw new Error('Unknown signer address');\n            }\n            return yield this.service.signDirect(this.chainId, signerAddress, {\n                bodyBytes: signDoc.bodyBytes,\n                authInfoBytes: signDoc.authInfoBytes,\n                accountNumber: Long.fromValue(signDoc.accountNumber),\n                chainId: signDoc.chainId,\n            });\n        });\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable tsdoc/syntax */\nimport { bytesToHex, hexToBytes } from '@noble/hashes/utils';\nimport { getOrCreateExtInjectedJsBridge } from '@onekeyfe/extension-bridge-injected';\nimport { ProviderCosmosBase } from './ProviderCosmosBase';\nimport Long from 'long';\nimport { CosmJSOfflineSigner, CosmJSOfflineSignerOnlyAmino } from './cosmjs';\nimport { isArray } from 'lodash';\nconst PROVIDER_EVENTS = {\n    'connect': 'connect',\n    'disconnect': 'disconnect',\n    'keplr_keystorechange': 'keplr_keystorechange',\n    'accountChanged': 'accountChanged',\n    'message_low_level': 'message_low_level',\n};\nfunction isWalletEventMethodMatch({ method, name }) {\n    return method === `wallet_events_${name}`;\n}\nclass ProviderCosmos extends ProviderCosmosBase {\n    constructor(props) {\n        super(Object.assign(Object.assign({}, props), { bridge: props.bridge || getOrCreateExtInjectedJsBridge({ timeout: props.timeout }) }));\n        this.mode = 'extension';\n        this._account = null;\n        this.defaultOptions = {};\n        this._registerEvents();\n    }\n    _registerEvents() {\n        window.addEventListener('onekey_bridge_disconnect', () => {\n            this._handleDisconnected();\n        });\n        this.on(PROVIDER_EVENTS.message_low_level, (payload) => {\n            if (!payload)\n                return;\n            const { method, params } = payload;\n            if (isWalletEventMethodMatch({ method, name: PROVIDER_EVENTS.accountChanged })) {\n                this._handleAccountChange(params);\n            }\n        });\n    }\n    _callBridge(params) {\n        return this.bridgeRequest(params);\n    }\n    _handleConnected(account, options = { emit: true }) {\n        this._account = account;\n        if (options.emit && this.isConnectionStatusChanged('connected')) {\n            this.connectionStatus = 'connected';\n            const address = account !== null && account !== void 0 ? account : null;\n            this.emit('connect', address);\n            // this.emit('keplr_keystorechange');\n        }\n    }\n    _handleDisconnected(options = { emit: true }) {\n        this._account = null;\n        if (options.emit && this.isConnectionStatusChanged('disconnected')) {\n            this.connectionStatus = 'disconnected';\n            this.emit('disconnect');\n            // this.emit('keplr_keystorechange');\n        }\n    }\n    isAccountsChanged(account) {\n        if (!account)\n            return false;\n        if (!this._account)\n            return true;\n        return bytesToHex(account.pubKey) !== bytesToHex(this._account.pubKey);\n    }\n    // trigger by bridge account change event\n    _handleAccountChange(payload) {\n        const account = payload;\n        if (this.isAccountsChanged(account)) {\n            this.emit('keplr_keystorechange');\n        }\n        if (!account) {\n            this._handleDisconnected();\n            return;\n        }\n        this._handleConnected(account, { emit: false });\n    }\n    isNetworkChanged(network) {\n        return this._network === undefined || network !== this._network;\n    }\n    isConnected() {\n        return this._account !== null;\n    }\n    on(event, listener) {\n        return super.on(event, listener);\n    }\n    emit(event, ...args) {\n        return super.emit(event, ...args);\n    }\n    enable(chainIds) {\n        return this._callBridge({\n            method: 'enable',\n            params: isArray(chainIds) ? chainIds : [chainIds],\n        });\n    }\n    disconnect() {\n        return this._callBridge({\n            method: 'disconnect',\n            // @ts-expect-error\n            params: undefined,\n        });\n    }\n    getKey(chainId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = yield this._callBridge({\n                method: 'getKey',\n                params: chainId,\n            });\n            return Object.assign(Object.assign({}, key), { \n                // @ts-expect-error\n                pubKey: hexToBytes(key.pubKey), \n                // @ts-expect-error\n                address: hexToBytes(key.address) });\n        });\n    }\n    experimentalSuggestChain(chain) {\n        return this._callBridge({\n            method: 'experimentalSuggestChain',\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            params: chain,\n        });\n    }\n    signAmino(chainId, signer, signDoc, signOptions) {\n        return this._callBridge({\n            method: 'signAmino',\n            // @ts-expect-error\n            params: {\n                chainId,\n                signer,\n                signDoc,\n                signOptions,\n            },\n        });\n    }\n    signDirect(chainId, signer, signDoc, signOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const res = yield this._callBridge({\n                method: 'signDirect',\n                // @ts-expect-error\n                params: {\n                    chainId,\n                    signer,\n                    signDoc: {\n                        bodyBytes: (signDoc === null || signDoc === void 0 ? void 0 : signDoc.bodyBytes) ? bytesToHex(signDoc === null || signDoc === void 0 ? void 0 : signDoc.bodyBytes) : null,\n                        authInfoBytes: (signDoc === null || signDoc === void 0 ? void 0 : signDoc.authInfoBytes) ? bytesToHex(signDoc === null || signDoc === void 0 ? void 0 : signDoc.authInfoBytes) : null,\n                        chainId: signDoc.chainId,\n                        accountNumber: (_a = signDoc === null || signDoc === void 0 ? void 0 : signDoc.accountNumber) === null || _a === void 0 ? void 0 : _a.toString(),\n                    },\n                    signOptions,\n                },\n            });\n            return Object.assign(Object.assign({}, res), { signed: {\n                    // @ts-expect-error\n                    bodyBytes: hexToBytes(res.signed.bodyBytes),\n                    // @ts-expect-error\n                    authInfoBytes: hexToBytes(res.signed.authInfoBytes),\n                    // @ts-expect-error\n                    accountNumber: Long.fromString(res.signed.accountNumber),\n                    chainId: res.signed.chainId,\n                } });\n        });\n    }\n    sendTx(chainId, tx, mode) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const res = yield this._callBridge({\n                method: 'sendTx',\n                // @ts-expect-error\n                params: {\n                    chainId,\n                    tx: bytesToHex(tx),\n                    mode,\n                },\n            });\n            return hexToBytes(res);\n        });\n    }\n    signArbitrary(chainId, signer, data) {\n        const newData = typeof data === 'string' ? data : bytesToHex(data);\n        return this._callBridge({\n            method: 'signArbitrary',\n            // @ts-expect-error\n            params: {\n                chainId,\n                signer,\n                data: newData,\n            },\n        });\n    }\n    verifyArbitrary(chainId, signer, data, signature) {\n        return this._callBridge({\n            method: 'verifyArbitrary',\n            // @ts-expect-error\n            params: {\n                chainId,\n                signer,\n                data: typeof data === 'string' ? data : bytesToHex(data),\n                signature,\n            },\n        });\n    }\n    signEthereum(chainId, signer, data, type) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const res = yield this._callBridge({\n                method: 'signEthereum',\n                // @ts-expect-error\n                params: {\n                    chainId,\n                    signer,\n                    data: typeof data === 'string' ? data : bytesToHex(data),\n                    type,\n                },\n            });\n            return hexToBytes(res);\n        });\n    }\n    getOfflineSigner(chainId) {\n        return new CosmJSOfflineSigner(chainId, this);\n    }\n    getOfflineSignerOnlyAmino(chainId) {\n        return new CosmJSOfflineSignerOnlyAmino(chainId, this);\n    }\n    getOfflineSignerAuto(chainId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = yield this.getKey(chainId);\n            if (key.isNanoLedger) {\n                return new CosmJSOfflineSignerOnlyAmino(chainId, this);\n            }\n            return new CosmJSOfflineSigner(chainId, this);\n        });\n    }\n}\nexport { ProviderCosmos };\n","export var EthSignType;\n(function (EthSignType) {\n    EthSignType[\"MESSAGE\"] = \"message\";\n    EthSignType[\"TRANSACTION\"] = \"transaction\";\n    EthSignType[\"EIP712\"] = \"eip-712\";\n})(EthSignType || (EthSignType = {}));\n","export * from \"./currency\";\nexport * from \"./cosmjs\";\nexport * from \"./type\";\n","export * from './OnekeyCosmosProvider';\nexport * from './ProviderCosmosBase';\nexport * from './types';\n"],"names":["u8a","a","Uint8Array","u32","Uint32Array","arr","buffer","byteOffset","Math","floor","byteLength","createView","DataView","isLE","hexes","Array","from","length","_","i","toString","padStart","bytesToHex","bytes","hex","hexToBytes","len","array","j","hexByte","slice","byte","Number","parseInt","isNaN","toBytes","data","utf8ToBytes","str","TextEncoder","encode","Hash","clone","_cloneInto","wrapConstructor","hashCons","hashC","update","msg","digest","tmp","outputLen","blockLen","create","wrapConstructorWithOpts","opts","JS_BRIDGE_MESSAGE_DIRECTION","JS_BRIDGE_MESSAGE_EXT_CHANNEL","dist","consts","getOrCreateExtInjectedJsBridge","options","bridge","Pk","JsBridgeExtInjected","Object","assign","receiveHandler","gZ","postMessageListenerAdded","ZN","constructor","config","sendAsString","isInjected","setupPostMessageListener","debugLogger","go","window","addEventListener","_a","_b","event","source","eventData","channel","direction","HOST_TO_INPAGE","extInjected","payload","jsBridge","$onekey","receive","sendPayload","payloadObj","postMessage","INPAGE_TO_HOST","EthSignType","ProviderCosmosBase","cross_inpage_provider_core_dist","BX","props","providerName","cross_inpage_provider_types_dist","U","cosmos","request","bridgeRequest","wasm","WebAssembly","Instance","Module","exports","e","Long","low","high","unsigned","isLong","obj","ctz32","value","c","clz32","prototype","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","radix","Error","RangeError","p","indexOf","substring","radixToPower","result","size","min","power","mul","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","intval","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","c16","c00","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","subtract","subtrahend","multiply","multiplier","divide","divisor","approx","res","toUnsigned","shru","halfThis","shr","shl","log2","ceil","log","max","LN2","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","b","rotl","rotateRight","rotr","toSigned","toBytesLE","toBytesBE","hi","lo","fromBytes","fromBytesLE","fromBytesBE","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","done","adopt","then","apply","CosmJSOfflineSignerOnlyAmino","chainId","service","getAccounts","key","getKey","address","bech32Address","algo","pubkey","pubKey","signAmino","signerAddress","signDoc","chain_id","sign","CosmJSOfflineSigner","signDirect","bodyBytes","authInfoBytes","accountNumber","node_modules_long","OnekeyCosmosProvider_awaiter","PROVIDER_EVENTS","ProviderCosmos","R","timeout","mode","_account","defaultOptions","_registerEvents","_handleDisconnected","on","message_low_level","method","params","isWalletEventMethodMatch","name","accountChanged","_handleAccountChange","_callBridge","_handleConnected","account","emit","isConnectionStatusChanged","connectionStatus","isAccountsChanged","utils","ci","isNetworkChanged","network","undefined","_network","isConnected","listener","args","enable","chainIds","lodash","isArray","disconnect","nr","experimentalSuggestChain","chain","signer","signOptions","signed","sendTx","tx","signArbitrary","newData","verifyArbitrary","signature","signEthereum","type","getOfflineSigner","getOfflineSignerOnlyAmino","getOfflineSignerAuto","isNanoLedger"],"sourceRoot":""}